<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HSF.TechSvc2010.Server.Common</name>
    </assembly>
    <members>
        <member name="T:HSF.TechSvc2010.Server.Common.Log.ILogInfomationFormatter">
            <summary>
            기록할 로그의 내용을 정규화 합니다.
            </summary>
            <remarks>
            로그의 내용을 정규화하여 리턴합니다.
            </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Log.ILogInfomationFormatter.Format(System.Exception)">
            <summary>
            기록할 로그 포맷으로 변환 합니다.
            </summary>
            <param name="ex">오류를 지정합니다.</param>
            <returns>변환된 로그 포맷으로 반환합니다.</returns>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Log.ILogInfomationFormatter.RowString">
            <summary>
            행 구분자를 설정하거나 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Log.ILogInfomationFormatter.ColumnString">
            <summary>
            열 구분자를 설정하거나 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Log.ILogInfomationFormatter.ReplaceRowString">
            <summary>
            필터에 의해 변경 할 행 문자열을 설정하거나 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Log.ILogInfomationFormatter.ReplaceColumnString">
            <summary>
            필터에 의해 변경 할 열 문자열을 설정하거나 가져옵니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.Common.ExceptionManagement.ExceptionManagementMode">
            <summary>
            Enum containing the mode options for the exceptionManagement tag.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.ExceptionManagement.ExceptionManagementMode.Off">
            <summary>The ExceptionManager should not process exceptions.</summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.ExceptionManagement.ExceptionManagementMode.On">
            <summary>The ExceptionManager should process exceptions. This is the default.</summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.Common.ExceptionManagement.PublisherMode">
            <summary>
            Enum containing the mode options for the publisher tag.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.ExceptionManagement.PublisherMode.Off">
            <summary>The ExceptionManager should not call the publisher.</summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.ExceptionManagement.PublisherMode.On">
            <summary>The ExceptionManager should call the publisher. This is the default.</summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.Common.ExceptionManagement.PublisherFormat">
            <summary>
            Enum containing the format options for the publisher tag.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.ExceptionManagement.PublisherFormat.Exception">
            <summary>The ExceptionManager should call the IExceptionPublisher interface of the publisher. 
            This is the default.</summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.ExceptionManagement.PublisherFormat.Xml">
            <summary>The ExceptionManager should call the IExceptionXmlPublisher interface of the publisher.</summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.Common.ExceptionManagement.ExceptionManagementSettings">
            <summary>
            Class that defines the exception management settings in the config file.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.ExceptionManagementSettings.AddPublisher(HSF.TechSvc2010.Server.Common.ExceptionManagement.PublisherSettings)">
            <summary>
            Adds a PublisherSettings to the arraylist of publishers.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.ExceptionManagement.ExceptionManagementSettings.Mode">
            <summary>
            Specifies the whether the exceptionManagement settings are "on" or "off".
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.ExceptionManagement.ExceptionManagementSettings.Publishers">
            <summary>
            An ArrayList containing all of the PublisherSettings listed in the config file.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.Common.ExceptionManagement.PublisherSettings">
            <summary>
            Class that defines the publisher settings within the exception management settings in 
            the config file.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.PublisherSettings.IsExceptionFiltered(System.Type)">
            <summary>
            Determines whether the exception type is to be filtered out based on the includes and exclude
            types specified.
            </summary>
            <param name="exceptionType">The Type of the exception to check for filtering.</param>
            <returns>True is the exception type is to be filtered out, false if it is not filtered out.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.PublisherSettings.MatchesFilter(System.Type,HSF.TechSvc2010.Server.Common.ExceptionManagement.TypeFilter)">
            <summary>
            Determines if a type is contained the supplied filter. 
            </summary>
            <param name="type">The Type to look for</param> 
            <param name="typeFilter">The Filter to test against the Type</param>
            <returns>true or false</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.PublisherSettings.AddOtherAttributes(System.String,System.String)">
            <summary>
            Allows name/value pairs to be added to the Other Attributes collection.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.ExceptionManagement.PublisherSettings.Mode">
            <summary>
            Specifies the whether the exceptionManagement settings are "on" or "off".
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.ExceptionManagement.PublisherSettings.ExceptionFormat">
            <summary>
            Specifies the whether the publisher supports the IExceptionXmlPublisher interface (value is set to "xml")
            or the publisher supports the IExceptionPublisher interface (value is either left off or set to "exception").
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.ExceptionManagement.PublisherSettings.AssemblyName">
            <summary>
            The assembly name of the publisher component that will be used to invoke the object.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.ExceptionManagement.PublisherSettings.TypeName">
            <summary>
            The type name of the publisher component that will be used to invoke the object.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.ExceptionManagement.PublisherSettings.IncludeTypes">
            <summary>
            A semicolon delimited list of all exception types that the publisher will be invoked for. 
            A "*" can be used to specify all types and is the default value if this is left off.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.ExceptionManagement.PublisherSettings.ExcludeTypes">
            <summary>
            A semicolon delimited list of all exception types that the publisher will not be invoked for. 
            A "*" can be used to specify all types. The default is to exclude no types.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.ExceptionManagement.PublisherSettings.OtherAttributes">
            <summary>
            A collection of any other attributes included within the publisher tag in the config file. 
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.Common.ExceptionManagement.TypeFilter">
            <summary>
            TypeFilter class stores contents of the Include and Exclude filters provided in the
            configuration file
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.ExceptionManagement.TypeFilter.AcceptAllTypes">
            <summary>
            Indicates if all types should be accepted for a filter
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.ExceptionManagement.TypeFilter.Types">
            <summary>
            Collection of types for the filter
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.Common.ExceptionManagement.TypeInfo">
            <summary>
            TypeInfo class contains information about each type within a TypeFilter
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.ExceptionManagement.TypeInfo.IncludeSubClasses">
            <summary>
            Indicates if subclasses are to be included with the type specified in the Include and Exclude filters
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.ExceptionManagement.TypeInfo.ClassType">
            <summary>
            The Type class representing the type specified in the Include and Exclude filters
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.Common.ExceptionManagement.ExceptionManagerSectionHandler">
            <summary>
            The Configuration Section Handler for the "exceptionManagement" section of the config file. 
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.ExceptionManagerSectionHandler.#ctor">
            <summary>
            The constructor for the ExceptionManagerSectionHandler to initialize the resource file.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.ExceptionManagerSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Builds the ExceptionManagementSettings and PublisherSettings structures based on the configuration file.
            </summary>
            <param name="parent">Composed from the configuration settings in a corresponding parent configuration section.</param>
            <param name="configContext">Provides access to the virtual path for which the configuration section handler computes configuration values. Normally this parameter is reserved and is null.</param>
            <param name="section">The XML node that contains the configuration information to be handled. section provides direct access to the XML contents of the configuration section.</param>
            <returns>The ExceptionManagementSettings struct built from the configuration settings.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.ExceptionManagerSectionHandler.LoadTypeFilter(System.String[])">
            <summary>
            Creates TypeFilter with type information from the string array of type names.
            </summary>
            <param name="rawFilter">String array containing names of types to be included in the filter.</param>
            <returns>TypeFilter object containing type information.</returns>
        </member>
        <member name="T:HSF.TechSvc2010.Server.Common.Log.DefaultLogFormatter">
            <summary>
            기본 로그 문자열 정규화 관리자 입니다.
            </summary>
            <remarks>
            ILogInfomationFormatter 인터페이스를 상속하여 구현됩니다.
            </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Log.DefaultLogFormatter.Filter(System.String)">
            <summary>
            ReplaceRowString, ReplaceColumnString으로 설정된 문자열로 변경 합니다.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Log.DefaultLogFormatter.Format(HSF.TechSvc2010.Common.Log.LOG_TYPE,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            기록할 로그 포맷으로 변환 합니다.
            </summary>
            <param name="MachineName">컴퓨터 이름을 지정합니다.</param>
            <param name="ProcessName">프로세스 이름을 지정합니다.</param>
            <param name="ProcessID">프로세스 아이디를 지정합니다.</param>
            <param name="area">로그 발생 위치를 지정합니다.</param>
            <param name="type">로그 타입을 지정합니다.</param>
            <param name="message">메시지를 지정합니다.</param>
            <returns>변환된 로그 포맷으로 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Log.DefaultLogFormatter.Format(System.Exception)">
            <summary>
            기록할 로그 포맷으로 변환 합니다.
            </summary>
            <param name="ex">오류를 지정합니다.</param>
            <returns>변환된 로그 포맷으로 반환합니다.</returns>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Log.DefaultLogFormatter.RowString">
            <summary>
            행 구분자를 설정하거나 가져옵니다. (기본값은 Environment.NewLine 입니다.)
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Log.DefaultLogFormatter.ColumnString">
            <summary>
            열 구분자를 설정하거나 가져옵니다. (기본값은 | 입니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Log.DefaultLogFormatter.ReplaceRowString">
            <summary>
            필터에 의해 변경 할 행 문자열을 설정하거나 가져옵니다. (기본값은 string.Empty 입니다.)
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Log.DefaultLogFormatter.ReplaceColumnString">
            <summary>
            필터에 의해 변경 할 열 문자열을 설정하거나 가져옵니다. (기본값은 string.Empty 입니다.)
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.Common.Service.IBrokerBalancing">
            <summary>
            ILoadBanance
            	- 브로커의 로드분산 인터페이스를 정의 합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Service.IBrokerBalancing.GetActiveURI(HSF.TechSvc2010.Common.DataItem,HSF.TechSvc2010.Common.DataItem)">
            <summary>
            사용가능한 서버 목록을 조회합니다.
            </summary>
            <param name="pool">현재 프로세스 풀을 지정합니다.</param>
            <param name="ClientInfo">클라이언트 요청 정보를 지정합니다.</param>
            <returns>사용하가능한 서버 목록을 반환합니다.</returns>
        </member>
        <member name="T:HSF.TechSvc2010.Server.Common.Service.BrokerBalancingType">
            <summary>
            Broker의 로드분산 알고리즘을 정의합니다.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.Service.BrokerBalancingType.RoundRobin">
            <summary>
            순환식 분배 알고리즘 - 클라이언트 연결요청의 순서대로 순환식 분배합니다.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.Service.BrokerBalancingType.MemoryUsageBase">
            <summary>
            메모리 사용량이 가장 적은 서버에 연결합니다.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.Service.BrokerBalancingType.ProcessorUsageBase">
            <summary>
            프로세서 사용량이 가작 적은 서버에 연결합니다.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.Service.BrokerBalancingType.UserType">
            <summary>
            사용자가 직접 작성한 알고리즘에 따라 분배합니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.Common.Log.LogManager">
            <summary>
            로그 관리자 입니다.
            </summary>
            <reqid id="RQ-TS-BFT-009">Logging 서비스 구현</reqid>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Log.LogManager.#cctor">
            <summary>
            인수 없이 LogManager 클래스의 새 인스턴스를 초기화 합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Log.LogManager.WriteLog(HSF.TechSvc2010.Common.Log.LOG_TYPE,System.String)">
            <summary>
            로그를 기록합니다.
            </summary>
            <param name="type">로그타입</param>
            <param name="message">메시지</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Log.LogManager.WriteLog(HSF.TechSvc2010.Common.Log.LOG_TYPE,System.Reflection.MethodBase,System.String)">
            <summary>
            로그를 기록합니다.
            </summary>
            <param name="type">로그타입</param>
            <param name="method">함수</param>
            <param name="message">메시지</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Log.LogManager.WriteException(System.Exception)">
            <summary>
            예외를 기록합니다.
            </summary>
            <param name="ex">예외</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Log.LogManager.WriteException(System.Reflection.MethodBase,System.Exception)">
            <summary>
            예외를 기록합니다.
            </summary>
            <param name="method">함수</param>
            <param name="ex">예외</param>
        </member>
        <!-- 잘못된 형식의 XML 주석은 "M:HSF.TechSvc2010.Server.Common.Log.LogManager.WritePerformance(System.String,System.DateTime,System.DateTime,System.Int32)" 멤버에 대해 무시됩니다. -->
        <member name="M:HSF.TechSvc2010.Server.Common.Log.LogManager.WritePerformance(System.Reflection.MethodBase,System.String,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            성능을 기록합니다.
            </summary>
            <param name="method">호출함수</param>
            <param name="tag">태그</param>
            <param name="dtStart">시작시각</param>
            <param name="dtEnd">종료시각</param>
            <param name="duration">소요시간</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Log.LogManager.WriteJournal(HSF.TechSvc2010.Common.RequestPacket,HSF.TechSvc2010.Common.ResponsePacket)">
            <summary>
            전문을 기록합니다.
            </summary>
            <param name="request">입력 저널</param>
            <param name="response">출력 저널</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Log.LogManager.WriteLog(HSF.TechSvc2010.Common.Log.LOG_TYPE,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Log 기록 함수 - 직접호출 할 수 있습니다. (최종 저장하는 메소드)
            </summary>
            <param name="type">로그 종류</param>
            <param name="webserverIP">웹서버 IP</param>
            <param name="webUrl">페이지</param>
            <param name="appIP">애플리케이션 서버 IP</param>
            <param name="appName">애플리케이션 서버 이름</param>
            <param name="psName">프로세스 이름</param>
            <param name="psID">프로세스 ID</param>
            <param name="clientIP">Client IP</param>
            <param name="userID">사용자 ID</param>
            <param name="serviceID">호출,실행 서비스 ID</param>
            <param name="inputArgs">입력 매개변수</param>
            <param name="contextGUID">컨텍스트 GUID</param>
            <param name="requestObjectString">입력 저널</param>
            <param name="responseObjectString">출력 저널</param>
            <param name="strStartTime">시작시각 yyyy-MM-dd HH:mm:ss.fff</param>
            <param name="strEndTime">종료 시각 yyyy-MM-dd HH:mm:ss.fff</param>
            <param name="strDuration">소요시간 (밀리초)</param>
            <param name="message">기록 메시지</param>
            <param name="p1">추가 매개변수 1</param>
            <param name="p2">추가 매개변수 2</param>
            <param name="p3">추가 매개변수 3</param>
            <param name="p4">추가 매개변수 4</param>
            <param name="p5">추가 매개변수 5</param>
            <param name="errorMessage">오류메시지</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Log.LogManager.InternalWriteLog(HSF.TechSvc2010.Common.Log.LOG_TYPE,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Log 기록 비동기 함수
            </summary>
            <param name="type">로그 종류</param>
            <param name="webserverIP">웹서버 IP</param>
            <param name="webUrl">페이지</param>
            <param name="appIP">애플리케이션 서버 IP</param>
            <param name="appName">애플리케이션 서버 이름</param>
            <param name="psName">프로세스 이름</param>
            <param name="psID">프로세스 ID</param>
            <param name="clientIP">Client IP</param>
            <param name="userID">사용자 ID</param>
            <param name="serviceID">호출,실행 서비스 ID</param>
            <param name="inputArgs">입력 매개변수</param>
            <param name="contextGUID">컨텍스트 GUID</param>
            <param name="requestObjectString">입력 저널</param>
            <param name="responseObjectString">출력 저널</param>
            <param name="strStartTime">시작시각 yyyy-MM-dd HH:mm:ss.fff</param>
            <param name="strEndTime">종료 시각 yyyy-MM-dd HH:mm:ss.fff</param>
            <param name="strDuration">소요시간 (밀리초)</param>
            <param name="message">기록 메시지</param>
            <param name="p1">추가 매개변수 1</param>
            <param name="p2">추가 매개변수 2</param>
            <param name="p3">추가 매개변수 3</param>
            <param name="p4">추가 매개변수 4</param>
            <param name="p5">추가 매개변수 5</param>
            <param name="errorMessage">오류메시지</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Log.LogManager.ConvertContext(HSF.TechSvc2010.Common.RequestPacket)">
            <summary>
            RequestPacket RequestContext Convert 함수
            </summary>
            <param name="request">RequestPacket</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Log.LogManager.HSFAddLogContext(HSF.TechSvc2010.Common.Log.LOG_EXT_TYPE,System.String)">
            <summary>
            RequestPacket 에 RequestContext 추가 함수
            </summary>
            <param name="logKey">적용하고자하는 로그 키</param>
            <param name="value">로그 값</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Log.LogManager.LogWriteAllowed(HSF.TechSvc2010.Common.Log.LOG_TYPE)">
            <summary>
            RequestPacket 에 RequestContext 추가 함수
            </summary>
            <param name="LOG_TYPE">적용하고자하는 로그 Type</param>
            <returns>bool</returns>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Log.LogManager.AsyncEventBubbling">
            <summary>
            COM+Evnet를 비동기 호출하는지 여부를 설정,조회 합니다.
            기본 값은 false로 동기호출을하도록 설정되어 있습니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Log.LogManager.Settings">
            <summary>
            애플리케이션의 App.config 파일에 정의 된 LogManagement Section을 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Log.LogManager.LocalNetworkAddress">
            <summary>
            Get Local IPV4 Internet IP Address
            </summary>
            <returns></returns>
        </member>
        <member name="T:HSF.TechSvc2010.Server.Common.Performance.PerformanceManager">
            <summary>
            PerformanceManager 
            	1. 메소드의 수행시간을 기록하여 그 기능을 점검하고자 작성된 class
            	2. 메소드간 주고 받는 메시지(매개변수)를 실시간으로 기록하여 그 내용을 debugging 하는 기능을 포함
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Performance.PerformanceManager.#ctor">
            <summary>
            PerformanceManager 클래스의 새 인스턴스를 초기화 합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Performance.PerformanceManager.Start">
            <summary>
            성능 측정 시작을 지정 합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Performance.PerformanceManager.WritePerformance(System.Reflection.MethodBase)">
            <summary>
            측정내용을 기록 합니다.
            </summary>
            <param name="methodbase">성능 측정을 호출한 메소드를 지정합니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Performance.PerformanceManager.WritePerformance4Query(System.Reflection.MethodBase,System.String)">
            <summary>
            측정내용을 기록 합니다. Query실행 측정용 2012-09-27 jegalhc
            </summary>
            <param name="methodbase">성능 측정을 호출한 메소드를 지정합니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Performance.PerformanceManager.WritePerformance(System.Reflection.MethodBase,System.String)">
            <summary>
            측정내용을 기록 합니다. - DAC에서 사용가능합니다.
            </summary>
            <param name="method">성능 측정을 호출한 메소드를 지정합니다.</param>
            <param name="tag">성능 구분 추가 Tag를 제공합니다. ( Query, SP Name 등을 사용할 수 있습니다. )</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Performance.PerformanceManager.WriteInfo(System.Reflection.MethodBase)">
            <summary>
            추적내용 기록을 기록 합니다.
            </summary>
            <param name="method">추적 내용을 호출한 메소드를 지정합니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Performance.PerformanceManager.WriteInfo(HSF.TechSvc2010.Common.DataItem,System.Reflection.MethodBase)">
            <summary>
            추적내용 기록을 기록 합니다.
            </summary>
            <param name="dataitem">추적 내용을 기록할 개체를 지정합니다.</param>
            <param name="method">추적 내용을 호출한 메소드를 지정합니다.</param>
            <remarks> ex: pm.WriteInfo(item,MethodInfo.getCurrentMethod()); </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Performance.PerformanceManager.Dispose">
            <summary>
            PerformanceManager에서 사용하는 모든 리소스를 해제 합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Performance.PerformanceManager.TrackingInfo">
            <summary>
            기록하고자 하는 로그를 담는 DataItem 개체를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.Common.Service.IServiceManagement">
            <summary>
            윈도우 서비스의 관리 인터페이스를 정의 합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Service.IServiceManagement.ExecuteCommand(System.String,HSF.TechSvc2010.Common.DataItem)">
            <summary>
            명령을 수행합니다.
            </summary>
            <param name="cmd">명령의 종류를 지정합니다.</param>
            <param name="data">파라메터를 지정합니다.</param>
            <returns>명령을 수행한 후 결과를 반환합니다.</returns>
        </member>
        <member name="T:HSF.TechSvc2010.Server.Common.Service.BrokerServiceInfo">
            <summary>
            Broker Service Infomation objet
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.Service.BrokerServiceInfo.Machine">
            <summary>
            machine name
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.Service.BrokerServiceInfo.ProcessID">
            <summary>
            process id
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.Service.BrokerServiceInfo.Port">
            <summary>
            port
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.Service.BrokerServiceInfo.EndPointName">
            <summary>
            endpoint name
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.Service.BrokerServiceInfo.ProcessName">
            <summary>
            process name
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.Service.BrokerServiceInfo.BrokerTypeName">
            <summary>
            broker type name
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.Service.BrokerServiceInfo.FielterTypeName">
            <summary>
            filter name
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.Service.BrokerServiceInfo.IsSecureChannel">
            <summary>
            user secure channel : default = false
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.Service.BrokerServiceInfo.cnt_total_ref">
            <summary>
            total reference count
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.Service.BrokerServiceInfo.cnt_total_err">
            <summary>
            total err count
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.Service.BrokerServiceInfo.cnt_current_ref">
            <summary>
            total current ref count
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.Common.Service.TaskWorkerInfo">
            <summary>
            Task Worker Infomation object
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.Service.TaskWorkerInfo.WorkerName">
            <summary>
            task worker name
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.Service.TaskWorkerInfo.WorkerTypeName">
            <summary>
            task worker type name
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.Service.TaskWorkerInfo.Expire">
            <summary>
            expire format
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.Service.TaskWorkerInfo.ExecuteCount">
            <summary>
            execute count
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.Service.TaskWorkerInfo.ErrorCount">
            <summary>
            error count
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.Service.TaskWorkerInfo.LastrErrorString">
            <summary>
            last error string
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.Service.TaskWorkerInfo.LastExecuteTime">
            <summary>
            last execute datetime
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.Common.Service.ComponentFileInfo">
            <summary>
            Business Component File Infomation
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.Service.ComponentFileInfo.FileName">
            <summary>
            Component File Name
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.Service.ComponentFileInfo.FileStream">
            <summary>
            Component File Stream Info 
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.Service.ComponentFileInfo.FileSize">
            <summary>
            Component File Size
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.Service.ComponentFileInfo.FileVersion">
            <summary>
            Component File Version
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.Service.ComponentFileInfo.LastWriteTimeUtc">
            <summary>
            Component Last Write Time UTC
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.Service.ComponentFileInfo.CreationTimeUtc">
            <summary>
            Component Creation Time UTC
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.Common.Service.COMPlusConfig">
            <summary>
            COM Plus Configuration Infomation
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Service.COMPlusConfig.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Service.COMPlusConfig.#ctor(System.Int32)">
            <summary>
            생성자
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Service.COMPlusConfig.find(System.String)">
            <summary>
            Key 값으로 Index 위치를 찾아옵니다.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.Service.COMPlusConfig.Key">
            <summary>
            COM Plus Key
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.Service.COMPlusConfig.Name">
            <summary>
            COM Plus Name
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.Service.COMPlusConfig.Transaction">
            <summary>
            트랜잭션 지원
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.Service.COMPlusConfig.ObjectPoolingEnabled">
            <summary>
            개체 풀링 여부
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.Service.COMPlusConfig.MinPoolSize">
            <summary>
            최소 풀 크기
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.Service.COMPlusConfig.MaxPoolSize">
            <summary>
            최대 풀 크기
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.Common.Service.COMPlusConfig.CreationTimeout">
            <summary>
            직성 시간 제한 (밀리초)
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Service.COMPlusConfig.Item(System.Int32)">
            <summary>
            COM Plus Config Indexer Index 값을 이용해 값을 가져오거나 설정합니다.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Service.COMPlusConfig.Item(System.String)">
            <summary>
            COM Plus Config Indexer Key를 이용해 값을 가져옵니다.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:HSF.TechSvc2010.Server.Common.Performance.SoapPerformacneLogging">
            <summary>
            XML Webservice 의 성능 기록 확장 클래스 입니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Performance.SoapPerformacneLogging.WriteLog(System.String)">
            <summary>
            비동기로 로그를 기록합니다.
            </summary>
            <param name="msg">기록할 메시지를 지정합니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Performance.SoapPerformacneLogging.FormatMessage(System.Web.Services.Protocols.SoapMessage)">
            <summary>
            SoapMessage를 문자열 메시지화 합니다.
            </summary>
            <param name="msg">SoapMessage를 문자열 메시지입니다.</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Performance.SoapPerformacneLogging.ChainStream(System.IO.Stream)">
            <summary>
            Save the Stream representing the SOAP request or SOAP response into
            a local memory buffer.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Performance.SoapPerformacneLogging.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)">
            <summary>
             When the SOAP extension is accessed for the first time, the XML Web
             service method it is applied to is accessed to store the file
             name passed in, using the corresponding SoapExtensionAttribute.   
             <param name="methodInfo"></param>
             <param name="attribute"></param>
             <returns></returns>
             </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Performance.SoapPerformacneLogging.GetInitializer(System.Type)">
            <summary>
             The SOAP extension was configured to run using a configuration file
             instead of an attribute applied to a specific Web service
             method.
             </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Performance.SoapPerformacneLogging.Initialize(System.Object)">
            <summary>
             Receive the file name stored by GetInitializer and store it in a
             member variable for this specific instance.
             </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Performance.SoapPerformacneLogging.ProcessMessage(System.Web.Services.Protocols.SoapMessage)">
            <summary>
              If the SoapMessageStage is such that the SoapRequest or
              SoapResponse is still in the SOAP format to be sent or received,
              save it out to a file.
              </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Performance.SoapPerformacneLogging.WriteOutput(System.Web.Services.Protocols.SoapMessage)">
            <summary>
            출력 메시지 기록 합니다.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Performance.SoapPerformacneLogging.WriteInput(System.Web.Services.Protocols.SoapMessage)">
            <summary>
            입력 메시지 기록 합니다.
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Performance.SoapPerformacneLogging.Settings">
            <summary>
            Logging Settings
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Performance.SoapPerformacneLogging.Dir">
            <summary>
            로그 기록 경로를 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Performance.SoapPerformacneLogging.LogPath">
            <summary>
            로그 기록 경로를 가져옵니다. : DIR\yyyyMM
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Performance.SoapPerformacneLogging.FileName">
            <summary>
            로그기록 파일명을 가져옵니다. : DIR\LogPath\HH.log
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Performance.SoapPerformacneLogging.FormName">
            <summary>
            호출화면명을 지정하거나 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Performance.SoapPerformacneLogging.INPUT">
            <summary>
            입력 데이터를 지정하거나 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Performance.SoapPerformacneLogging.OUTPUT">
            <summary>
            출력데이터를 지정하거나 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Performance.SoapPerformacneLogging.WorkStream">
            <summary>
            입출력 스트림 개체를 지정하거나 가져옵니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.Common.ExceptionManagement.ExceptionManagerInstaller">
            <summary>
            Installer class used to create two event sources for the 
            Exception Management Application Block to function correctly.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.ExceptionManagerInstaller.#ctor">
            <summary>
            Constructor with no params.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.ExceptionManagerInstaller.InitializeComponent">
            <summary>
            Initialization function to set internal variables.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.Common.ExceptionManagement.ExceptionManager">
            <summary>
            The Exception Manager class manages the publishing of exception information based on settings in the configuration file.
            </summary>
            <reqid id="RQ-TS-BFT-011">에러 처리(Exception Handling)</reqid>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.ExceptionManager.#ctor">
            <summary>
            Private constructor to restrict an instance of this class from being created.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.ExceptionManager.Publish(System.Exception)">
            <summary>
            Static method to publish the exception information.
            </summary>
            <param name="exception">The exception object whose information should be published.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.ExceptionManager.Publish(System.Exception,System.Reflection.MethodBase)">
            <summary>
            Static method to publish the exception information.
            </summary>
            <param name="exception">The exception object whose information should be published.</param>
            <param name="minfo">method info</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.ExceptionManager.Publish(System.Exception,System.Reflection.MethodBase,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Static method to publish the exception information and any additional information.
            </summary>
            <param name="exception">The exception object whose information should be published.</param>
            <param name="additionalInfo">A collection of additional data that should be published along with the exception information.</param>
            <param name="minfo">method info</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.ExceptionManager.PublishToCustomPublisher(System.Exception,System.Collections.Specialized.NameValueCollection,HSF.TechSvc2010.Server.Common.ExceptionManagement.PublisherSettings)">
            <summary>
            Private static helper method to publish the exception information to a custom publisher.
            </summary>
            <param name="exception">The exception object whose information should be published.</param>
            <param name="additionalInfo">A collection of additional data that should be published along with the exception information.</param>
            <param name="publisher">The PublisherSettings that contains the values of the publishers configuration.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.ExceptionManager.PublishToCustomPublisher(System.Exception,System.Reflection.MethodBase,System.Collections.Specialized.NameValueCollection,HSF.TechSvc2010.Server.Common.ExceptionManagement.PublisherSettings)">
            <summary>
            Private static helper method to publish the exception information to a custom publisher.
            </summary>
            <param name="exception">The exception object whose information should be published.</param>
            <param name="additionalInfo">A collection of additional data that should be published along with the exception information.</param>
            <param name="publisher">The PublisherSettings that contains the values of the publishers configuration.</param>
            <param name="minfo">method info</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.ExceptionManager.PublishToDefaultPublisher(System.Exception,System.Reflection.MethodBase,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Private static helper method to publish the exception information to the default publisher.
            </summary>
            <param name="exception">The exception object whose information should be published.</param>
            <param name="additionalInfo">A collection of additional data that should be published along with the exception information.</param>
            <param name="minfo">method info</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.ExceptionManager.PublishInternalException(System.Exception,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Private static helper method to publish the exception information to the default publisher.
            </summary>
            <param name="exception">The exception object whose information should be published.</param>
            <param name="additionalInfo">A collection of additional data that should be published along with the exception information.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.ExceptionManager.Activate(System.String,System.String)">
            <summary>
            Private helper function to assist in run-time activations. Returns
            an object from the specified assembly and type.
            </summary>
            <param name="assembly">Name of the assembly file (w/out extension)</param>
            <param name="typeName">Name of the type to create</param>
            <returns>Instance of the type specified in the input parameters.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.ExceptionManager.SerializeToXml(System.Exception,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Public static helper method to serialize the exception information into XML.
            </summary>
            <param name="exception">The exception object whose information should be published.</param>
            <param name="additionalInfo">A collection of additional data that should be published along with the exception information.</param>
        </member>
        <member name="T:HSF.TechSvc2010.Server.Common.ExceptionManagement.DefaultPublisher">
            <summary>
            Component used as the default publishing component if one is not specified in the config file.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.Common.ExceptionManagement.IExceptionPublisher">
            <summary>
            Interface to publish exception information.  All exception information is passed as the chain of exception objects.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.IExceptionPublisher.Publish(System.Exception,System.Reflection.MethodBase,System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Method used to publish exception information and additional information.
            </summary>
            <param name="exception">The exception object whose information should be published.</param>
            <param name="additionalInfo">A collection of additional data that should be published along with the exception information.</param>
            <param name="configSettings">A collection of name/value attributes specified in the config settings.</param>
            <param name="minfo">method info</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.IExceptionPublisher.Publish(System.Exception,System.Reflection.MethodBase)">
            <summary>
            Method used to publish exception information and additional information.
            </summary>
            <param name="exception">The exception object whose information should be published.</param>
            <param name="minfo">method info</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.DefaultPublisher.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.DefaultPublisher.#ctor(System.String,System.String)">
            <summary>
            Constructor allowing the log name and application names to be set.
            </summary>
            <param name="logName">The name of the log for the DefaultPublisher to use.</param>
            <param name="applicationName">The name of the application.  This is used as the Source name in the event log.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.DefaultPublisher.Publish(System.Exception,System.Reflection.MethodBase)">
            <summary>
            Method used to publish exception information and additional information.
            </summary>
            <param name="exception">The exception object whose information should be published.</param>
            <param name="minfo">method info</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.DefaultPublisher.Publish(System.Exception,System.Reflection.MethodBase,System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Method used to publish exception information and additional information.
            </summary>
            <param name="exception">The exception object whose information should be published.</param>
            <param name="additionalInfo">A collection of additional data that should be published along with the exception information.</param>
            <param name="configSettings">A collection of any additional attributes provided in the config settings for the custom publisher.</param>
            <param name="minfo">method info</param>	
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.DefaultPublisher.WriteToLog(System.String,System.Diagnostics.EventLogEntryType)">
            <summary>
            Helper function to write an entry to the Event Log.
            </summary>
            <param name="entry">The entry to enter into the Event Log.</param>
            <param name="type">The EventLogEntryType to be used when the entry is logged to the Event Log.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.DefaultPublisher.WriteToLog(System.String,System.Reflection.MethodBase,System.Diagnostics.EventLogEntryType)">
            <summary>
            Helper function to write an entry to the Event Log.
            </summary>
            <param name="entry">The entry to enter into the Event Log.</param>
            <param name="type">The EventLogEntryType to be used when the entry is logged to the Event Log.</param>
            <param name="minfo">method info</param>
        </member>
        <member name="T:HSF.TechSvc2010.Server.Common.Log.ILogWriter">
            <summary>
            로그 기록 인터페이스를 정의 합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Log.ILogWriter.getStream(HSF.TechSvc2010.Common.Log.LOG_TYPE)">
            <summary>
            로그를 기록할 stream을생성합니다.
            </summary>
            <param name="area">로그 발생 위치를 지정합니다.</param>
            <param name="type">로그 타입을 지정합니다.</param>
            <param name="message">메시지를 지정합니다.</param>
            <returns>로그를 기록할 Stream 개체를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Log.ILogWriter.Write(HSF.TechSvc2010.Common.Log.LOG_TYPE,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Log 기록 함수
            </summary>
            <param name="type">로그 종류</param>
            <param name="webserverIP">웹서버 IP</param>
            <param name="webUrl">페이지</param>
            <param name="appIP">애플리케이션 서버 IP</param>
            <param name="appName">애플리케이션 서버 이름</param>
            <param name="psName">프로세스 이름</param>
            <param name="psID">프로세스 ID</param>
            <param name="clientIP">Client IP</param>
            <param name="userID">사용자 ID</param>
            <param name="serviceID">호출,실행 서비스 ID</param>
            <param name="inputArgs">입력 매개변수</param>
            <param name="contextGUID">컨텍스트 GUID</param>
            <param name="requestObjectString">입력 저널</param>
            <param name="responseObjectString">출력 저널</param>
            <param name="strStartTime">시작시각 yyyy-MM-dd HH:mm:ss.fff</param>
            <param name="strEndTime">종료 시각 yyyy-MM-dd HH:mm:ss.fff</param>
            <param name="strDuration">소요시간 (밀리초)</param>
            <param name="message">기록 메시지</param>
            <param name="p1">추가 매개변수 1</param>
            <param name="p2">추가 매개변수 2</param>
            <param name="p3">추가 매개변수 3</param>
            <param name="p4">추가 매개변수 4</param>
            <param name="p5">추가 매개변수 5</param>
            <param name="errorMessage">오류메시지</param>
        </member>
        <member name="T:HSF.TechSvc2010.Server.Common.ExceptionManagement.BaseApplicationException">
            <summary>
            Base Application Exception Class. You can use this as the base exception object from
            which to derive your applications exception hierarchy.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.BaseApplicationException.#ctor">
            <summary>
            Constructor with no params.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.BaseApplicationException.#ctor(System.String)">
            <summary>
            Constructor allowing the Message property to be set.
            </summary>
            <param name="message">String setting the message of the exception.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.BaseApplicationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor allowing the Message and InnerException property to be set.
            </summary>
            <param name="message">String setting the message of the exception.</param>
            <param name="inner">Sets a reference to the InnerException.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.BaseApplicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor used for deserialization of the exception class.
            </summary>
            <param name="info">Represents the SerializationInfo of the exception.</param>
            <param name="context">Represents the context information of the exception.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.BaseApplicationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Override the GetObjectData method to serialize custom values.
            </summary>
            <param name="info">Represents the SerializationInfo of the exception.</param>
            <param name="context">Represents the context information of the exception.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.BaseApplicationException.InitializeEnvironmentInformation">
            <summary>
            Initialization function that gathers environment information safely.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.ExceptionManagement.BaseApplicationException.MachineName">
            <summary>
            Machine name where the exception occurred.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.ExceptionManagement.BaseApplicationException.CreatedDateTime">
            <summary>
            Date and Time the exception was created.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.ExceptionManagement.BaseApplicationException.AppDomainName">
            <summary>
            AppDomain name where the exception occurred.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.ExceptionManagement.BaseApplicationException.ThreadIdentityName">
            <summary>
            Identity of the executing thread on which the exception was created.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.ExceptionManagement.BaseApplicationException.WindowsIdentityName">
            <summary>
            Windows identity under which the code was running.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.ExceptionManagement.BaseApplicationException.AdditionalInformation">
            <summary>
            Collection allowing additional information to be added to the exception.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.Common.Performance.doWork">
            <summary>
            로그 기록 처리를 할 대리자를 정의 합니다.
            </summary>
            <param name="msg">메시지를 지정합니다.</param>
        </member>
        <member name="T:HSF.TechSvc2010.Server.Common.Performance.HttpPerformanceLogging">
            <summary>
            ASP.NET 에서 성능 로그 기록을 합니다.
            </summary>
            <remarks>
            Web.Config 에 HttpModule를 추가함으로써 성능 로그를 만들 수 있습니다.
            <system.web>
                <httpModules>
                    <add name="HttpPerformanceLogging" type="HSF.TechSvc2010.Server.Common.Performance.HttpPerformanceLogging, HSF.TechSvc2010.Server.Common,Version=1.0.0.0,Culture=neutral,PublicKeyToken=50535a6f1106be75"/>
                </httpModules>
            </system.web>
            </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Performance.HttpPerformanceLogging.#ctor">
            <summary>
            HttpPerformanceLogging 클래스의 새 인스턴스를 초기화 합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Performance.HttpPerformanceLogging.Init(System.Web.HttpApplication)">
            <summary>
            모듈을 초기화하고 요청을 처리할 수 있도록 준비합니다.
            </summary>
            <param name="context">ASP.NET 응용 프로그램 내의 모든 응용 프로그램 개체에 공통되는 메서드, 속성 및 이벤트에 액세스할 수 있도록 하는 HttpApplication입니다.</param>
            <remarks>
            Init 메서드를 사용하여 특정 이벤트에 이벤트 처리 메서드를 등록합니다.
            (BeginRequest, EndRequest, Error)
            </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Performance.HttpPerformanceLogging.WriteLog(System.String)">
            <summary>
            성능 로그 기록 합니다.
            </summary>
            <param name="info">기록할 내용을 지정합니다.</param>
            <remarks>
            성능 로그를 기록 할 때는 시스템 성능의 향상을 위해 비동기로 처리를 합니다.
            </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Performance.HttpPerformanceLogging.WriteErrorLog(System.String)">
            <summary>
            에러 로그 기록 합니다.
            </summary>
            <param name="info">기록할 내용을 지정합니다.</param>
            <remarks>
            에러 로그를 기록 할 때는 시스템 성능의 향상을 위해 비동기로 처리를 합니다.
            </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Performance.HttpPerformanceLogging._writeErrorlog(System.String)">
            <summary>
            에러 로그 기록 합니다.
            </summary>
            <param name="info">기록할 내용을 지정합니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Performance.HttpPerformanceLogging._writelog(System.String)">
            <summary>
            성능 로그 기록 합니다.
            </summary>
            <param name="info">기록할 내용을 지정합니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Performance.HttpPerformanceLogging.Dispose">
            <summary>
            IHttpModule을 구현하는 모듈에서 사용하는 리소스(메모리 제외)를 삭제합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Performance.HttpPerformanceLogging.Settings">
            <summary>
            Logging Settings
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.Common.Log.LogConfigSettings">
            <summary>
            애플리케이션의 App.config 파일에 LogManagement로 정의 합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Log.LogConfigSettings.Insance">
            <summary>
            singleton 호출을 위한 인스턴스를 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Log.LogConfigSettings.PerformanceMode">
            <summary>
            성능 로그를 기록 할 것인지를 설정하거나 가져옵니다.
            </summary>
            <remarks>
            true이면 기록, false이면 기록안함
            </remarks>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Log.LogConfigSettings.OperatiorMode">
            <summary>
            조작 로그를 기록 할 것인지를 설정하거나 가져옵니다.
            </summary>
            <remarks>
            true이면 기록, false이면 기록안함
            </remarks>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Log.LogConfigSettings.NormalMode">
            <summary>
            일반 정보 로그를 기록 할 것인지를 설정하거나 가져옵니다.
            </summary>
            <remarks>
            true이면 기록, false이면 기록안함
            </remarks>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Log.LogConfigSettings.ExceptionMode">
            <summary>
            오류 로그를 기록 할 것인지를 설정하거나 가져옵니다.
            </summary>
            <remarks>
            true이면 기록, false이면 기록안함
            </remarks>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Log.LogConfigSettings.LOMode">
            <summary>
            사용자 로그인/아웃 로그(LOGINOUT)
            </summary>
            <remarks>
            true이면 기록, false이면 기록안함
            </remarks>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Log.LogConfigSettings.AAMode">
            <summary>
            Application 접근 실패 로그(APPLICATION_ACCESS)
            </summary>
            <remarks>
            true이면 기록, false이면 기록안함
            </remarks>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Log.LogConfigSettings.MAMode">
            <summary>
            메뉴 접근 로그(MENU_ACCESS)
            </summary>
            <remarks>
            true이면 기록, false이면 기록안함
            </remarks>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Log.LogConfigSettings.STMode">
            <summary>
            세션타임아웃(SESSION_TIMEOUT)
            </summary>
            <remarks>
            true이면 기록, false이면 기록안함
            </remarks>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Log.LogConfigSettings.PIMode">
            <summary>
            환자 개인 정보 조회(PATIENT_INFORMATION_INQUIRY)
            </summary>
            <remarks>
            true이면 기록, false이면 기록안함
            </remarks>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Log.LogConfigSettings.ESMode">
            <summary>
            전자서명 유효성 검증 로그(ELECTRONIC_SIGNATURE_VALIDAATION)
            </summary>
            <remarks>
            true이면 기록, false이면 기록안함
            </remarks>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Log.LogConfigSettings.MRMode">
            <summary>
            의무기록 조회 로그(MEDICAL_RECORD_INQUIRY)
            </summary>
            <remarks>
            true이면 기록, false이면 기록안함
            </remarks>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Log.LogConfigSettings.PDMode">
            <summary>
            출력물/다운로드 로그(PRINTING_DOWNLOAD)
            </summary>
            <remarks>
            true이면 기록, false이면 기록안함
            </remarks>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Log.LogConfigSettings.EIMode">
            <summary>
            직원 개인 정보 변경 로그(EMPLOYMENT_INFORMATION_CHANGE)
            </summary>
            <remarks>
            true이면 기록, false이면 기록안함
            </remarks>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Log.LogConfigSettings.EAMode">
            <summary>
            권한 관리자 접근 로그(EAM)(EAM_ACCESS)
            </summary>
            <remarks>
            true이면 기록, false이면 기록안함
            </remarks>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Log.LogConfigSettings.UPMode">
            <summary>
            사용자 체감 성능로그(USER_PERFORMANCE)
            </summary>
            <remarks>
            true이면 기록, false이면 기록안함
            </remarks>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Log.LogConfigSettings.PRMode">
            <summary>
            PATIENT_RESERVATION
            </summary>
            <remarks>
            true이면 기록, false이면 기록안함
            </remarks>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Log.LogConfigSettings.OHMode">
            <summary>
            ORDER_HISTORY
            </summary>
            <remarks>
            true이면 기록, false이면 기록안함
            </remarks>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Log.LogConfigSettings.OPMode">
            <summary>
            ORDER_PATIENT_INQUERY
            </summary>
            <remarks>
            true이면 기록, false이면 기록안함
            </remarks>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Log.LogConfigSettings.CCMode">
            <summary>
            CCIS
            </summary>
            <remarks>
            true이면 기록, false이면 기록안함
            </remarks>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Log.LogConfigSettings.Path">
            <summary>
            로그를 기록할 패스를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Log.LogConfigSettings.LogWriter">
            <summary>
            로그 기록을 담당할 클래스를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Log.LogConfigSettings.LogFormatter">
            <summary>
            로그 포맷을 담당할 클래스를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.Common.Log.LogManagerSectionHandler">
            <summary>
            로그 관리자 환경파일 block 핸들러 입니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Log.LogManagerSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            구성 색션 처리기를 만듭니다.
            </summary>
            <param name="parent">부모 개체입니다.</param>
            <param name="configContext">구성 컨텍스트 개체입니다.</param>
            <param name="section">섹션 XML 노드입니다.</param>
            <returns>만들어진 섹션 처리기 개체입니다.</returns>
            <remarks>
            IConfigurationSectionHandler 클래스의 인스턴스는 스레드로부터 안전하고 상태를 저장하지 않아야 합니다. Create 메서드는 여러 스레드에서 동시에 호출할 수 있어야 합니다.
            또한 Create 메서드에서 생성하는 구성 개체는 스레드로부터 안전하고 변경할 수 없어야 합니다. 구성 개체가 구성 시스템에서 캐시되기 때문에 Create에 대한 부모 인수를 수정하면 안 됩니다.
            예를 들어, Create의 반환 값이 부모를 약간 수정한 것이면 원래 부모가 아니라 부모의 복제본이 실제로 수정되어야 합니다.
            </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Log.LogManagerSectionHandler.Activate(System.String,System.String)">
            <summary>
            Private helper function to assist in run-time activations. Returns
            an object from the specified assembly and type.
            </summary>
            <param name="assembly">Name of the assembly file (w/out extension)</param>
            <param name="typeName">Name of the type to create</param>
            <returns>Instance of the type specified in the input parameters.</returns>
        </member>
        <member name="T:HSF.TechSvc2010.Server.Common.ExceptionManagement.IExceptionXmlPublisher">
            <summary>
            Interface to publish exception information.  All exception information is passed as XML.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.IExceptionXmlPublisher.Publish(System.Xml.XmlDocument,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Method used to publish exception information and any additional information in XML.
            </summary>
            <param name="exceptionInfo">An XML Document containing the all exception information.</param>
            <param name="configSettings">A collection of name/value attributes specified in the config settings.</param>
        </member>
        <member name="T:HSF.TechSvc2010.Server.Common.Log.DefaultLogwriter">
            <summary>
            로그 기록 개체로 기본으로 제공 되는 클래스 입니다.
            이 개체는 파일 시스템에 로그를 남기게 된다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Log.DefaultLogwriter.getStream(HSF.TechSvc2010.Common.Log.LOG_TYPE)">
            <summary>
            로그를 기록할 stream을생성합니다.
            </summary>
            <param name="area">로그 발생 위치를 지정합니다.</param>
            <param name="type">로그 타입을 지정합니다.</param>
            <param name="message">메시지를 지정합니다.</param>
            <returns>로그를 기록할 Stream 개체를 반환합니다.</returns>
            <remarks>
            기본적으로 파일이 생성 될 때는 해당 애플리케이션의 App.config에서 정의된 로그 기록 Path를 참조 하여 생성을 합니다.
            파일명은 오늘날짜(yyyyMMdd).LOG_TYPE.log 이름으로 기록 됩니다.
            만일 이 형태를 바꾸고자 한다면 이 메소드를 override 해서 다시 구현을 하면 됩니다.
            구현을 한 후에 해당 애플리케이션의 App.config에서 DefaulLogWriter로 지정되어 있는 섹션을 새로 구현한 클래스 이름으로 변경 합니다.
            </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.Log.DefaultLogwriter.Write(HSF.TechSvc2010.Common.Log.LOG_TYPE,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            매체에 로그를 기록합니다.
            </summary>
            <param name="MachineName">컴퓨터 이름을 지정합니다.</param>
            <param name="ProcessName">프로세스 이름을 지정합니다.</param>
            <param name="ProcessID">프로세스 아이디를 지정합니다.</param>
            <param name="area">로그 발생 위치를 지정합니다.</param>
            <param name="type">로그 타입을 지정합니다.</param>
            <param name="message">메시지를 지정합니다.</param>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.Log.DefaultLogwriter.Settings">
            <summary>
            애플리케이션의 App.config 파일에 정의 된 LogManagement Section을 가져옵니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.Common.ExceptionManagement.CustomPublisherException">
            <summary>
            Summary description for ExceptionManagerExceptions.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.CustomPublisherException.#ctor">
            <summary>
            Constructor with no params.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.CustomPublisherException.#ctor(System.String)">
            <summary>
            Constructor allowing the Message property to be set.
            </summary>
            <param name="message">String setting the message of the exception.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.CustomPublisherException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor allowing the Message and InnerException property to be set.
            </summary>
            <param name="message">String setting the message of the exception.</param>
            <param name="inner">Sets a reference to the InnerException.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.CustomPublisherException.#ctor(System.String,System.String,System.String,HSF.TechSvc2010.Server.Common.ExceptionManagement.PublisherFormat)">
            <summary>
            Constructor allowing the message, assembly name, type name, and publisher format to be set.
            </summary>
            <param name="message">String setting the message of the exception.</param>
            <param name="assemblyName">String setting the assembly name of the exception.</param>
            <param name="typeName">String setting the type name of the exception.</param>
            <param name="publisherFormat">String setting the publisher format of the exception.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.CustomPublisherException.#ctor(System.String,System.String,System.String,HSF.TechSvc2010.Server.Common.ExceptionManagement.PublisherFormat,System.Exception)">
            <summary>
            Constructor allowing the Message and InnerException property to be set.
            </summary>
            <param name="message">String setting the message of the exception.</param>
            <param name="assemblyName">String setting the assembly name of the exception.</param>
            <param name="typeName">String setting the type name of the exception.</param>
            <param name="publisherFormat">String setting the publisher format of the exception.</param>
            <param name="inner">Sets a reference to the InnerException.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.CustomPublisherException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor used for deserialization of the exception class.
            </summary>
            <param name="info">Represents the SerializationInfo of the exception.</param>
            <param name="context">Represents the context information of the exception.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.Common.ExceptionManagement.CustomPublisherException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Override the GetObjectData method to serialize custom values.
            </summary>
            <param name="info">Represents the SerializationInfo of the exception.</param>
            <param name="context">Represents the context information of the exception.</param>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.ExceptionManagement.CustomPublisherException.PublisherFormat">
            <summary>
            The exception format configured for the publisher that threw an exception.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.ExceptionManagement.CustomPublisherException.PublisherAssemblyName">
            <summary>
            The Assembly name of the publisher that threw an exception.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.Common.ExceptionManagement.CustomPublisherException.PublisherTypeName">
            <summary>
            The Type name of the publisher that threw an exception.
            </summary>
        </member>
    </members>
</doc>
