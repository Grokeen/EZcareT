<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HSF.TechSvc2010.Server.DAC</name>
    </assembly>
    <members>
        <member name="T:HSF.TechSvc2010.Server.DAC.ODBCDacBase">
            <summary>
            ODBC Database Access Object
            </summary>
            <remarks>
            e.g.:  
             환경파일의 Key값은 "ODBCConnectionString"입니다. 데이터 베이스 연결 문자열을 구성하기 위해서는
             GetConfigConnectionString() 메소드를 구현하거나 ConnectionString 속성을 사용합니다.
            </remarks>
            
        </member>
        <member name="T:HSF.TechSvc2010.Server.DAC.IDacBase">
            <summary>
            데이터 베이스 작업 관리자 추상화 클래스
            </summary>
            <remarks>
            직접 생성하여 사용하지 않으며, SqlDacBase, OracleDacBase, OleDbDacBase에서 상속하여 사용합니다.
            MS SQL, Oracle, OLEDB Provider 의 데이터베이스 작업을 표준화합니다.
            </remarks>
            <reqid id="RQ-TS-BFT-005">Data Access 서비스 지원</reqid>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.CanBePooled">
            <summary>
            개체가 풀에 다시 배치되기 전에 인프라에서 이 메서드를 호출합니다. 이 메서드를 재정의하여 개체를 풀에 다시 배치할지 여부를 결정합니다.
            </summary>
            <returns>서비스되는 구성 요소가 풀링될 수 있으면 true이고, 그렇지 않으면 false입니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.Activate">
            <summary>
            COM+가 활성화 될때 실행됩니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.Deactivate">
            <summary>
            COM+ 개체가 비활성화 될때 실행됩니다.
            </summary>
            <remarks>
            ClearConnection()이 호출되어 자원을 해제합니다.
            </remarks>
        </member>
        <member name="F:HSF.TechSvc2010.Server.DAC.IDacBase._conn">
            <summary>
            데이터베이스 연결 개체를 지정합니다.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.DAC.IDacBase._connectionstring">
            <summary>
            connection string field
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.DAC.IDacBase._commandtimeout">
            <summary>
            connection string field
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.DAC.IDacBase.isdisposed">
            <summary>
            dispose flag
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.GetConfigConnectionString">
            <summary>
            환경관리자에서 연결문자열을 조회합니다.
            - Configuration 에서 DefaultConnectionStringConfigurationHintName 속성에 정의된 키로 값을 읽습니다.
            </summary>
            <returns>연결문자열을 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.GetConfigConnectionString(System.String)">
            <summary>
            환경관리자에서 연결문자열을 조회합니다.
            - Configuration 에서 dbHint 키로 값을 읽습니다.
            </summary>
            <param name="dbHint">Configuration에서 dbHit로 정의된 키를 지정합니다.</param>
            <returns>연결문자열을 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.RuntimeConnectionString(System.String)">
            <summary>
            get runtime connectionstring
            </summary>
            <param name="dbHint">런타임시에 가져올 Configuarion 에서 정의된 키를 지정합니다.</param>
            <returns>연결문자열을 반환합니다.</returns>
        </member>
        <member name="F:HSF.TechSvc2010.Server.DAC.IDacBase._closeDbConnectionOnDeactivate">
            <summary>
            close connection on deactivate (defalut = true )
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.ClearConnection">
            <summary>
            clear infomation 
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            SQL문장, 저장프로시져를 실행 합니다.
            </summary>
            <param name="DBHint">Configuration에서 읽은 데이터베이스 연결 문자 키 값을 지정합니다.</param>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text)을 지정합니다. </param>
            <param name="commandText">명령 문자열을 지정합니다.</param>
            <param name="commandParameters">명령 문자열에 바인딩되는 매개변수를 지정합니다.</param>
            <returns>SQL 문자, 저장 프로시져를 실행하고 난 후에 발생한 행의 갯수를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.ExecuteNonQuery(System.Int32,System.String,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            SQL문장, 저장프로시져를 실행 합니다.
            </summary>
            <param name="DBHint">Configuration에서 읽은 데이터베이스 연결 문자 키 값을 지정합니다.</param>
            <param name="size"></param>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text)을 지정합니다. </param>
            <param name="commandText">명령 문자열을 지정합니다.</param>
            <param name="commandParameters">명령 문자열에 바인딩되는 매개변수를 지정합니다.</param>
            <returns>SQL 문자, 저장 프로시져를 실행하고 난 후에 발생한 행의 갯수를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.ExecuteNonQuery(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            SQL문장, 저장프로시져를 실행 합니다.
            </summary>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text) </param>
            <param name="commandText">명령 문자열</param>
            <param name="commandParameters">명령 문자열에 바인딩되는 매개변수</param>
            <returns>SQL 문자, 저장 프로시져를 실행하고 난 후에 발생한 행의 갯수를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,HSF.TechSvc2010.Common.DataItem)">
            <summary>
            SQL문장, 저장프로시져를 실행 합니다.
            </summary>
            <param name="DBHint"> 데이터베이스 연결 힌트 문자열을 지정합니다. ex) UserDB1 , UserDB2, ... </param>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text)을 지정합니다.</param>
            <param name="commandText">명령 문자열을 지정합니다.</param>
            <param name="item">명령 문자열에 바인딩되는 매개변수 ( 명령 문자열에 있는 매개변수 이름과 동일한 이름의 값이 자동 적용 )를 지정합니다.</param>
            <returns>SQL 문자, 저장 프로시져를 실행하고 난 후에 발생한 행의 갯수를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.ExecuteNonQuery(System.Data.CommandType,System.String,HSF.TechSvc2010.Common.DataItem)">
            <summary>
            SQL문장, 저장프로시져를 실행 합니다.
            </summary>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text)을 지정합니다.</param>
            <param name="commandText">명령 문자열을 지정합니다.</param>
            <param name="item">명령 문자열에 바인딩되는 매개변수 ( 명령 문자열에 있는 매개변수 이름과 동일한 이름의 값이 자동 적용 )를 지정합니다.</param>
            <returns>SQL 문자, 저장 프로시져를 실행하고 난 후에 발생한 행의 갯수를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.ExecuteNonQuery(System.String,HSF.TechSvc2010.Common.DataItem)">
            <summary>
            SQL문장 실행
            - 내부적으로  ExecuteNonQuery(CommandType.Text,commandText,item)를 수행
            </summary>
            <param name="commandText">명령 문자열을 지정합니다.</param>
            <param name="item">명령 문자열에 바인딩되는 매개변수 ( 명령 문자열에 있는 매개변수 이름과 동일한 이름의 값이 자동 적용 )를 지정합니다.</param>
            <returns>SQL 문자, 저장 프로시져를 실행하고 난 후에 발생한 행의 갯수를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            SQL 문장, 저장프로시져를 수행하고 결과값으로 DbDataReader를 전달 합니다.
            </summary>
            <param name="DBHint"> 데이터베이스 연결 힌트 문자열을 지정합니다. ex) UserDB1 , UserDB2, ... </param>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text) 을 지정합니다.</param>
            <param name="commandText">명령 문자열을 지정합니다.</param>
            <param name="commandParameters">명령 문자열에 바인딩되는 매개변수를 지정합니다.</param>
            <returns>SQL 문장, 저장프로시져를 수행하고 난 결과를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.ExecuteReader(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            SQL 문장, 저장프로시져를 수행하고 결과값으로 DbDataReader를 전달 합니다.
            </summary>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text) 을 지정합니다.</param>
            <param name="commandText">명령 문자열을 지정합니다.</param>
            <param name="commandParameters">명령 문자열에 바인딩되는 매개변수를 지정합니다.</param>
            <returns>SQL 문장, 저장프로시져를 수행하고 난 결과를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.ExecuteReader(System.String,System.Data.CommandType,System.String,HSF.TechSvc2010.Common.DataItem)">
            <summary>
            SQL 문장, 저장프로시져를 수행하고 결과값으로 DbDataReader를 전달 합니다.
            </summary>
            <param name="DBHint"> 데이터베이스 연결 힌트 문자열을 지정합니다. ex) UserDB1 , UserDB2, ... </param>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text) 을 지정합니다.</param>
            <param name="commandText">명령 문자열을 지정합니다.</param>
            <param name="item">명령 문자열에 바인딩되는 매개변수 ( 명령 문자열에 있는 매개변수 이름과 동일한 이름의 값이 자동 적용 )를 지정합니다.</param>
            <returns>SQL 문장, 저장프로시져를 수행하고 난 결과를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.ExecuteReader(System.Data.CommandType,System.String,HSF.TechSvc2010.Common.DataItem)">
            <summary>
            SQL 문장, 저장프로시져를 수행하고 결과값으로 DbDataReader를 전달 합니다.
            </summary>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text) 을 지정합니다.</param>
            <param name="commandText">명령 문자열을 지정합니다.</param>
            <param name="item">명령 문자열에 바인딩되는 매개변수 ( 명령 문자열에 있는 매개변수 이름과 동일한 이름의 값이 자동 적용 )를 지정합니다.</param>
            <returns>SQL 문장, 저장프로시져를 수행하고 난 결과를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.ExecuteReader(System.String,HSF.TechSvc2010.Common.DataItem)">
            <summary>
            SQL 문장, 저장프로시져를 수행하고 결과값으로 DbDataReader를 전달 합니다.
            </summary>
            <param name="commandText">명령 문자열을 지정합니다.</param>
            <param name="item">명령 문자열에 바인딩되는 매개변수 ( 명령 문자열에 있는 매개변수 이름과 동일한 이름의 값이 자동 적용 )를 지정합니다.</param>
            <returns>SQL 문장, 저장프로시져를 수행하고 난 결과를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            SQL 문장, 저장프로시져를 수행하고 결과값으로 object를 전달 합니다.
            </summary>
            <param name="DBHint"> 데이터베이스 연결 힌트 문자열을 지정힙니다. ex) UserDB1 , UserDB2, ... </param>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text)을 지정합니다.</param>
            <param name="commandText">명령 문자열을 지정합니다. (SQL 문장 혹은 Stored Procedure)</param>
            <param name="commandParameters">명령 문자열에 바인딩되는 매개변수를 지정합니다. </param>
            <returns>SQL 문장 혹은 저장 프로시져를 수행한고 난 결과를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.ExecuteScalar(System.String,System.Data.CommandType,System.String,HSF.TechSvc2010.Common.DataItem)">
            <summary>
            SQL 문장, 저장프로시져를 수행하고 결과값으로 object를 전달 합니다.
            </summary>
            <param name="DBHint"> 데이터베이스 연결 힌트 문자열을 지정힙니다. ex) UserDB1 , UserDB2, ... </param>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text)을 지정합니다.</param>
            <param name="commandText">명령 문자열을 지정합니다. (SQL 문장 혹은 Stored Procedure)</param>
            <param name="item">명령 문자열에 바인딩되는 매개변수 ( 명령 문자열에 있는 매개변수 이름과 동일한 이름의 값이 자동 적용 )를 지정합니다.</param>
            <returns>SQL 문장 혹은 저장 프로시져를 수행한고 난 결과를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.ExecuteScalar(System.Data.CommandType,System.String,HSF.TechSvc2010.Common.DataItem)">
            <summary>
            SQL 문장, 저장프로시져를 수행하고 결과값으로 object를 전달
            </summary>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text)을 지정합니다.</param>
            <param name="commandText">명령 문자열을 지정합니다. (SQL 문장 혹은 Stored Procedure)</param>
            <param name="item">명령 문자열에 바인딩되는 매개변수 ( 명령 문자열에 있는 매개변수 이름과 동일한 이름의 값이 자동 적용 )를 지정합니다.</param>
            <returns>SQL 문장 혹은 저장 프로시져를 수행한고 난 결과를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.ExecuteScalar(System.String,HSF.TechSvc2010.Common.DataItem)">
            <summary>
            SQL 문장을 수행하고 결과값으로 object를 전달
            - 내부적으로 ExecuteScalar(CommandType.Text,commandText,item) 수행
            </summary>
            <param name="commandText">명령 문자열을 지정합니다. (SQL 문장 혹은 Stored Procedure)</param>
            <param name="item">명령 문자열에 바인딩되는 매개변수 ( 명령 문자열에 있는 매개변수 이름과 동일한 이름의 값이 자동 적용 )를 지정합니다.</param>
            <returns>SQL 문장 혹은 저장 프로시져를 수행한고 난 결과를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.ExecuteDataSet(System.String,System.Data.CommandType,System.String,System.Int32,System.Int32,System.String,System.Data.Common.DbParameter[])">
            <summary>
            SQL 문장, 저장프로시져를 수행하고 결과값으로 DataSet 전달 합니다.
            </summary>
            <param name="DBHint"> 데이터베이스 연결 힌트 문자열을 지정합니다. ex) UserDB1 , UserDB2, ... </param>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text)을 지정합니다.</param>
            <param name="commandText">명령 문자열을 지정합니다.</param>
            <param name="startRecord">시작 레코드 위치를 지정합니다.</param>
            <param name="maxRecords">최대 조회 DataRow 개수를 지정합니다.</param>
            <param name="strTableName">결과값으로 전달할 데이터 테이블 이름을 지정합니다.</param>
            <param name="commandParameters">명령 문자열에 바인딩되는 매개변수를 지정합니다.</param>
            <returns>SQL 문장, 저장 프로시져를 수행하고난 결과를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.ExecuteDataSet(System.Data.CommandType,System.String,System.Int32,System.Int32,System.String,System.Data.Common.DbParameter[])">
            <summary>
            SQL 문장, 저장프로시져를 수행하고 결과값으로 DataSet 전달 합니다.
            </summary>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text)을 지정합니다.</param>
            <param name="commandText">명령 문자열을 지정합니다.</param>
            <param name="startRecord">시작 레코드 위치를 지정합니다.</param>
            <param name="maxRecords">최대 조회 DataRow 개수를 지정합니다.</param>
            <param name="strTableName">결과값으로 전달할 데이터 테이블 이름을 지정합니다.</param>
            <param name="commandParameters">명령 문자열에 바인딩되는 매개변수를 지정합니다.</param>
            <returns>SQL 문장, 저장 프로시져를 수행하고난 결과를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.ExecuteDataSet(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            SQL 문장, 저장프로시져를 수행하고 결과값으로 DataSet 전달 합니다.
            	- 내부적으로 ExecuteDataSet(commandType,commandText,0,MaxRecord,"Table",commandParameters) 수행합니다.
            </summary>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text)을 지정합니다.</param>
            <param name="commandText">명령 문자열을 지정합니다.</param>
            <param name="commandParameters">명령 문자열에 바인딩되는 매개변수를 지정합니다.</param>
            <returns>SQL 문장, 저장 프로시져를 수행하고난 결과를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.ExecuteDataSet(System.String,System.Data.CommandType,System.String,System.Int32,System.Int32,System.String,HSF.TechSvc2010.Common.DataItem)">
            <summary>
            SQL 문장, 저장프로시져를 수행하고 결과값으로 DataSet 전달 합니다.
            </summary>
            <param name="DBHint"> 데이터베이스 연결 힌트 문자열을 지정합니다. ex) UserDB1 , UserDB2, ... </param>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text)을 지정합니다.</param>
            <param name="commandText">명령 문자열을 지정합니다.</param>
            <param name="startRecord">시작 레코드 위치를 지정합니다.</param>
            <param name="maxRecords">최대 조회 DataRow 개수를 지정합니다.</param>
            <param name="strTableName">결과값으로 전달할 데이터 테이블 이름을 지정합니다.</param>
            <param name="item">명령 문자열에 바인딩되는 매개변수 ( 명령 문자열에 있는 매개변수 이름과 동일한 이름의 값이 자동 적용 )를 지정합니다.</param>
            <returns>SQL 문장, 저장 프로시져를 수행하고난 결과를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.ExecuteDataSet(System.Data.CommandType,System.String,System.Int32,System.Int32,System.String,HSF.TechSvc2010.Common.DataItem)">
            <summary>
            SQL 문장, 저장프로시져를 수행하고 결과값으로 DataSet 전달 합니다.
            </summary>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text)을 지정합니다.</param>
            <param name="commandText">명령 문자열을 지정합니다.</param>
            <param name="startRecord">시작 레코드 위치를 지정합니다.</param>
            <param name="maxRecords">최대 조회 DataRow 개수를 지정합니다.</param>
            <param name="strTableName">결과값으로 전달할 데이터 테이블 이름을 지정합니다.</param>
            <param name="item">명령 문자열에 바인딩되는 매개변수 ( 명령 문자열에 있는 매개변수 이름과 동일한 이름의 값이 자동 적용 )를 지정합니다.</param>
            <returns>SQL 문장, 저장 프로시져를 수행하고난 결과를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.ExecuteDataSet(System.Data.CommandType,System.String,HSF.TechSvc2010.Common.DataItem)">
            <summary>
            SQL 문장, 저장프로시져를 수행하고 결과값으로 DataSet 전달 합니다.
            	- 내부적으로 ExecuteDataSet(commandType,commandText,0,MaxRecord,"Table",item) 수행
            </summary>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text)을 지정합니다.</param>
            <param name="commandText">명령 문자열을 지정합니다.</param>
            <param name="item">명령 문자열에 바인딩되는 매개변수 ( 명령 문자열에 있는 매개변수 이름과 동일한 이름의 값이 자동 적용 )를 지정합니다.</param>
            <returns>SQL 문장, 저장 프로시져를 수행하고난 결과를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.ExecuteDataSet(System.String,HSF.TechSvc2010.Common.DataItem)">
            <summary>
            SQL 문장을 수행하고 결과값으로 DataSet 전달 합니다.
            	- 내부적으로 ExecuteDataSet(CommandType.Text,commandText,item) 수행
            </summary>
            <param name="commandText">명령 문자열을 지정합니다.</param>
            <param name="item">명령 문자열에 바인딩되는 매개변수 ( 명령 문자열에 있는 매개변수 이름과 동일한 이름의 값이 자동 적용 )를 지정합니다.</param>
            <returns>SQL 문장, 저장 프로시져를 수행하고난 결과를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.ExecuteDataSet(System.Data.CommandType,HSF.TechSvc2010.Common.DataItem,System.String,HSF.TechSvc2010.Server.DAC.QueryType)">
            <summary>
            SQL 문장, 저장프로시져를 수행하고 결과값으로 DataSet 전달 합니다.
            	- 내부적으로 ExecuteDataSet(commandType,commandText,0,MaxRecord,"Table",item) 수행
            ExecuteDataSet에서 외부쿼리 저장소 아이디를 사용하기 위한 추가 Code 생성 - 2012.01.25 ezCareTech jegal-hc
            </summary>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text)을 지정합니다.</param>
            <param name="commandText">명령 문자열을 지정합니다.</param>
            <param name="item">명령 문자열에 바인딩되는 매개변수 ( 명령 문자열에 있는 매개변수 이름과 동일한 이름의 값이 자동 적용 )를 지정합니다.</param>
            <param name="querytype">명령 문자열이 Text인지 외부쿼리 저정소 아이디 인지 여부를 지정합니다.</param>
            <returns>SQL 문장, 저장 프로시져를 수행하고난 결과를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.ExecuteDataSet(HSF.TechSvc2010.Common.DataItem,System.String,HSF.TechSvc2010.Server.DAC.QueryType)">
            <summary>
            SQL 문장을 수행하고 결과값으로 DataSet 전달 합니다.
            	- 내부적으로 ExecuteDataSet(CommandType.Text,commandText,item) 수행
            ExecuteDataSet에서 외부쿼리 저장소 아이디를 사용하기 위한 추가 Code 생성 - 2012.01.25 ezCareTech jegal-hc
            </summary>
            <param name="commandText">명령 문자열을 지정합니다.</param>
            <param name="item">명령 문자열에 바인딩되는 매개변수 ( 명령 문자열에 있는 매개변수 이름과 동일한 이름의 값이 자동 적용 )를 지정합니다.</param>
            <param name="querytype">명령 문자열이 Text인지 외부쿼리 저정소 아이디 인지 여부를 지정합니다.</param>
            <returns>SQL 문장, 저장 프로시져를 수행하고난 결과를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.ExecuteDataSet(System.Data.CommandType,System.Object,System.String,HSF.TechSvc2010.Server.DAC.QueryType)">
            <summary>
            SQL 문장, 저장프로시져를 수행하고 결과값으로 DataSet 전달 합니다.
            	- 내부적으로 ExecuteDataSet(commandType,commandText,0,MaxRecord,"Table",item) 수행
            ExecuteDataSet에서 외부쿼리 저장소 아이디를 사용하기 위한 추가 Code 생성 - 2012.01.25 ezCareTech jegal-hc
            </summary>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text)을 지정합니다.</param>
            <param name="commandText">명령 문자열을 지정합니다.</param>
            <param name="param">DTO parameter 정보</param>
            <param name="querytype">명령 문자열이 Text인지 외부쿼리 저정소 아이디 인지 여부를 지정합니다.</param>
            <returns>SQL 문장, 저장 프로시져를 수행하고난 결과를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.ExecuteDataSet(System.Object,System.String,HSF.TechSvc2010.Server.DAC.QueryType)">
            <summary>
            SQL 문장을 수행하고 결과값으로 DataSet 전달 합니다.
            	- 내부적으로 ExecuteDataSet(CommandType.Text,commandText,item) 수행
            ExecuteDataSet에서 외부쿼리 저장소 아이디를 사용하기 위한 추가 Code 생성 - 2012.01.25 ezCareTech jegal-hc
            </summary>
            <param name="commandText">명령 문자열을 지정합니다.</param>
            <param name="param">DTO parameter 정보</param>
            <param name="querytype">명령 문자열이 Text인지 외부쿼리 저정소 아이디 인지 여부를 지정합니다.</param>
            <returns>SQL 문장, 저장 프로시져를 수행하고난 결과를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.Fill(System.String,System.Object,System.Type,System.Data.CommandType,HSF.TechSvc2010.Server.DAC.QueryType)">
            <summary>
            SQL 문장을 수행하고 결과값으로 DTO 객체로 전달 합니다.
            	- 내부적으로 ExecuteDataSet(CommandType.Text,commandText,item) 수행
            </summary>
            <param name="queryStoreID">수행될 외부쿼리 저장소 뭐리 ID</param>
            <param name="param"> parameter 정보</param>
            <param name="type"> DTO 객체 class Type</param>
            <returns>SQL 문장, 저장 프로시져를 수행하고난 결과를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.Fill(System.String,System.Type,System.Data.CommandType,HSF.TechSvc2010.Server.DAC.QueryType)">
            <summary>
            SQL 문장을 수행하고 결과값으로 DTO 객체로 전달 합니다.
            	- 내부적으로 ExecuteDataSet(CommandType.Text,commandText,item) 수행
            </summary>
            <param name="queryStoreID">수행될 외부쿼리 저장소 뭐리 ID</param>
            <param name="type"> DTO 객체 class Type</param>
            <returns>SQL 문장, 저장 프로시져를 수행하고난 결과를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.Fill(System.String,System.Object,System.Type,System.String[],System.Data.CommandType,HSF.TechSvc2010.Server.DAC.QueryType)">
            <summary>
            SQL 문장을 수행하고 결과값으로 DTO 객체로 전달 합니다.
            	-  ExecuteDataSet(CommandType.StoredProcedure, Query, item); 수행
            </summary>
            <param name="queryStoreID">수행될 외부쿼리 저장소 뭐리 ID</param>
            <param name="param"> parameter 정보</param>
            <param name="resultType"> DTO 객체 class Type</param>
            <param name="tableName"> DTO 객체 class 명</param>
            <param name="commandtype"> query실행인지 Procedure인지의 여부</param>
            <param name="querytype">commandText 가 외부저장소의 ID 인지 SQL구문인지 여부</param>
            <returns>SQL 문장, 저장 프로시져를 수행하고난 결과를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.Fill(System.String,System.Type,System.String[],System.Data.CommandType,HSF.TechSvc2010.Server.DAC.QueryType)">
            <summary>
            SQL 문장을 수행하고 결과값으로 DTO 객체로 전달 합니다.
            	-  ExecuteDataSet(CommandType.StoredProcedure, Query, item); 수행
            </summary>
            <param name="queryStoreID">수행될 외부쿼리 저장소 뭐리 ID</param>
            <param name="resultType"> DTO 객체 class Type</param>
            <param name="tableName"> DTO 객체 class 명</param>
            <param name="commandtype"> query실행인지 Procedure인지의 여부</param>
            <param name="querytype">commandText 가 외부저장소의 ID 인지 SQL구문인지 여부</param>
            <returns>SQL 문장, 저장 프로시져를 수행하고난 결과를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.FillTree(System.String,System.Type,System.String,System.String,System.String,System.Object,System.Data.CommandType,HSF.TechSvc2010.Server.DAC.QueryType)">
            <summary>
            SQL 문장을 수행하고 결과값으로 DTO 객체로 전달 합니다.
            	- 내부적으로 ExecuteDataSet(CommandType.Text,commandText,item) 수행
            </summary>
            <param name="queryStoreID">수행될 외부쿼리 저장소 뭐리 ID</param>
            <param name="type"> DTO 객체 class Type</param>
            <returns>SQL 문장, 저장 프로시져를 수행하고난 결과를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.FillTree(System.String,System.Object,System.Type,System.String,System.String,System.String,System.Object,System.Data.CommandType,HSF.TechSvc2010.Server.DAC.QueryType)">
            <summary>
            SQL 문장을 수행하고 결과값으로 DTO 객체로 전달 합니다.
            	- 내부적으로 ExecuteDataSet(CommandType.Text,commandText,item) 수행
            </summary>
            <param name="queryStoreID">수행될 외부쿼리 저장소 뭐리 ID</param>
            <param name="type"> DTO 객체 class Type</param>
            <returns>SQL 문장, 저장 프로시져를 수행하고난 결과를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.ExecuteScalar(System.String,System.Object,System.Data.CommandType,HSF.TechSvc2010.Server.DAC.QueryType)">
            <summary>
            SQL 문장을 수행하고 결과값으로 object 객체로 전달 합니다.
            	-  ExecuteScalar(); 수행
            </summary>
            <param name="commandText">수행될 외부쿼리ID OR 쿼리</param>
            <param name="param">Input Parameter</param>
            <param name="commandtype"> query실행인지 Procedure인지의 여부</param>
            <param name="querytype">commandText 가 외부저장소의 ID 인지 SQL구문인지 여부</param>
            <returns>SQL 문장, 저장 프로시져를 수행하고난 결과를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.ExecuteScalar(System.String,System.Data.CommandType,HSF.TechSvc2010.Server.DAC.QueryType)">
            <summary>
            SQL 문장을 수행하고 결과값으로 object 객체로 전달 합니다.
            	-  ExecuteScalar(); 수행
            </summary>
            <param name="commandText">수행될 외부쿼리ID OR 쿼리</param>
            <param name="commandtype"> query실행인지 Procedure인지의 여부</param>
            <param name="querytype">commandText 가 외부저장소의 ID 인지 SQL구문인지 여부</param>
            <returns>SQL 문장, 저장 프로시져를 수행하고난 결과를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.ExecuteNonQuery(System.String,System.Object,System.Data.CommandType,HSF.TechSvc2010.Server.DAC.QueryType)">
            <summary>
            SQL 문장을 수행하고 결과값으로 object 객체로 전달 합니다.
            	-  ExecuteNonQuery(); 수행
            </summary>
            <param name="commandText">수행될 외부쿼리ID OR 쿼리</param>
            <param name="param">Input Parameter</param>
            <param name="commandtype"> query실행인지 Procedure인지의 여부</param>
            <param name="querytype">commandText 가 외부저장소의 ID 인지 SQL구문인지 여부</param>
            <returns>SQL 문장, 저장 프로시져를 수행하고난 결과를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.ExecuteNonQuery(System.String,HSF.TechSvc2010.Common.DataItem,System.Data.CommandType,HSF.TechSvc2010.Server.DAC.QueryType)">
            <summary>
            SQL 문장을 수행하고 결과값으로 object 객체로 전달 합니다.
            	-  ExecuteNonQuery(); 수행
            </summary>
            <param name="commandText">수행될 외부쿼리ID OR 쿼리</param>
            <param name="param">Input Parameter</param>
            <param name="commandtype"> query실행인지 Procedure인지의 여부</param>
            <param name="querytype">commandText 가 외부저장소의 ID 인지 SQL구문인지 여부</param>
            <returns>SQL 문장, 저장 프로시져를 수행하고난 결과를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.ExecuteNonQuery(System.String,System.Data.CommandType,HSF.TechSvc2010.Server.DAC.QueryType)">
            <summary>
            SQL 문장을 수행하고 결과값으로 object 객체로 전달 합니다.
            	-  ExecuteNonQuery(); 수행
            </summary>
            <param name="commandText">수행될 외부쿼리ID OR 쿼리</param>
            <param name="commandtype"> query실행인지 Procedure인지의 여부</param>
            <param name="querytype">commandText 가 외부저장소의 ID 인지 SQL구문인지 여부</param>
            <returns>SQL 문장, 저장 프로시져를 수행하고난 결과를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.ExecuteBatch(System.Object,System.String,System.Data.CommandType,HSF.TechSvc2010.Server.DAC.QueryType)">
            <summary>
            SQL 문장을 수행하고 결과값으로 object 객체로 전달 합니다.
            	-  ExecuteNonQuery(); 수행
            	- 2012-03-30 이종은대리 요청 추가
            </summary>
            <param name="commandText">수행될 외부쿼리ID OR 쿼리</param>
            <param name="param">Input Parameter</param>
            <param name="commandtype"> query실행인지 Procedure인지의 여부</param>
            <param name="querytype">commandText 가 외부저장소의 ID 인지 SQL구문인지 여부</param>
            <returns>SQL 문장, 저장 프로시져를 수행하고난 결과를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.ExecuteBatch(System.Object,System.String,System.String,System.String,System.Data.CommandType,HSF.TechSvc2010.Server.DAC.QueryType)">
            <summary>
            SQL 문장을 수행하고 결과값으로 object 객체로 전달 합니다.
            	-  ExecuteNonQuery(); 수행
            </summary>
            <param name="commandText">수행될 외부쿼리ID OR 쿼리</param>
            <param name="param">Input Parameter</param>
            <param name="commandtype"> query실행인지 Procedure인지의 여부</param>
            <param name="querytype">commandText 가 외부저장소의 ID 인지 SQL구문인지 여부</param>
            <returns>SQL 문장, 저장 프로시져를 수행하고난 결과를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.ExecuteBatch(System.String,System.Object,System.String,System.Data.CommandType,HSF.TechSvc2010.Server.DAC.QueryType)">
            <summary>
            프로시저를 실행하고 결과값으로 int 객체로 전달 합니다. -  ExecuteNonQuery();
            </summary>
            <param name="prefix">파라메타 Prifix</param>
            <param name="param">HSFDTOBaseCollectionObject</param>
            <param name="commandType">명령 문자열을 해석하는 방법을 지정합니다.</param>
            <param name="commandText">수행될 외부쿼리ID OR 쿼리</param>
            <param name="querytype">commandText 가 외부저장소의 ID 인지 SQL구문인지 여부</param>
            <remarks>2012.07.03 이종은</remarks>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.ReplaceCommentQuery(System.String)">
            <summary>
            수횅되는 모든 쿼리문에서 주석을 제거 합니다
            </summary>
            <param name="query">갱신할 query</param>
            <returns>주석이 삭제된 쿼리문을 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.UpdateDataSet(System.Data.DataSet,System.String,System.String,System.String,System.String)">
            <summary>
            DataSet을 입력된 insert,update,delete command를 바탕으로 갱신합니다.
            - 명령 종류는 CommandType.Text로 처리됩니다.
            </summary>
            <param name="ds">갱신할 데이터를 지정합니다.</param>
            <param name="InsertCommandText">추가 명령을 지정합니다.</param>
            <param name="UpdateCommandText">갱신 명령을 지정합니다.</param>
            <param name="DeleteCommandText">삭제 명령을 지정합니다.</param>
            <param name="srcTable">갱신할 데이터셋의 테이블 이름을 지정합니다.</param>
            <returns>추가, 갱신, 삭제된 행의 수를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.UpdateDataSet(System.Data.DataSet,System.Data.CommandType,System.String,System.Data.CommandType,System.String,System.Data.CommandType,System.String,System.String)">
            <summary>
            DataSet을 입력된 insert,update,delete command를 바탕으로 갱신합니다.
            </summary>
            <param name="ds">갱신할 데이터를 지정합니다.</param>
            <param name="InsertCMDType">추가명령 형식을 지정합니다.</param>
            <param name="InsertCommandText">추가 명령을 지정합니다.</param>
            <param name="UpdateCMDType">갱신명령 형식을 지정합니다.</param>
            <param name="UpdateCommandText">갱신 명령을 지정합니다.</param>
            <param name="DeleteCMDType">삭제명령 형식을 지정합니다.</param>
            <param name="DeleteCommandText">삭제 명령을 지정합니다.</param>
            <param name="srcTable">갱신할 데이터셋의 테이블 이름을 지정합니다.</param>
            <returns>추가, 갱신, 삭제된 행의 수를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.UpdateDataSet(System.String,System.Data.DataSet,System.Data.CommandType,System.String,System.Data.CommandType,System.String,System.Data.CommandType,System.String,System.String)">
            <summary>
            DataSet을 입력된 insert,update,delete command를 바탕으로 갱신합니다.
            </summary>
            <param name="DBHint"> 데이터베이스 연결 힌트 문자열을 지정합니다. ex) UserDB1 , UserDB2, ... </param>
            <param name="ds">갱신할 데이터를 지정합니다.</param>
            <param name="InsertCMDType">추가명령 형식을 지정합니다.</param>
            <param name="InsertCommandText">추가 명령을 지정합니다.</param>
            <param name="UpdateCMDType">갱신명령 형식을 지정합니다.</param>
            <param name="UpdateCommandText">갱신 명령을 지정합니다.</param>
            <param name="DeleteCMDType">삭제명령 형식을 지정합니다.</param>
            <param name="DeleteCommandText">삭제 명령을 지정합니다.</param>
            <param name="srcTable">갱신할 데이터셋의 테이블 이름을 지정합니다.</param>
            <returns>추가, 갱신, 삭제된 행의 수를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.IDacBase.UpdateDataSetBatch(System.Data.DataSet,System.Data.CommandType,System.String,System.Data.CommandType,System.String,System.Data.CommandType,System.String,System.String)">
            <summary>
            DataSet을 입력된 insert,update,delete command를 바탕으로 갱신합니다.
            </summary>
            <param name="DBHint"> 데이터베이스 연결 힌트 문자열 ex) UserDB1 , UserDB2, ... </param>
            <param name="ds">갱신할 데이터</param>
            <param name="InsertCMDType">추가명령 형식</param>
            <param name="InsertCommandText">추가 명령</param>
            <param name="UpdateCMDType">갱신명령 형식</param>
            <param name="UpdateCommandText">갱신 명령</param>
            <param name="DeleteCMDType">삭제명령 형식</param>
            <param name="DeleteCommandText">삭제 명령</param>
            <param name="srcTable"></param>
            <returns></returns>
        </member>
        <member name="P:HSF.TechSvc2010.Server.DAC.IDacBase.DefaultConnectionStringConfigurationHintName">
            <summary>
            Default Connectionstring key in Configuration Manager item  = "SQLConnectionString"
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.DAC.IDacBase.IsSupportedUnicode">
            <summary>
            Stored Procedure가 아닌 일반 SQL 문장의 파라메터 정보를 유니코드 정보로 만들 것인지에 대한 여부에 대해 가져오거나 설정합니다.
            기본값은 유니코드로 만들어서 SQL 문장 수행합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.DAC.IDacBase.isActivated">
            <summary>
            Activate 여부를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.DAC.IDacBase.isDeActivated">
            <summary>
            DeActivated 여부를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.DAC.IDacBase.LocalDataItem">
            <summary>
            SQL실행을 위해 전달받은 데이터 개체를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.DAC.IDacBase.IncludeReturnValueParameters">
            <summary>
            수행 후 리턴되는 매개변수를 수신하는지를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.DAC.IDacBase.ConnectionString">
            <summary>
            데이터베이스 Connection String을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.DAC.IDacBase.CommandTimeOut">
            <summary>
            데이터베이스 CommandTimeOut을 설정합니다.
            명령 실행을 종료하고 오류를 생성하기 전 대기 시간을 가져오거나 설정합니다.
            명령을 실행할 때까지 대기하는 시간(초)입니다. 기본 30초 입니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.DAC.IDacBase.DatabaseType">
            <summary>
            데이터 베이스 종류를 가져옵니다. (기본값은 DacType.ORACLE 입니다.)
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.DAC.IDacBase.MaxRecord">
            <summary>
            한번에 조회 가능한 DataRow를 가져옵니다. (기본값 : 100,000)
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.DAC.IDacBase.CloseDbConneciotnOnDeactivate">
            <summary>
            close connection on deactivate (defalut = true )
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.DAC.IDacBase.ParameterPrefix">
            <summary>
            데이터베이스 파라메터(바인드)변수 구분자 ( @, :, ? 등 )를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.ODBCDacBase.ExecuteNonQuery(System.Int32,System.String,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            SQL문장, 저장프로시져를 실행
            </summary>
            <param name="size"></param>
            <param name="DBHint">데이터베이스 연결 힌트 문자열 ex) UserDB1 , UserDB2, ... </param>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text) </param>
            <param name="commandText">명령 문자열</param>
            <param name="commandParameters">명령 문자열에 바인딩되는 매개변수</param>
            <remarks>2012.07.03 이종은</remarks>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.ODBCDacBase.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            SQL문장, 저장프로시져를 실행
            </summary>
            <param name="DBHint"> 데이터베이스 연결 힌트 문자열 ex) UserDB1 , UserDB2, ... </param>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text) </param>
            <param name="commandText">명령 문자열</param>
            <param name="commandParameters">명령 문자열에 바인딩되는 매개변수</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.ODBCDacBase.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            SQL 문장, 저장프로시져를 수행하고 결과값으로 DbDataReader를 전달
            </summary>
            <param name="DBHint"> 데이터베이스 연결 힌트 문자열 ex) UserDB1 , UserDB2, ... </param>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text)</param>
            <param name="commandText">명령 문자열</param>
            <param name="commandParameters">명령 문자열에 바인딩되는 매개변수 </param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.ODBCDacBase.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            SQL 문장, 저장프로시져를 수행하고 결과값으로 object를 전달
            </summary>
            <param name="DBHint"> 데이터베이스 연결 힌트 문자열 ex) UserDB1 , UserDB2, ... </param>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text)</param>
            <param name="commandText">명령 문자열</param>
            <param name="commandParameters">명령 문자열에 바인딩되는 매개변수 </param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.ODBCDacBase.ExecuteDataSet(System.String,System.Data.CommandType,System.String,System.Int32,System.Int32,System.String,System.Data.Common.DbParameter[])">
            <summary>
            SQL 문장, 저장프로시져를 수행하고 결과값으로 DataSet 전달
            </summary>
            <param name="DBHint"> 데이터베이스 연결 힌트 문자열 ex) UserDB1 , UserDB2, ... </param>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text)</param>
            <param name="commandText">명령 문자열</param>
            <param name="startRecord">시작 레코드 위치</param>
            <param name="maxRecords">최대 조회 DataRow 개수</param>
            <param name="strTableName">결과값으로 전달할 데이터 테이블 이름</param>
            <param name="commandParameters">명령 문자열에 바인딩되는 매개변수</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.ODBCDacBase.UpdateDataSet(System.String,System.Data.DataSet,System.Data.CommandType,System.String,System.Data.CommandType,System.String,System.Data.CommandType,System.String,System.String)">
            <summary>
            DataSet을 입력된 insert,update,delete command를 바탕으로 갱신합니다.
            </summary>
            <param name="DBHint"> 데이터베이스 연결 힌트 문자열 ex) UserDB1 , UserDB2, ... </param>
            <param name="ds">갱신할 데이터</param>
            <param name="InsertCMDType">추가명령 형식</param>
            <param name="InsertCommandText">추가 명령</param>
            <param name="UpdateCMDType">갱신명령 형식</param>
            <param name="UpdateCommandText">갱신 명령</param>
            <param name="DeleteCMDType">삭제명령 형식</param>
            <param name="DeleteCommandText">삭제 명령</param>
            <param name="srcTable"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.ODBCDacBase.UpdateDataSetBatch(System.String,System.Data.DataSet,System.Data.CommandType,System.String,System.Data.CommandType,System.String,System.Data.CommandType,System.String,System.String)">
            <summary>
            DataSet을 입력된 insert,update,delete command를 바탕으로 갱신합니다.
            </summary>
            <param name="DBHint"> 데이터베이스 연결 힌트 문자열 ex) UserDB1 , UserDB2, ... </param>
            <param name="ds">갱신할 데이터</param>
            <param name="InsertCMDType">추가명령 형식</param>
            <param name="InsertCommandText">추가 명령</param>
            <param name="UpdateCMDType">갱신명령 형식</param>
            <param name="UpdateCommandText">갱신 명령</param>
            <param name="DeleteCMDType">삭제명령 형식</param>
            <param name="DeleteCommandText">삭제 명령</param>
            <param name="srcTable"></param>
            <returns></returns>
        </member>
        <member name="E:HSF.TechSvc2010.Server.DAC.ODBCDacBase.CMDExcuting">
            <summary>
            SQL문장을 수행하기 전에 발생하하는 이벤트
            </summary>
        </member>
        <member name="E:HSF.TechSvc2010.Server.DAC.ODBCDacBase.CMDExecuted">
            <summary>
            SQL문장 수행 후에 발생하는 이벤트
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.DAC.ODBCDacBase.DatabaseType">
            <summary>
            데이터베이스 종류 - DacType.ODBC로 재정의
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.DAC.ODBCDacBase.DefaultConnectionStringConfigurationHintName">
            <summary>
            Connectionstring key in Configuration Manager item  = "ODBCConnectionString"
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.DAC.ORMParameterUtil">
            <summary>
            ORM 매개변수 개체의 문자열화, 역 문자열화를 지원합니다.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.DAC.ORMParameterUtil.STR_Equal">
            <summary>
            ORM Value값 처리에서 "="문자와 임시 대체될 문자열입니다.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.DAC.ORMParameterUtil.STR_Comma">
            <summary>
            ORM Value값 처리에서 ","문자와 임시 대체될 문자열 입니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.ORMParameterUtil.CheckType(System.String,System.Object)">
            <summary>
            val 개체가 typename으로 변환 가능한지 점검합니다.
            </summary>
            <param name="typename"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.ORMParameterUtil.ParseValue(System.Object)">
            <summary>
            val에 포함된 "=" ","  문자열을 특수문자로 대체합니다.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.ORMParameterUtil.GetValueFromParse(System.String)">
            <summary>
             val에 포함된 특수문자를 "=" ","  로 다시 복구합니다.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.ORMParameterUtil.ParseParams(System.Data.DataTable)">
            <summary>
            Name,Type,Value 컬럼으로 구성된 매개변수 값을 string으로 변환합니다.
            </summary>
            <param name="dtParameter"></param>
            <returns></returns>
        </member>
        <member name="T:HSF.TechSvc2010.Server.DAC.OracleDacBase">
            <summary>
            Oracle Access Object
            </summary>
            <remarks>
            e.g.:  
             환경파일의 Key값은 "OracleConnectionString"입니다. 데이터 베이스 연결 문자열을 구성하기 위해서는
             GetConfigConnectionString() 메소드를 구현하거나 ConnectionString 속성을 사용합니다.
            </remarks>
            
        </member>
        <member name="F:HSF.TechSvc2010.Server.DAC.OracleDacBase.CONST_CONNECTIONSTRING_ATTRIBUTE_NAME">
            <summary>
            연결문자열의 기본키 입니다. - "OracleConnectionString"
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.OracleDacBase.ExecuteNonQuery(System.Int32,System.String,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            SQL문장, 저장프로시져를 실행
            </summary>
            <param name="size"></param>
            <param name="DBHint">데이터베이스 연결 힌트 문자열 ex) UserDB1 , UserDB2, ... </param>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text) </param>
            <param name="commandText">명령 문자열</param>
            <param name="commandParameters">명령 문자열에 바인딩되는 매개변수</param>
            <remarks>2012.07.03 이종은</remarks>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.OracleDacBase.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            SQL문장, 저장프로시져를 실행
            </summary>
            <param name="DBHint"> 데이터베이스 연결 힌트 문자열 ex) UserDB1 , UserDB2, ... </param>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text) </param>
            <param name="commandText">명령 문자열</param>
            <param name="commandParameters">명령 문자열에 바인딩되는 매개변수</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.OracleDacBase.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            SQL 문장, 저장프로시져를 수행하고 결과값으로 DbDataReader를 전달
            </summary>
            <param name="DBHint"> 데이터베이스 연결 힌트 문자열 ex) UserDB1 , UserDB2, ... </param>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text)</param>
            <param name="commandText">명령 문자열</param>
            <param name="commandParameters">명령 문자열에 바인딩되는 매개변수 </param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.OracleDacBase.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            SQL 문장, 저장프로시져를 수행하고 결과값으로 object를 전달
            </summary>
            <param name="DBHint"> 데이터베이스 연결 힌트 문자열 ex) UserDB1 , UserDB2, ... </param>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text)</param>
            <param name="commandText">명령 문자열</param>
            <param name="commandParameters">명령 문자열에 바인딩되는 매개변수 </param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.OracleDacBase.ExecuteDataSet(System.String,System.Data.CommandType,System.String,System.Int32,System.Int32,System.String,System.Data.Common.DbParameter[])">
            <summary>
            SQL 문장, 저장프로시져를 수행하고 결과값으로 DataSet 전달
            </summary>
            <param name="DBHint"> 데이터베이스 연결 힌트 문자열 ex) UserDB1 , UserDB2, ... </param>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text)</param>
            <param name="commandText">명령 문자열</param>
            <param name="startRecord">시작 레코드 위치</param>
            <param name="maxRecords">최대 조회 DataRow 개수</param>
            <param name="strTableName">결과값으로 전달할 데이터 테이블 이름</param>
            <param name="commandParameters">명령 문자열에 바인딩되는 매개변수</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.OracleDacBase.UpdateDataSet(System.String,System.Data.DataSet,System.Data.CommandType,System.String,System.Data.CommandType,System.String,System.Data.CommandType,System.String,System.String)">
            <summary>
            DataSet을 입력된 insert,update,delete command를 바탕으로 갱신합니다.
            </summary>
            <param name="DBHint"> 데이터베이스 연결 힌트 문자열 ex) UserDB1 , UserDB2, ... </param>
            <param name="ds">갱신할 데이터</param>
            <param name="InsertCMDType">추가명령 형식</param>
            <param name="InsertCommandText">추가 명령</param>
            <param name="UpdateCMDType">갱신명령 형식</param>
            <param name="UpdateCommandText">갱신 명령</param>
            <param name="DeleteCMDType">삭제명령 형식</param>
            <param name="DeleteCommandText">삭제 명령</param>
            <param name="srcTable"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.OracleDacBase.UpdateDataSetBatch(System.String,System.Data.DataSet,System.Data.CommandType,System.String,System.Data.CommandType,System.String,System.Data.CommandType,System.String,System.String)">
            <summary>
            DataSet을 입력된 insert,update,delete command를 바탕으로 갱신합니다.
            </summary>
            <param name="DBHint"> 데이터베이스 연결 힌트 문자열 ex) UserDB1 , UserDB2, ... </param>
            <param name="ds">갱신할 데이터</param>
            <param name="InsertCMDType">추가명령 형식</param>
            <param name="InsertCommandText">추가 명령</param>
            <param name="UpdateCMDType">갱신명령 형식</param>
            <param name="UpdateCommandText">갱신 명령</param>
            <param name="DeleteCMDType">삭제명령 형식</param>
            <param name="DeleteCommandText">삭제 명령</param>
            <param name="srcTable"></param>
            <returns></returns>
        </member>
        <member name="E:HSF.TechSvc2010.Server.DAC.OracleDacBase.CMDExcuting">
            <summary>
            SQL문장을 수행하기 전에 발생하하는 이벤트
            </summary>
        </member>
        <member name="E:HSF.TechSvc2010.Server.DAC.OracleDacBase.CMDExecuted">
            <summary>
            SQL문장 수행 후에 발생하는 이벤트
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.DAC.OracleDacBase.InitialLONGFetchSize">
            <summary>
            LOB 개체의 Fetch Sige를 설정하거나 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.DAC.OracleDacBase.InitialLONBFetchSize">
            <summary>
            LONB의 FetchSize를 설정하거나 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.DAC.OracleDacBase.DatabaseType">
            <summary>
            데이터베이스 종류 - DacType.ORACLE로 재정의
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.DAC.OracleDacBase.DefaultConnectionStringConfigurationHintName">
            <summary>
            Connectionstring key in Configuration Manager item  = "OracleConnectionString"
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.DAC.SqlDacBase">
            <summary>
            MS SQL Access Object
            </summary>
            <remarks>
            e.g.:  
             환경파일의 Key값은 "SQLConnectionString"입니다. 데이터 베이스 연결 문자열을 구성하기 위해서는
             GetConfigConnectionString() 메소드를 구현하거나 ConnectionString 속성을 사용합니다.
            </remarks>
            
        </member>
        <member name="F:HSF.TechSvc2010.Server.DAC.SqlDacBase.CONST_CONNECTIONSTRING_ATTRIBUTE_NAME">
            <summary>
            연결문자열의 기본 키 입니다. -  "SQLConnectionString"
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.SqlDacBase.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            SQL문장, 저장프로시져를 실행
            </summary>
            <param name="DBHint"> 데이터베이스 연결 힌트 문자열 ex) UserDB1 , UserDB2, ... </param>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text) </param>
            <param name="commandText">명령 문자열</param>
            <param name="commandParameters">명령 문자열에 바인딩되는 매개변수</param>
            <returns></returns>
            
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.SqlDacBase.ExecuteNonQuery(System.Int32,System.String,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            SQL문장, 저장프로시져를 실행
            </summary>
            <param name="size"></param>
            <param name="DBHint">데이터베이스 연결 힌트 문자열 ex) UserDB1 , UserDB2, ... </param>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text) </param>
            <param name="commandText">명령 문자열</param>
            <param name="commandParameters">명령 문자열에 바인딩되는 매개변수</param>
            <remarks>2012.07.03 이종은</remarks>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.SqlDacBase.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            SQL 문장, 저장프로시져를 수행하고 결과값으로 DbDataReader를 전달
            </summary>
            <param name="DBHint"> 데이터베이스 연결 힌트 문자열 ex) UserDB1 , UserDB2, ... </param>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text)</param>
            <param name="commandText">명령 문자열</param>
            <param name="commandParameters">명령 문자열에 바인딩되는 매개변수 </param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.SqlDacBase.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            SQL 문장, 저장프로시져를 수행하고 결과값으로 object를 전달
            </summary>
            <param name="DBHint"> 데이터베이스 연결 힌트 문자열 ex) UserDB1 , UserDB2, ... </param>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text)</param>
            <param name="commandText">명령 문자열</param>
            <param name="commandParameters">명령 문자열에 바인딩되는 매개변수 </param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.SqlDacBase.ExecuteDataSet(System.String,System.Data.CommandType,System.String,System.Int32,System.Int32,System.String,System.Data.Common.DbParameter[])">
            <summary>
            SQL 문장, 저장프로시져를 수행하고 결과값으로 DataSet 전달
            </summary>
            <param name="DBHint"> 데이터베이스 연결 힌트 문자열 ex) UserDB1 , UserDB2, ... </param>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text)</param>
            <param name="commandText">명령 문자열</param>
            <param name="startRecord">시작 레코드 위치</param>
            <param name="maxRecords">최대 조회 DataRow 개수</param>
            <param name="strTableName">결과값으로 전달할 데이터 테이블 이름</param>
            <param name="commandParameters">명령 문자열에 바인딩되는 매개변수</param>
            <returns></returns>
            
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.SqlDacBase.UpdateDataSet(System.String,System.Data.DataSet,System.Data.CommandType,System.String,System.Data.CommandType,System.String,System.Data.CommandType,System.String,System.String)">
            <summary>
            DataSet을 입력된 insert,update,delete command를 바탕으로 갱신합니다.
            </summary>
            <param name="DBHint"> 데이터베이스 연결 힌트 문자열 ex) UserDB1 , UserDB2, ... </param>
            <param name="ds">갱신할 데이터</param>
            <param name="InsertCMDType">추가명령 형식</param>
            <param name="InsertCommandText">추가 명령</param>
            <param name="UpdateCMDType">갱신명령 형식</param>
            <param name="UpdateCommandText">갱신 명령</param>
            <param name="DeleteCMDType">삭제명령 형식</param>
            <param name="DeleteCommandText">삭제 명령</param>
            <param name="srcTable"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.SqlDacBase.UpdateDataSetBatch(System.String,System.Data.DataSet,System.Data.CommandType,System.String,System.Data.CommandType,System.String,System.Data.CommandType,System.String,System.String)">
            <summary>
            DataSet을 입력된 insert,update,delete command를 바탕으로 갱신합니다.
            </summary>
            <param name="DBHint"> 데이터베이스 연결 힌트 문자열 ex) UserDB1 , UserDB2, ... </param>
            <param name="ds">갱신할 데이터</param>
            <param name="InsertCMDType">추가명령 형식</param>
            <param name="InsertCommandText">추가 명령</param>
            <param name="UpdateCMDType">갱신명령 형식</param>
            <param name="UpdateCommandText">갱신 명령</param>
            <param name="DeleteCMDType">삭제명령 형식</param>
            <param name="DeleteCommandText">삭제 명령</param>
            <param name="srcTable"></param>
            <returns></returns>
        </member>
        <member name="E:HSF.TechSvc2010.Server.DAC.SqlDacBase.CMDExcuting">
            <summary>
            SQL문장을 수행하기 전에 발생하하는 이벤트
            </summary>
        </member>
        <member name="E:HSF.TechSvc2010.Server.DAC.SqlDacBase.CMDExecuted">
            <summary>
            SQL문장 수행 후에 발생하는 이벤트
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.DAC.SqlDacBase.DatabaseType">
            <summary>
            데이터베이스 종류 - DacType.MSSQL로 재정의
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.DAC.SqlDacBase.DefaultConnectionStringConfigurationHintName">
            <summary>
            Connectionstring key in Configuration Manager item  = "SQLConnectionString"
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.ORM.ORMValueObject">
            <summary>
            ORMManager 의 값을 표현하는 개체의 구현을 제공합니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.ORM.IORMValueObject">
            <summary>
            Interface for ORM Value Object
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueObject.GetColumnList">
            <summary>
            개체에 정의된 속성을 통해 DataColumn[]을 만들어 리턴합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueObject.GetDataValueList">
            <summary>
            개체에 할당된 값을 object[]로 리턴합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueObject.GetNameValueList">
            <summary>
            DataItem의 NameValue로 변환하여 리턴합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueObject.LoadData(System.Data.DataColumnCollection,System.Data.DataRow)">
            <summary>
            datacolumn, datarow에서 데이터를 속성에 채우는 기능을 수행합니다.
            </summary>
            <param name="col"></param>
            <param name="row"></param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueObject.#ctor(System.Data.DataColumnCollection,System.Data.DataRow)">
            <summary>
            생성자 - 데이터 테이블의 컬럼, rows를 통해 생성됩니다.
            내부적으로 LoadData(col,row)가 호출되어 동작합니다.
            </summary>
            <param name="col"></param>
            <param name="row"></param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueObject.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueObject.SetPropertyValue(System.String,System.Object)">
            <summary>
            propertyName 속성의 값을 val로 설정합니다.
            </summary>
            <param name="propertyName"></param>
            <param name="val"></param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueObject.GetPropertyValue(System.String)">
            <summary>
            propertyName 속성의 값을 조회합니다.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueObject.ToString">
            <summary>
            문자열 표현
            </summary>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueObject.GetColumnList(System.Type)">
            <summary>
            t Type의 속성(Property) 목록을 이용하여 Column[]을 작성합니다.
            </summary>
            <param name="t">type</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueObject.GetColumnList(System.Type,System.Boolean)">
            <summary>
            t Type의 속성(Property) 목록을 이용하여 Column[]을 작성합니다.
            </summary>
            <param name="t">type</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueObject.GetPropertyValueList(System.Object)">
            <summary>
            target 개체의 속성에 할당된 값을 object[] 형식으로 리턴합니다.
            </summary>
            <param name="target">개체</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueObject.GetPropertyValueListWithColumNames(System.Object,System.Data.DataColumnCollection)">
            <summary>
            target 개체의 속성에 할당된 값을 object[] 형식으로 리턴합니다.
            </summary>
            <param name="target">개체</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueObject.GetPropertyValueListWithColumNames(System.Object,System.Data.DataColumnCollection,System.Boolean)">
            <summary>
            target 개체의 속성에 할당된 값을 object[] 형식으로 리턴합니다.
            </summary>
            <param name="target">개체</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueObject.GetPropertyValueList(System.Object,System.Boolean)">
            <summary>
            target 개체의 속성에 할당된 값을 object[] 형식으로 리턴합니다.
            </summary>
            <param name="target">개체</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueObject.GetPropertyNameList(System.Type)">
            <summary>
            t Type의 속성의 이름을 string[]으로 반환합니다.
            - 속성 조회시 바인딩 플래그는 "BindingFlags.Public | BindingFlags.Instance"가 사용됩니다.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueObject.GetPropertyNameList(System.Type,System.Reflection.BindingFlags)">
            <summary>
            t Type의 속성의 이름을 string[]으로 반환합니다.
            </summary>
            <param name="t">type</param>
            <param name="flag">바인딩 플래그</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueObject.GetPropertyNameList(System.Type,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            t Type의 속성의 이름을 string[]으로 반환합니다.
            </summary>
            <param name="t">type</param>
            <param name="flag">바인딩 플래그</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueObject.GetNameValueListFromProperty(System.Object)">
            <summary>
            target 개체의 속성을 "Names, values"... 형태로 dataitem 클래스에 담아 반환합니다.  // 이름,값
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueObject.LoadData(System.Object,System.Data.DataColumnCollection,System.Data.DataRow)">
            <summary>
            target 개체의 속성을 col 컬럼이름의 속성과 row 데이터로 채워 반환합니다.
            </summary>
            <param name="target">목표 개체</param>
            <param name="col">데이터 column</param>
            <param name="row">데이터 row</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueObject.SetPropertyAssignment(System.Reflection.PropertyInfo,System.Object,System.Object)">
            <summary>
            속성에 값을 할당합니다. ( Generic Nullable을 지원합니다. )
            </summary>
            <param name="pi">속성</param>
            <param name="propertyValue">값</param>
            <param name="instance">목표개체</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueObject.SetPropertyObject(System.Reflection.PropertyInfo,System.Object,System.Object)">
            <summary>
            속성에 값을 할당합니다. object를 직접 할당합니다.
            </summary>
            <param name="pi">속성</param>
            <param name="propertyValue">값</param>
            <param name="instance">목표개체</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueObject.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            target 개체의 propertyName 속성을 찾아 값을 val로 설정합니다.
            </summary>
            <param name="target"></param>
            <param name="propertyName"></param>
            <param name="val"></param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueObject.FindPropertyByOnlyName(System.Object,System.String)">
            <summary>
            속성 이름으로만 target개체에서 columnname 속성을 찾아 반환합니다.
            </summary>
            <param name="target"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueObject.FindPropertyByColumnNameAttribute(System.Object,System.String)">
            <summary>
            target 클래스에서 ColumnNameAttributes 속성에 columnName이 설정된 속성을 찾아 반환합니다.
            </summary>
            <param name="target">orm vlaue object</param>
            <param name="columnName">orm column name</param>
            <returns>property info </returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueObject.GetAllPropertyRelationInfomations(System.Object)">
            <summary>
            속성에 정의된 모든 속성중 RelationtAtributes, RelationtListAtributes가 정의된 속성 목록을 찾아 반환합니다.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueObject.PropertyRelationInfomations(System.Object)">
            <summary>
            속성에 정의된 모든 속성중 RelationtAtributes, RelationtListAtributes가 정의된 속성 목록을 찾아 반환합니다.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueObject.PropertyRelationInfomations(System.Type)">
            <summary>
            속성에 정의된 모든 속성중 RelationtAtributes, RelationtListAtributes가 정의된 속성 목록을 찾아 반환합니다.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueObject.SetDataMappings(System.Object,System.Data.DataTable,System.Collections.Generic.IList{HSF.TechSvc2010.Server.ORM.ORMPropertyInfomation})">
            <summary>
            relation이 있는 개체에 속성을 설정합니다.
            </summary>
            <param name="target"></param>
            <param name="dt"></param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueObject.SetRelation(System.Object,HSF.TechSvc2010.Server.ORM.ORMPropertyInfomation,System.Data.DataTable)">
            <summary>
            target 개채에 targetProperty 속성(확장 하위속성)을 설정합니다.
            </summary>
            <param name="parent">parent 개체</param>
            <param name="targetProperty">확장속성</param>
            <param name="keyColumns">join 컬럼 목록(userID,...)</param>
            <param name="dt">query 실행결과 데이터 테이블</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueObject.GetPropertyValue(System.Object,System.String)">
            <summary>
            target object의 속성중 "propertyName"가 있을 경우 그 값을 조회하여 반환합니다.
            </summary>
            <param name="target">목표 object</param>
            <param name="propertyName">속성이름</param>
            <returns></returns>
        </member>
        <member name="T:HSF.TechSvc2010.Server.DAC.OleDbDacBase">
            <summary>
            OleDb Access Object
            </summary>
            <remarks>
            e.g.:  
             환경파일의 Key값은 "OleDbConnectionString"입니다. 데이터 베이스 연결 문자열을 구성하기 위해서는
             GetConfigConnectionString() 메소드를 구현하거나 ConnectionString 속성을 사용합니다.
            </remarks>
            
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.OleDbDacBase.ExecuteNonQuery(System.Int32,System.String,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            SQL문장, 저장프로시져를 실행
            </summary>
            <param name="size"></param>
            <param name="DBHint">데이터베이스 연결 힌트 문자열 ex) UserDB1 , UserDB2, ... </param>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text) </param>
            <param name="commandText">명령 문자열</param>
            <param name="commandParameters">명령 문자열에 바인딩되는 매개변수</param>
            <remarks>2012.07.03 이종은</remarks>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.OleDbDacBase.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            SQL문장, 저장프로시져를 실행
            </summary>
            <param name="DBHint"> 데이터베이스 연결 힌트 문자열 ex) UserDB1 , UserDB2, ... </param>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text) </param>
            <param name="commandText">명령 문자열</param>
            <param name="commandParameters">명령 문자열에 바인딩되는 매개변수</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.OleDbDacBase.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            SQL 문장, 저장프로시져를 수행하고 결과값으로 DbDataReader를 전달
            </summary>
            <param name="DBHint"> 데이터베이스 연결 힌트 문자열 ex) UserDB1 , UserDB2, ... </param>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text)</param>
            <param name="commandText">명령 문자열</param>
            <param name="commandParameters">명령 문자열에 바인딩되는 매개변수 </param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.OleDbDacBase.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            SQL 문장, 저장프로시져를 수행하고 결과값으로 object를 전달
            </summary>
            <param name="DBHint"> 데이터베이스 연결 힌트 문자열 ex) UserDB1 , UserDB2, ... </param>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text)</param>
            <param name="commandText">명령 문자열</param>
            <param name="commandParameters">명령 문자열에 바인딩되는 매개변수 </param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.OleDbDacBase.ExecuteDataSet(System.String,System.Data.CommandType,System.String,System.Int32,System.Int32,System.String,System.Data.Common.DbParameter[])">
            <summary>
            SQL 문장, 저장프로시져를 수행하고 결과값으로 DataSet 전달
            </summary>
            <param name="DBHint"> 데이터베이스 연결 힌트 문자열 ex) UserDB1 , UserDB2, ... </param>
            <param name="commandType">명령 문자열을 해독하는 방법(CommandType.StoredProcedure,CommandType.Text)</param>
            <param name="commandText">명령 문자열</param>
            <param name="startRecord">시작 레코드 위치</param>
            <param name="maxRecords">최대 조회 DataRow 개수</param>
            <param name="strTableName">결과값으로 전달할 데이터 테이블 이름</param>
            <param name="commandParameters">명령 문자열에 바인딩되는 매개변수</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.OleDbDacBase.UpdateDataSet(System.String,System.Data.DataSet,System.Data.CommandType,System.String,System.Data.CommandType,System.String,System.Data.CommandType,System.String,System.String)">
            <summary>
            DataSet을 입력된 insert,update,delete command를 바탕으로 갱신합니다.
            </summary>
            <param name="DBHint"> 데이터베이스 연결 힌트 문자열 ex) UserDB1 , UserDB2, ... </param>
            <param name="ds">갱신할 데이터</param>
            <param name="InsertCMDType">추가명령 형식</param>
            <param name="InsertCommandText">추가 명령</param>
            <param name="UpdateCMDType">갱신명령 형식</param>
            <param name="UpdateCommandText">갱신 명령</param>
            <param name="DeleteCMDType">삭제명령 형식</param>
            <param name="DeleteCommandText">삭제 명령</param>
            <param name="srcTable"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.OleDbDacBase.UpdateDataSetBatch(System.String,System.Data.DataSet,System.Data.CommandType,System.String,System.Data.CommandType,System.String,System.Data.CommandType,System.String,System.String)">
            <summary>
            DataSet을 입력된 insert,update,delete command를 바탕으로 갱신합니다.
            </summary>
            <param name="DBHint"> 데이터베이스 연결 힌트 문자열 ex) UserDB1 , UserDB2, ... </param>
            <param name="ds">갱신할 데이터</param>
            <param name="InsertCMDType">추가명령 형식</param>
            <param name="InsertCommandText">추가 명령</param>
            <param name="UpdateCMDType">갱신명령 형식</param>
            <param name="UpdateCommandText">갱신 명령</param>
            <param name="DeleteCMDType">삭제명령 형식</param>
            <param name="DeleteCommandText">삭제 명령</param>
            <param name="srcTable"></param>
            <returns></returns>
        </member>
        <member name="E:HSF.TechSvc2010.Server.DAC.OleDbDacBase.CMDExcuting">
            <summary>
            SQL문장을 수행하기 전에 발생하하는 이벤트
            </summary>
        </member>
        <member name="E:HSF.TechSvc2010.Server.DAC.OleDbDacBase.CMDExecuted">
            <summary>
            SQL문장 수행 후에 발생하는 이벤트
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.DAC.OleDbDacBase.DatabaseType">
            <summary>
            데이터베이스 종류 - DacType.OLEDB로 재정의
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.DAC.OleDbDacBase.DefaultConnectionStringConfigurationHintName">
            <summary>
            Connectionstring key in Configuration Manager item  = "OleDbConnectionString"
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.DAC.DacAgent">
            <summary>
            Oracle Access 병렬처리를 위한 Object
            </summary>
            <remarks>
            e.g.:  
             DB에 병렬로 요청을 하여 처리 하기 위한 별도의 접속 Class
            </remarks>
        </member>
        <member name="T:HSF.TechSvc2010.Server.DAC.QueryType">
            <summary>
            Execute 실행 할 Query 의 종류 Type을 정의 합니다.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.DAC.QueryType.QueryStore">
            <summary> 외부쿼리 저장소의 쿼리ID </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.DAC.QueryType.Text">
            <summary> Query Text </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.ORM.ORMManager`2">
            <summary>
            ORM Manager for HSF Platform
            </summary>
            <typeparam name="TResult">리턴 Type value object</typeparam>
            <typeparam name="TInput">입력 Type value object </typeparam>
            <reqid id="RQ-TS-BFT-004">ORM(Object-relational mapping) 서비스 지원</reqid>
        </member>
        <member name="F:HSF.TechSvc2010.Server.ORM.ORMManager`2.m_DataCache">
            <summary>
            Cache Storage for DataCache
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMManager`2.GenCacheKey(HSF.TechSvc2010.Common.DataItem)">
            <summary>
            Generation string identity key for dataitem
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMManager`2.GetObjectFromCache">
            <summary>
            get value from datacache
            </summary>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMManager`2.StoreObjectToCache(System.Object)">
            <summary>
            store object to datacache
            </summary>
            <param name="obj">target value object </param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMManager`2.ClearCache">
            <summary>
            Clear All Cached value
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.ORM.ORMManager`2.m_QueryParameter">
            <summary>
            Query Parameter - resloved from InputArgument
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.ORM.ORMManager`2.m_ResultSet">
            <summary>
            result set of Query4List
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.ORM.ORMManager`2.m_ResultRows">
            <summary>
            result value of QueryNonQuery
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.ORM.ORMManager`2.m_ResultSacalar">
            <summary>
            result value of QueryScalar
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMManager`2.ClearResult">
            <summary>
            입력 매개변수, 실행 결과 값을 초기화 합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMManager`2.Query4List(System.String,`1,HSF.TechSvc2010.Server.DAC.IDacBase)">
            <summary>
            Query for List
            CommandType은 DefaultQueryCommandType이 사용됩니다. ( 기본값 CommandType.Text )
            </summary>
            <param name="cmdText">command text </param>
            <param name="arg">input argument</param>
            <param name="dac">idacbase interface</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMManager`2.Query4List(System.Data.CommandType,System.String,`1,HSF.TechSvc2010.Server.DAC.IDacBase)">
            <summary>
            Query for List
            </summary>
            <param name="cmdType">cmd type ( procedure, text, table )</param>
            <param name="cmdText">command text </param>
            <param name="arg">input argument</param>
            <param name="dac">idacbase interface</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMManager`2.Query4List(System.Action{HSF.TechSvc2010.Server.DAC.ORMQueryArg{`1}})">
            <summary>
            Execute Query and Set Result DataSet
            </summary>
            <param name="spec"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMManager`2.Query4Scalar(System.Action{HSF.TechSvc2010.Server.DAC.ORMQueryArg{`1}})">
            <summary>
            Execute Query and Set Result Object
            </summary>
            <param name="spec"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMManager`2.Query4Scalar(System.String,`1,HSF.TechSvc2010.Server.DAC.IDacBase)">
            <summary>
            Execute Query and Set Result Object
            CommandType은 DefaultQueryCommandType이 사용됩니다. ( 기본값 CommandType.Text )
            </summary>
            <param name="cmdText">command text </param>
            <param name="arg">input argument</param>
            <param name="dac">idacbase interface</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMManager`2.Query4Scalar(System.Data.CommandType,System.String,`1,HSF.TechSvc2010.Server.DAC.IDacBase)">
            <summary>
            Execute Query and Set Result Object
            </summary>
            <param name="cmdType">cmd type ( procedure, text, table )</param>
            <param name="cmdText">command text </param>
            <param name="arg">input argument</param>
            <param name="dac">idacbase interface</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMManager`2.Query4NonQuery(System.Action{HSF.TechSvc2010.Server.DAC.ORMQueryArg{`1}})">
            <summary>
            Execute Query and Set Result Object
            </summary>
            <param name="spec"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMManager`2.Query4NonQuery(System.String,`1,HSF.TechSvc2010.Server.DAC.IDacBase)">
            <summary>
            Execute Query and Set Result Object
            CommandType은 DefaultQueryCommandType이 사용됩니다. ( 기본값 CommandType.Text )
            </summary>
            <param name="cmdText">command text </param>
            <param name="arg">input argument</param>
            <param name="dac">idacbase interface</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMManager`2.Query4NonQuery(System.Data.CommandType,System.String,`1,HSF.TechSvc2010.Server.DAC.IDacBase)">
            <summary>
            Execute Query and Set Result Object
            </summary>
            <param name="cmdType">cmd type ( procedure, text, table )</param>
            <param name="cmdText">command text </param>
            <param name="arg">input argument</param>
            <param name="dac">idacbase interface</param>
            <returns></returns>
        </member>
        <member name="F:HSF.TechSvc2010.Server.ORM.ORMManager`2.f_WithParam">
            <summary>
            쿼리 실행전 매개변수 매핑을 사용자가 처리할 경우 action입니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMManager`2.WithParam(System.Action{`1,HSF.TechSvc2010.Common.DataItem})">
            <summary>
            입력개체에서 Query의 매개변수를 설정할 수 있도록 합니다.
            </summary>
            <param name="spec">첫번째는 입력개체, 두번째 변수는 query의 변수입니다.</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMManager`2.Select">
            <summary>
            실행 결과 개체를 반환합니다.
            - 자동 변환이 제공되는 개체만 변환됩니다. ( ORMValueObject에서 상속되는 클래스와 이 클래스의 List, Collection은 자동 변환을 지원합니다. )
            - 그 이외의 경우 직접 변환 함수를 제공하여야 합니다.
            - 변환 함수 제공을 원하지 않을 경우 결과값을 ORMResultObject로 사용하십시오.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMManager`2.Select(System.Func{HSF.TechSvc2010.Server.ORM.ORMResultObject,`0})">
            <summary>
            자동 변환을 제공하지 않는 개체를 사용자가 직접 결과값에서 변환하여 
            최종 값을 얻고 싶을 경우 사용합다.
            </summary>
            <param name="spec">결과 개체에서 리턴값으로 변환하는 함수를 제공합니다. 첫번째 매개변수는 결과개체, 두번째 매개변수는 리턴값입니다.</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMManager`2.ResolveInputArgument(HSF.TechSvc2010.Server.DAC.ORMQueryArg{`1})">
            <summary>
            resolve sqlparameters for iquery
            </summary>
            <param name="queryArg"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMManager`2.ResolveOutputArgumentbyDataSet(System.Data.DataSet)">
            <summary>
            resolve output object from ds
            </summary>
            <param name="ds"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMManager`2.ResolveOutputArgument">
            <summary>
            resolve output ORMResultObject object
            </summary>
            <returns></returns>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ORM.ORMManager`2.DataCacheFlag">
            <summary>
            데이터 캐시를 사용할지를 조회하거나 설정합니다. 기본값은 false 입니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ORM.ORMManager`2.DataCacheExpression">
            <summary>
            데이터 캐시 Expression을 조회하거나 설정합니다.
            기본값은  "* * * * *"로 분단위 갱신입니다.
            캐시기능을 사용하지 않을 경우 빈문자열을 설정합니다.
            Extended format syntax : <br/><br/>
            
            Minute       - 0-59 <br/>
            Hour         - 0-23 <br/>
            Day of month - 1-31 <br/>
            Month        - 1-12 <br/>
            Day of week  - 0-6 (Sunday is 0) <br/>
            Wildcards    - * means run every <br/>
            Examples: <br/>
            * * * * *    - expires every minute<br/>
            5 * * * *    - expire 5th minute of every hour <br/>
            * 21 * * *   - expire every minute of the 21st hour of every day <br/>
            31 15 * * *  - expire 3:31 PM every day <br/>
            7 4 * * 6    - expire Saturday 4:07 AM <br/>
            15 21 4 7 *  - expire 9:15 PM on 4 July <br/>
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ORM.ORMManager`2.DefaultQueryCommandType">
            <summary>
            Query 실행시 CommandType을 주지 않을 경우 기본적으로 사용되는 CommandType를 조회하거나 설정합니다.
            기본 값은 CommandType.Text 입니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ORM.ORMManager`2.QueryKeyProviderType">
            <summary>
            Query 실행시 외부쿼리저장소(EQS)를 사용하는지 조회하거나 설정합니다 
            기본값은 NONE으로 사용하지 않는 것입니다. <br/>
            "XML"을 설정할 경우 LocalSqlStorage.Instance    ( 로드할 파일의 경로는 AppSettings의 "LocalStorage_FilePath" key에 저장된 값이 사용됩니다. )  <br/>
            "SQL"을 설정할 경우 MSSQLQueryStorage.Instance  ( 연결문자열은 AppSettings의 "MSSQLQueryStorage_ConnectionString" key에 저장된 값이 사용됩니다. )  <br/>
            "ORACLE"을 설정할 경우 OracleSqlStorage.Instance( 연결문자열은 AppSettings의 "OracleSQLStorage_ConnectionString" key에 저장된 값이 사용됩니다. ) 가 제공됩니다.
            가 쿼리제공자로 사용됩니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ORM.ORMManager`2.QueryKeyCacheExpression">
            <summary>
            Query Key를 조회하는 기능에 캐시값을 설정하거나 조회합니다.
            기본값은  "* * * * *"로 분단위 갱신입니다.
            캐시기능을 사용하지 않을 경우 빈문자열을 설정합니다.
            Extended format syntax : <br/><br/>
            
            Minute       - 0-59 <br/>
            Hour         - 0-23 <br/>
            Day of month - 1-31 <br/>
            Month        - 1-12 <br/>
            Day of week  - 0-6 (Sunday is 0) <br/>
            Wildcards    - * means run every <br/>
            Examples: <br/>
            * * * * *    - expires every minute<br/>
            5 * * * *    - expire 5th minute of every hour <br/>
            * 21 * * *   - expire every minute of the 21st hour of every day <br/>
            31 15 * * *  - expire 3:31 PM every day <br/>
            7 4 * * 6    - expire Saturday 4:07 AM <br/>
            15 21 4 7 *  - expire 9:15 PM on 4 July <br/>
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ORM.ORMManager`2.IsCachedResponse">
            <summary>
            get or set is cached result from datacache
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ORM.ORMManager`2.QueryParameter">
            <summary>
            Query Parameter - resloved from InputArgument
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ORM.ORMManager`2.ResultSet">
            <summary>
            result set of Query4List
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ORM.ORMManager`2.ResultRows">
            <summary>
            result value of QueryNonQuery
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ORM.ORMManager`2.ResultScalar">
            <summary>
            result value of QueryScalar
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.DAC.ORMQueryArg`1">
            <summary>
            Query Argument
            </summary>
            <typeparam name="TInput"></typeparam>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.ORMQueryArg`1.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.DAC.ORMQueryArg`1.m_QueryParameter">
            <summary>
            Query Paramter
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.DAC.ORMQueryArg`1.CmdType">
            <summary>
            Command Type for DbCommand
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.DAC.ORMQueryArg`1.CmdText">
            <summary>
            SQL Text for DbCommand
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.DAC.ORMQueryArg`1.Args">
            <summary>
            Input Argument object for DbCommand
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.DAC.ORMQueryArg`1.DAC">
            <summary>
            DAC Object for Query Execute
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.DAC.ORMQueryArg`1.QueryParameter">
            <summary>
            get or set Query Paramter
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.ORM.ORMValueCollection`1">
            <summary>
            ORM Value Collection 
            </summary>
            <typeparam name="T">type of value object</typeparam>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueCollection`1.GetChangedCollectionFromTable(System.Data.DataTable,System.Data.DataRowState)">
            <summary>
            Get chaned object collection from table
            </summary>
            <param name="table"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueCollection`1.ChangedCollectionFromValueTable(System.Data.DataRowState)">
            <summary>
            ValueTable호출하여 화면에 바인딩 이후 해당 테이블에 변경된 colleciton을 조회 합니다.
            </summary>
            <param name="table"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueCollection`1.ChangedCollectionFromValueTableWithExtention(System.Data.DataRowState)">
            <summary>
            ValueTableWithExtention호출하여 화면에 바인딩 이후 해당 테이블에 변경된 colleciton을 조회 합니다.
            </summary>
            <param name="table"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueCollection`1.FastLoadFromDataTable(System.Data.DataTable)">
            <summary>
            table의 column, row를 이용해 colleciton에 개체를 생성하고 채웁니다. 
            </summary>
            <param name="table">원본 테이블</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueCollection`1.LoadFromDataTable(System.Data.DataTable)">
            <summary>
            table의 column, row를 이용해 colleciton에 개체를 생성하고 채웁니다. 
            </summary>
            <param name="table">원본 테이블</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueCollection`1.#ctor(System.Data.DataTable)">
            <summary>
            table의 column, row를 이용해 colleciton에 개체를 생성하고 채웁니다. 
            </summary>
            <param name="table">원본 테이블</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueCollection`1.RemoveReplication">
            <summary>
            중복을 제거합니다.
            Colleciton내에 일치하는 데이터를 중복 제거합니다. - 1:N 구조 조회 중복을 제거하고자 할 경우 적용합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueCollection`1.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueCollection`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            DeSerilize 생성자
            </summary>
            <param name="si"></param>
            <param name="context"></param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMValueCollection`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serilize 
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ORM.ORMValueCollection`1.BindingList">
            <summary>
            Get BindingList for DataBiding for winform
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ORM.ORMValueCollection`1.ValueTable">
            <summary>
            convert to datatable from this collection
            </summary>
            <returns></returns>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ORM.ORMValueCollection`1.ValueTableWithExtention">
            <summary>
            1:1 확장 속성을 포함한 속성을 대상으로한 테이블을 조회합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="T:HSF.TechSvc2010.Server.ORM.ORMPropertyInfomation">
            <summary>
            ORM 속성정보를 표현하는 개체입니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ORM.ORMPropertyInfomation.Target">
            <summary>
            get or set ORMValue object instance
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ORM.ORMPropertyInfomation.PropertyName">
            <summary>
            get or set ORMValue object's PropertyName
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ORM.ORMPropertyInfomation.Property">
            <summary>
            get or set ORMValue object's PropertyInfo
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ORM.ORMPropertyInfomation.ColumnInfo">
            <summary>
            get or set ORMValue object's Property ColumnNameAttribute
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ORM.ORMPropertyInfomation.Relation">
            <summary>
            get or set ORMValue object's Property RelationAttribute
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ORM.ORMPropertyInfomation.RelationList">
            <summary>
            get or set ORMValue object's Property RelationListAttribute
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.DAC.DACUtility">
            <summary>
            Data Access Component서 사용하는 주요 정적 메소드 입니다.
            </summary>
            <remarks>
            인터페이스로 이루어지는 작업을 모듈화 합니다.
            </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DACUtility.GetRealCommandText(System.String,System.String)">
            <summary>
            쿼리분자열의 :,@로 시작하는 매개변수 선언을 목적 매개변수 접두사 변경합니다.
            </summary>
            <param name="CommandText">쿼리문자열</param>
            <param name="TargetPrefix">목적매개변수 접두사</param>
            <returns>변환된 실행하능한 쿼리</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DACUtility.ContainsWord(System.String,System.String)">
            <summary>
            이 메소드는 Contains 기능의 확장으로 단어단위로 해당 단어가 문장에 존재 하는지 여부를 확인 한다.
            </summary>
            <param name="query">조회하고자 하는 쿼리문장</param>
            <param name="word">매개변수</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DACUtility.AttachOracleParameters(System.String,System.Data.Common.DbCommand,System.Data.Common.DbParameter[])">
            <summary>
            This method is used to attach array of OracleParameters to a OracleCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">An array of OracleParameters to be added to command</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DACUtility.AttachParameters(System.String,System.Data.Common.DbCommand,System.Data.Common.DbParameter[])">
            <summary>
            This method is used to attach array of OracleParameters to a OracleCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">An array of OracleParameters to be added to command</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DACUtility.AssignParameterValues(System.Data.Common.DbParameter[],System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an array of OracleParameters
            </summary>
            <param name="commandParameters">Array of OracleParameters to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DACUtility.AssignParameterValues(System.Data.Common.DbParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of OracleParameters
            </summary>
            <param name="commandParameters">Array of OracleParameters to be assigned values</param>
            <param name="parameterValues">Array of objects holding the values to be assigned</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DACUtility.PrepareCommand(System.String,System.Data.Common.DbCommand,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command.
            </summary>
            <param name="command">the SqlCommand to be prepared</param>
            <param name="connection">a valid SqlConnection, on which to execute this command</param>
            <param name="transaction">a valid SqlTransaction, or 'null'</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DACUtility.PrepareCommand(System.String,System.Data.Common.DbCommand,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.Common.DbParameter[],System.Boolean@)">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command
            </summary>
            <param name="command">The OracleCommand to be prepared</param>
            <param name="connection">A valid OracleConnection, on which to execute this command</param>
            <param name="transaction">A valid OracleTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of OracleParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="mustCloseConnection"><c>true</c> if the connection was opened by the method, otherwose is false.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DACUtility.AssignParameterValues(System.Data.Common.DbParameter[],HSF.TechSvc2010.Common.IDataItem)">
            <summary>
            This method assigns an DataItem of values to an array of SqlParameters.
            </summary>
            <param name="commandParameters">array of SqlParameters to be assigned values</param>
            <param name="item">dataitem to assigend</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DACUtility.AssignOutputParameterValues(System.Data.Common.DbParameter[],HSF.TechSvc2010.Common.IDataItem)">
            <summary>
            This method assigns an array of values to an array of SqlParameters.
            </summary>
            <param name="commandParameters">array of SqlParameters to be assigned values</param>
            <param name="item">array of objects holding the values to be assigned</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DACUtility.ValidateParameter(System.String)">
            <summary>
            SQL 문장에 포함되는 동적 매개변수의 값을 조절하여 필터링합니다. (SQL injection 방어를 위한 조치입니다.)
            </summary>
            <param name="parameterstring">파라메터 이름을 지정합니다.</param>
            <returns>조정된 매개변수를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DACUtility.OpenConn(System.Data.Common.DbConnection)">
            <summary>
            open connection
            </summary>
            <param name="con"></param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DACUtility.CloseConn(System.Data.Common.DbConnection)">
            <summary>
            close connection
            </summary>
            <param name="con"></param>
        </member>
        <member name="T:HSF.TechSvc2010.Server.DAC.DacType">
            <summary>
            Database Type을 정의 합니다.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.DAC.DacType.MSSQL">
            <summary> Microsoft  SQL Server </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.DAC.DacType.ORACLE">
            <summary> Oracle  Database Server </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.DAC.DacType.OLEDB">
            <summary> OLEDB Provider Supported Server </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.DAC.DacType.ODBC">
            <summary>/// ODBC Data Provider /// </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.DAC.DacType.MSSQLCE">
            <summary>/// MSSQL CE Edition /// </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.DAC.DacType.MSORACLE">
            <summary>/// Microsoft Oracle DataProvider /// </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.ORM.ORMResultObject">
            <summary>
            ORM Execute Result object for update
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ORM.ORMResultObject.Rows">
            <summary>
            Rows for Affected
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ORM.ORMResultObject.ReturnedScalar">
            <summary>
            Result object from Query
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ORM.ORMResultObject.ResultSet">
            <summary>
            Result DataSet from Query
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ORM.ORMResultObject.IsCachedResult">
            <summary>
            get or set result returned from datacache
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.ORM.ORMSLUtil">
            <summary>
            ORM Colection의 Serilize, Deserilize 기능을 담당합니다.
            2012-09-10 박길선 압축 기능 추가
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMSLUtil.BinarySerialize(System.Object)">
            <summary>
            개체를 바이트로 직렬화합니다.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMSLUtil.BinaryDeserialize(System.Byte[])">
            <summary>
            직렬화된 바이트에서 개체로 복원합니다.
            </summary>
            <param name="serializedObject"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ORMMappingCache.GetAllPropertyRelationInfomations(System.Type)">
            <summary>
            속성에 정의된 모든 속성중 RelationtAtributes, RelationtListAtributes가 정의된 속성 목록을 찾아 반환합니다.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:HSF.TechSvc2010.Server.ORM.ColumnNameAttribute">
            <summary>
            ORM ColumnName Attribute
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ColumnNameAttribute.#ctor">
            <summary>
            컬럼이름
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ORM.ColumnNameAttribute.#ctor(System.String)">
            <summary>
            데이터베이스 컬럼이름 매핑을 수행합니다.
            </summary>
            <param name="columnName"></param>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ORM.ColumnNameAttribute.ColumnName">
            <summary>
            Database Column Name for mapping
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.ORM.RelationAttribute">
            <summary>
            ORM Relation Attribute for 1:1 relation
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ORM.RelationAttribute.JoinColumnNames">
            <summary>
            매핑시 join될 커럼의 이름을 ","로 구분하여 기재합니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.ORM.RelationListAttribute">
            <summary>
            ORM Relation List Attribute - for 1:N relation
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ORM.RelationListAttribute.GroupByColumnNames">
            <summary>
            매핑시 group by될 커럼의 이름을 ","로 구분하여 기재합니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.DAC.DacFactory">
            <summary>
            데이터베이스 팩토리패턴 관리자입니다.
            - 실행시에 SqlDacBase, OracleDacBase, OleDBDacBase가 동작하도록 IDacBase생성을 담당
            </summary>
            <reqid id="RQ-TS-BFT-005">Data Access 서비스 지원</reqid>
            <reqid id="RQ-TS-BFT-006">Data Source 서비스 지원</reqid>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DacFactory.GetProvider(HSF.TechSvc2010.Server.DAC.DacType)">
            <summary>
            데이터 베이스 프로바이더를 리턴합니다.
            </summary>
            <param name="type">데이터베이스 종류를 지정합니다.</param>
            <returns>데이터베이스 프로바이더를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DacFactory.#cctor">
            <summary>
            DacFacotry를 인스턴스를 초기화 합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DacFactory.CreateDataParameter(System.String,System.Object,HSF.TechSvc2010.Server.DAC.DacType)">
            <summary>
            매개변수 생성를 생성합니다.
            	- 각 데이터베이스에 맏는 매개변수를 생성한다.
            </summary>
            <param name="name">매개변수 이름을 지정합니다.</param>
            <param name="val">매개변수 데이터를 지정합니다.</param>
            <param name="type">데이터베이스 종류를 지정합니다.</param>
            <returns>데이터베읏 종류에 맞는 데이터베이스 파라메터 개체를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DacFactory.CreateDataParameter(System.String,System.Object,HSF.TechSvc2010.Server.DAC.DacType,System.Boolean)">
            <summary>
            매개변수 생성를 생성합니다.
            	- 각 데이터베이스에 맏는 매개변수를 생성한다.
            </summary>
            <param name="name">매개변수 이름을 지정합니다.</param>
            <param name="val">매개변수 데이터를 지정합니다.</param>
            <param name="type">데이터베이스 종류를 지정합니다.</param>
            <param name="isSupportedUnicode">유니코드 지원 여부를 지정합니다.</param>
            <returns>데이터베읏 종류에 맞는 데이터베이스 파라메터 개체를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DacFactory.NewDataParameters(System.Int32,HSF.TechSvc2010.Server.DAC.DacType)">
            <summary>
            빈 매개변수 목록 작성 합니다.
            </summary>
            <param name="cnt">매개변수 개수를 지정합니다.</param>
            <param name="type">데이터베이스 종류를 지정합니다.</param>
            <returns>지정한 갯수 만큼의 데이터베이스 파라메터를 생성해 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DacFactory.GenerateDataItem(System.Data.DataTable,System.Data.DataRowView,HSF.TechSvc2010.Server.DAC.DacType)">
            <summary>
            Generate DataItem from DataTable and DataRowView
            </summary>
            <param name="dt"></param>
            <param name="row"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DacFactory.GenerateUpdateDataSetParameter(System.Data.DataTable,HSF.TechSvc2010.Server.DAC.DacType)">
            <summary>
            Generate DataItem from DataTable and DataRowView
            </summary>
            <param name="dt"></param>
            <param name="row"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DacFactory.GenerateCommandParameter(System.Data.Common.DbCommand,System.Data.DataTable,HSF.TechSvc2010.Server.DAC.DacType)">
            <summary>
            Generate DBCommand Parameters collection 
            </summary>
            <param name="cmd">command </param>
            <param name="srcTable"> source datatable </param>
            <param name="type">DacType </param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DacFactory.CreatConnection(System.String,HSF.TechSvc2010.Server.DAC.DacType)">
            <summary>
            데이터베이스 연결 개체를 생성하여 반환합니다.
            </summary>
            <param name="connectionstring">연결 문자열을 지정합니다.</param>
            <param name="type">데이터베이스 종류를 지정합니다.</param>
            <returns>데이터베이스 연결 개체를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DacFactory.CreatDataAdapter(System.Data.Common.DbCommand)">
            <summary>
            IDbDataAdapter 생성 합니다.
            	- cmd의 데이터베이스 형식에 따라 SqlDataAdapter,OracleDataAdapter,OleDbDataAdapter 중에 하나를 생성합니다.
            </summary>
            <param name="cmd">DbCommand </param>
            <returns>DataAdapter 개체를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DacFactory.CreatDataAdapter(HSF.TechSvc2010.Server.DAC.DacType)">
            <summary>
            IDbDataAdapter 생성 합니다.
            	- cmd의 데이터베이스 형식에 따라 SqlDataAdapter,OracleDataAdapter,OleDbDataAdapter 중에 하나를 생성합니다.
            </summary>
            <param name="type">DacType</param>
            <returns>DataAdapter 개체를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DacFactory.CreatCommand(HSF.TechSvc2010.Server.DAC.DacType)">
            <summary>
            DbCommand 생성 합니다.
            	- type에 따라 SqlCommand,OracleCommand,OleDbCommand 중 하나를 생성 합니다.
            </summary>
            <param name="type">데이터베이스 종류를 지정합니다.</param>
            <returns>생성된 DbCommand를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DacFactory.CreatDataReader(HSF.TechSvc2010.Server.DAC.DacType)">
            <summary>
            DbDataReader 생성 합니다.
            - type에 따라 SqlDataReader,OracleDataReader,OleDbDataReader 중 하나를 생성 합니다.
            </summary>
            <param name="type">데이터베이스 종류를 지정합니다.</param>
            <returns>생성된 DbDataReader 개체를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DacFactory.GetDacType(System.Data.Common.DbConnection)">
            <summary>
            연결 개체로 DAC(Data Access Component) 타입을 반환합니다.
            </summary>
            <param name="con">연결 개체를 지정합니다.</param>
            <returns>연결 개체에 맞는 타입을 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DacFactory.GetDacType(System.Data.Common.DbCommand)">
            <summary>
            명령 개체로 DAC(Data Access Component) 타입을 반환합니다.
            </summary>
            <param name="cmd">명령 개체를 지정합니다.</param>
            <returns>명령 개체에 맞는 타입을 지정합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DacFactory.SetParameterPrefix(HSF.TechSvc2010.Server.DAC.DacType,System.String)">
            <summary>
            매개변수 표시 문자열을 설정합니다.
            MS SQL - @, Oracle - :, 
            </summary>
            <param name="type">데이터베이스 타입을 지정합니다.</param>
            <param name="prefix">매개변수 표시 문자열을 지정합니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DacFactory.GetParameterPrefix(HSF.TechSvc2010.Server.DAC.DacType)">
            <summary>
            DBMS종류 별로 매개변수 선언 접두사를 조회합니다.
            </summary>
            <param name="type">데이터베이스 종류</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DacFactory.OracleDataTypeConvert(System.Data.OracleClient.OracleType)">
            <summary>
             System.Data.OracleClient.OracleType 을 Oracle.DataAccess.Client.OracleDbType 으로 맵핑 처리
             예외) RowId, UInt16, UInt32, SByte, Float 의 경우 맵핑되는 OracleDbType가 없어 MSDN의 권장 type 를 사용하였음(http://msdn.microsoft.com/en-us/library/yk72thhd)
            </summary>
            <param name="stype">데이터베이스 종류</param>
            <returns>OracleDbType</returns>
        </member>
        <member name="T:HSF.TechSvc2010.Server.DAC.DacParameterCache">
            <summary>
            OracleHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DacParameterCache.DiscoverSpParameterSet(System.Data.Common.DbConnection,System.String,System.Boolean)">
            <summary>
            Resolve at run time the appropriate set of DbParameters for a stored procedure
            </summary>
            <param name="connection">A valid DbConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">Whether or not to include their return value parameter</param>
            <returns>The parameter array discovered.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DacParameterCache.CloneParameters(System.Data.Common.DbParameter[])">
            <summary>
            Deep copy of cached DbParameter array
            </summary>
            <param name="originalParameters"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DacParameterCache.CacheParameterSet(System.String,System.String,System.Data.Common.DbParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connectionString">A valid connection string for a DbConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of OracleParamters to be cached</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DacParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">A valid connection string for a DbConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An array of OracleParamters</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DacParameterCache.GetSpParameterSet(System.String,System.String,HSF.TechSvc2010.Server.DAC.DacType)">
            <summary>
            Retrieves the set of DbParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a DbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="type">데이터베이스 종류</param>
            <returns>An array of DbParameters</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DacParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean,HSF.TechSvc2010.Server.DAC.DacType)">
            <summary>
            Retrieves the set of DbParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a DbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <param name="type">database type</param>
            <returns>An array of DbParameters</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DacParameterCache.GetSpParameterSet(System.Data.Common.DbConnection,System.String)">
            <summary>
            Retrieves the set of DbParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid DbConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of DbParameters</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DacParameterCache.GetSpParameterSet(System.Data.Common.DbConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of DbParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid DbConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of DbParameters</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DacParameterCache.GetSpParameterSetInternal(System.Data.Common.DbConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of DbParameters appropriate for the stored procedure
            </summary>
            <param name="connection">A valid DbConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of DbParameters</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DacParameterCache.GetTextParameterSet(System.Data.CommandType,System.String,HSF.TechSvc2010.Common.DataItem,HSF.TechSvc2010.Server.DAC.DacType)">
            <summary>
            명령문의 매개변수를 생성합니다.
            </summary>
            <param name="commandType">명령문의 종류를 지정합니다.</param>
            <param name="commandText">명령문을 지정합니다.</param>
            <param name="item">DataItem매개변수를 지정합니다.</param>
            <param name="type">데이터베이스 종류를 지정합니다.</param>
            <returns>데이터베이스 종류에 따라 명령문의 매개변수를 생성하여 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.DAC.DacParameterCache.GetTextParameterSet(System.Data.CommandType,System.String,HSF.TechSvc2010.Common.DataItem,HSF.TechSvc2010.Server.DAC.DacType,System.Boolean)">
            <summary>
            명령문의 매개변수를 생성합니다.
            </summary>
            <param name="commandType">명령문의 종류를 지정합니다.</param>
            <param name="commandText">명령문을 지정합니다.</param>
            <param name="item">DataItem매개변수를 지정합니다.</param>
            <param name="type">데이터베이스 종류를 지정합니다.</param>
            <param name="isSupportedUnicode">유니코드 지원여부를 지정합니다.</param>
            <returns>데이터베이스 종류에 따라 명령문의 매개변수를 생성하여 반환합니다.</returns>
        </member>
        <member name="P:HSF.TechSvc2010.Server.DAC.DacParameterCache.DeriveParameterDevUse">
            <summary>
            DeriveParameter를 사용할 Provider 설정합니다. - 기본값은 null 이며 false(Oracle Provider) 및 true(Microsoft Provider) 를 입력받습니다.
            configuration key "KeyOfDeriveParameterDevUse"의 값을 "true", "false"로 설정 가능합니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.DAC.DBExecuteHandller">
            <summary>
            명령 실행 이벤트 핸들러의 구조를 정의 합니다.
            </summary>
            <param name="cmd">명령</param>
            <param name="data">명령 실행시 사용되는 데이터</param>
        </member>
    </members>
</doc>
