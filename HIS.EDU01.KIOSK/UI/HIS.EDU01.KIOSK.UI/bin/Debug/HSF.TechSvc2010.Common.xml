<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HSF.TechSvc2010.Common</name>
    </assembly>
    <members>
        <member name="T:HSF.TechSvc2010.MVC.Services.IControllerService">
            <summary>
            Provides design-time services related to controller mappings.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Services.IControllerService.VerifyMappings(HSF.TechSvc2010.MVC.Controller.BaseController)">
            <summary>
            Verifies that mappings for the controller are correct. 
            </summary>
            <param name="controller">Controller to check.</param>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Services.IControllerService.GetControlProperties(System.Object)">
            <summary>
            Lists all the properties of the control.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Services.IControllerService.GetModelProperties(HSF.TechSvc2010.MVC.Model.BaseModel)">
            <summary>
            Lists all the properties of the model.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.MSSQLBulkCopyUtil">
            <summary>
            mssql에 벌크복사 기능을 제공합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.MSSQLBulkCopyUtil.SaveToDb(System.String,System.String,System.String,System.String)">
            <summary>
            벌크 복사 수행
            </summary>
            <param name="fileDir">폴더</param>
            <param name="fileName">파일명</param>
            <param name="connectionString">mssql 연결문자열</param>
            <param name="tableName">테이블명</param>
            <returns></returns>
        </member>
        <member name="T:HSF.TechSvc2010.Common.WPTypeEnum">
            <summary>
            WorkerPorcess Type
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.WPTypeEnum.NotSet">
            <summary>
            설정안됨
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.WPTypeEnum.Remoting">
            <summary>
            .NetRemoting
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.WPTypeEnum.WCF">
            <summary>
            WCF 
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.WPTypeEnum.XMLWebservice">
            <summary>
            XMLWebservice
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.HSFBaseException">
            <summary>
             HSF Platfrom 예외
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.HSFBaseException.LastStackTrace">
            <summary>
            Last Server Call Stack Trace Infomatins
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.DataValue">
            <summary>
              DataValue - 자료 표현 개체 - name / value/ direction / length / DbType 으로 구성된 value object
              IDataValue를 상속하여 구현합니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.IDataValue">
            <summary>
            basic data item spec for automation
            </summary>
            
        </member>
        <member name="P:HSF.TechSvc2010.Common.IDataValue.name">
            <summary>
            Name
            </summary>
            
        </member>
        <member name="P:HSF.TechSvc2010.Common.IDataValue.data">
            <summary>
            Data (value)
            </summary>
            
        </member>
        <member name="P:HSF.TechSvc2010.Common.IDataValue.direction">
            <summary>
            Direction
            </summary>
            
        </member>
        <member name="P:HSF.TechSvc2010.Common.IDataValue.Length">
            <summary>
            Length - Default:Data.ToString().Length
            </summary>
            
        </member>
        <member name="P:HSF.TechSvc2010.Common.IDataValue.ParamType">
            <summary>
            ParamType - Defualt: String
            </summary>
            
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataValue.#ctor(System.String,System.Object,System.Data.ParameterDirection,System.Int32,System.Data.DbType)">
            <summary>
            지정된 키, 값, 매개변수, 사이즈, 매개변수타입을 사용하여 DataValue 클래스의 새 인스턴스를 초기화 합니다.
            </summary>
            <param name="name">DataValue의 이름입니다.</param>
            <param name="data">DataValue의 값입니다.</param>
            <param name="direction">DataValue의 매개변수 형태 입니다.</param>
            <param name="length">매개변수의 사이즈 입니다.</param>
            <param name="type">매개변수의 데이터타입 입니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataValue.#ctor(System.String,System.Object)">
            <summary>
            지정된 키, 값을 사용하여 DataValue 클래스의 새 인스턴스를 초기화 합니다.
            매개변수는 ParameterDirection.Input, 값의 데이터 크기, 매개변수 데이터 타입은 DbType.String을 사용합니다.
            </summary>
            <param name="name"> name </param>
            <param name="data"> vlaue</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataValue.#ctor(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            지정된 키, 값, 매개변수를 사용하여 DataValue 클래스의 새 인스턴스를 초기화 합니다.
            </summary>
            <param name="name"> name </param>
            <param name="data"> value </param>
            <param name="direction"> direction </param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataValue.#ctor">
            <summary>
            인수를 사용하지 않고 DataValue 클래스의 새 인스턴스를 초기화 합니다.
            인수를 사용하지는 않지만 DataValue.name은 string.Empty, DataValue.value는 null, DataItem.direction은 ParameterDirection.Input, DataItem.Length는 0, DataItem.ParamType 은 DbType.String으로 초기화 됩니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataValue.ToString">
            <summary>
            이 DataValue 클래스를 사람이 인식할 수 있는 문자열로 변환합니다.
            </summary>
            <returns>DataValue.data의 ToString()를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataValue.Dispose">
            <summary>
            이 개체에서 사용하는 모든 리소스를 해제 합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.DataValue.direction">
            <summary>
            DataValue내의 값을 쿼리 내의 상대 매개 변수의 형식으로 설정하거나 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.DataValue.data">
            <summary>
            이 개체의 값을 설정하거나 가져옵니다.
            </summary>
            
        </member>
        <member name="P:HSF.TechSvc2010.Common.DataValue.name">
            <summary>
            이 개체의 키 이름을 설정하거나 가져옵니다.
            </summary>
            
        </member>
        <member name="P:HSF.TechSvc2010.Common.DataValue.Length">
            <summary>
            이 개체의 크기를 설정하거나 가져옵니다. 
            기본 값은 data.ToString().Length 입니다.
            </summary>
            
        </member>
        <member name="P:HSF.TechSvc2010.Common.DataValue.ParamType">
            <summary>
            이 개체의 Parameter 개체의 데이터 형식을 설정하거나 가져옵니다.
            기본값은 DbType.String 입니다.
            </summary>
            
        </member>
        <member name="T:HSF.TechSvc2010.Common.WCFDataTableSerilizeUtil">
            <summary>
            WCF을 통해 개체가 직렬화, 역직렬화 될 경우 DataTable의 변환을 제공합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.WCFDataTableSerilizeUtil.ConvertFromDataTable(System.Data.DataTable)">
            <summary>
            DataTable을 직렬화용 DataSet으로 변환합니다.
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.WCFDataTableSerilizeUtil.isNeedToConvert(System.Data.DataSet)">
            <summary>
            DataSet이 직렬화된 DataTable인지 확인합니다.
            </summary>
            <param name="ds"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.WCFDataTableSerilizeUtil.ConvertFromDataSet(System.Data.DataSet)">
            <summary>
            DataSet에서 직렬화된 DataTable을 반환합니다.
            </summary>
            <param name="ds"></param>
            <returns></returns>
        </member>
        <member name="T:HSF.TechSvc2010.MVC.Design.ControlPropertyConverter">
            <summary>
            This converter lists all the properties of the component it's associated with.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.MVC.Design.StringListConverter">
            <summary>
            Provides a base converter to be used by all converters 
            providing list of values, by default exclusive.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.MVC.Design.ModelNameConverter">
            <summary>
            This converter lists all names of the models in the controller.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.MVC.Design.ModelPropertyConverter">
            <summary>
            This converter lists all the properties of 
            the model associated with the control.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.Dictionary.HSFPContext">
            <summary>
            확장속성 컨텍스트 컨트롤 
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Dictionary.HSFPContext.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Dictionary.HSFPContext.#ctor(System.ComponentModel.IContainer)">
            <summary>
            생성자
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Dictionary.HSFPContext.Dispose(System.Boolean)">
            <summary>
            자원해제
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Dictionary.HSFPContext.InitializeComponent">
            <summary>
            디자이너 지원에 필요한 메서드입니다.
            이 메서드의 내용을 코드 편집기로 수정하지 마십시오.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Dictionary.HSFPContext.GetDicID(System.Windows.Forms.Control)">
            <summary>
            Message ID
            </summary>
            <param name="t">컨트롤</param>
            <returns>매개변수명</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Dictionary.HSFPContext.SetDicID(System.Windows.Forms.Control,System.String)">
            <summary>
            컨트롤에 매개변수 이름을 할당한다.
            </summary>
            <param name="t">컨트롤</param>
            <param name="value">매개변수 이름</param>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Dictionary.HSFPContext.AllControls">
            <summary>
            컨트롤 컨테이너
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.MVC.Model.BaseModel">
            <summary>
            Base class for models.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Model.BaseModel.GetDefaultValue(System.Type)">
            <summary>
            return type's default value or instance
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Model.BaseModel.RaseModelChaned">
            <summary>
            Rase Model Chnged
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.MVC.Model.BaseModel.suspendFireEvent">
            <summary>
            이벤트 발생여부 Flag
            - 대량 이벤트 발생을 방지할때 사용합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Model.BaseModel.RasePropertyChaned(System.String,System.Object)">
            <summary>
            rase onPropertyChaned
            </summary>
            <param name="key"></param>
            <param name="val"></param>
        </member>
        <member name="E:HSF.TechSvc2010.MVC.Model.BaseModel.onModelChaned">
            <summary>
            Model Chnged Events - ClearPropertyValue 호출시 실행됨
            </summary>
        </member>
        <member name="E:HSF.TechSvc2010.MVC.Model.BaseModel.onPropertyChaned">
            <summary>
            Propery Chaned - 속성변경시 발생합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.MVC.Model.BaseModel.ModelName">
            <summary>
            A friendly name for the model.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.MVC.Controller.BaseController">
            <summary>
            Base class for controllers, and the container for models too.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Controller.BaseController.Model_onModelChaned(HSF.TechSvc2010.MVC.Model.BaseModel)">
            <summary>
            Model Change Handller
            - dfault : call  RaiseModelChanged(model);
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Controller.BaseController.Model_onPropertyChaned(HSF.TechSvc2010.MVC.Model.BaseModel,System.String,System.Object)">
            <summary>
            Model Property Change Handller
            - dfault : call  RaiseModelChanged(model);
            </summary>
            <param name="model"></param>
        </member>
        <member name="F:HSF.TechSvc2010.MVC.Controller.BaseController.components">
            <summary>
            Always initialize the container because we will host components from inheriting controllers.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Controller.BaseController.GetWinViewMapping(System.Windows.Forms.Control)">
            <summary>
            Gets/Sets the view mapping that is used with the control.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Controller.BaseController.SetWinViewMapping(System.Windows.Forms.Control,HSF.TechSvc2010.MVC.Controller.ViewInfo)">
            <summary>
            Sets the mapping that applies to this control.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Controller.BaseController.GetWebViewMapping(System.Web.UI.Control)">
            <summary>
            Gets/Sets the view mapping that is used with the control.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Controller.BaseController.SetWebViewMapping(System.Web.UI.Control,HSF.TechSvc2010.MVC.Controller.ViewInfo)">
            <summary>
            Sets the mapping that applies to this control.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Controller.BaseController.GetViewMapping(System.Object)">
            <summary>
            Gets/Sets the view mapping that is used with the control.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Controller.BaseController.SetViewMapping(System.Object,HSF.TechSvc2010.MVC.Controller.ViewInfo)">
            <summary>
            Sets the mapping that applies to this control.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Controller.BaseController.System#ComponentModel#IExtenderProvider#CanExtend(System.Object)">
            <summary>
            Determine controls that can be mapped to the model.
            </summary>
            <param name="extendee">The object being evaluated for extensibility.</param>
            <returns>The support for the object.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Controller.BaseController.RaiseViewInfoChanged(System.Object,System.EventArgs)">
            <summary>
            Called when changes occur in child <see cref="T:HSF.TechSvc2010.MVC.Controller.ViewInfo"/> objects, 
            forces code generation to reflect new values.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Controller.BaseController.FindModel(System.String)">
            <summary>
            Locates a model by its name in the controller.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Controller.BaseController.InitContext(System.Object,System.EventArgs)">
            <summary>
            Allows inheritors to initialize the context as necessary.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.MVC.Controller.BaseController.Item(System.String)">
            <summary>
            get Model by Name
            </summary>
            <param name="name">model name</param>
            <returns></returns>
        </member>
        <!-- 잘못된 형식의 XML 주석은 "P:HSF.TechSvc2010.MVC.Controller.BaseController.ConfiguredViews" 멤버에 대해 무시됩니다. -->
        <member name="T:HSF.TechSvc2010.Common.Crypto.Rsa.BigInteger">
            <summary>
            BigInteger for Rsa - 외부에 공개되지 않습니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.BizHostingWorkerProcessInfo">
            <summary>
            Business Hosting Worker Process Defination
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.BizHostingWorkerProcessInfo.WorkerTypeName">
            <summary>
            Worker type name
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.BizHostingWorkerProcessInfo.FielterTypeName">
            <summary>
            filter name
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.BizHostingWorkerProcessInfo.IsSecureChannel">
            <summary>
            user secure channel : default = false
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.BizHostingWorkerProcessInfo.cnt_total_ref">
            <summary>
            total reference count
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.BizHostingWorkerProcessInfo.cnt_total_err">
            <summary>
            total err count
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.BizHostingWorkerProcessInfo.cnt_current_ref">
            <summary>
            total current ref count
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.BizHostingWorkerProcessInfo.WorkerProcessType">
            <summary>
            WorkerProcessType - default = Remoting
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.BizHostingWorkerProcessInfo.MachineName">
            <summary>
            Machine Name
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.BizHostingWorkerProcessInfo.ProcessID">
            <summary>
            Process ID
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.BizHostingWorkerProcessInfo.ServicePort">
            <summary>
            Service Port
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.BizHostingWorkerProcessInfo.TotalRequestCount">
            <summary>
            전체 서비스 호출 처리 건수
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.BizHostingWorkerProcessInfo.StartTime">
            <summary>
            서비스 시작 시간
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.BizHostingWorkerProcessInfo.State">
            <summary>
            Service 상태
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.BizHostingWorkerProcessInfo.MaxMemoryLimit">
            <summary>
            메모리 사용량 제한값 : MB
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.BizHostingWorkerProcessInfo.MaxRequestQueueLength">
            <summary>
            동시 서비스 제한 값: 
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.BizHostingWorkerProcessInfo.Address">
            <summary>
            접속 주소
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.ServiceInfo">
            <summary>
             비즈니스 컴포넌트 정보를 표현하는 개체로 RequestPaacket에서 사용합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.ServiceInfo.#ctor">
            <summary>
            인수를 사용하지 않고 ServiceInfo 클래스의 새 인스턴스를 초기화 합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.ServiceInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            어셈블리 이름, 클래스 이름, 메소드 이름으로 ServiceInfo 클래스의 새 인스턴스를 초기화 합니다.
            </summary>
            <param name="assmFileName">어셈블리 이름을 지정합니다. ex) myCompany.Assembly</param>
            <param name="className">클래스 이름을 지정합니다. ex) myCompany.Assembly.ClassName</param>
            <param name="methodName">메소드 이름을 지정합니다.</param>
        </member>
        <member name="P:HSF.TechSvc2010.Common.ServiceInfo.AssmFileName">
            <summary>
            어셈블리 이름을 설정하거나 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.ServiceInfo.ClassName">
            <summary>
            클래스 이름을 설정하거나 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.ServiceInfo.MethodName">
            <summary>
            메소드 이름을 설정하거나 가져옵니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.CommandCompleteHandller">
            <summary>
            Context가 종료 될 때 처리할 대리차를 정의 합니다.
            </summary>
            <param name="context">Context의 유일한 키 값을 지정합니다.</param>
        </member>
        <member name="T:HSF.TechSvc2010.Common.IContext">
            <summary>
            풀 Context의 인터페이스를 정의 합니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.IService">
            <summary>
            원격 개체의 호출 인터페이스 입니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.IService.Request(HSF.TechSvc2010.Common.RequestPacket)">
            <summary>
            원격 호출 메소드 정의 합니다.
            </summary>
            <param name="packet"> 요청 패킷을 지정합니다.</param>
            <returns>응답패킷이 반환됩니다.</returns>
        </member>
        <member name="P:HSF.TechSvc2010.Common.IContext.PSID">
            <summary>
            프로세스 아이디를 가져옵니다.
            </summary>
        </member>
        <member name="E:HSF.TechSvc2010.Common.IContext.Completed">
            <summary>
            Context 정료 이벤트를 정의 합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.IContext.ID">
            <summary>
            Context 아이디를 설정하거나 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.IContext.Context">
            <summary>
            Context GUID (유일한 키)를 설정하거나 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.IContext.CanBePooled">
            <summary>
            Context가 풀에 다시 배치 할지 여부를 설정하거나 가져옵니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.ClientSvcContext">
            <summary>
            Client Service Context
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.ClientSvcContext.ChannelRegisred">
            <summary>
            if channel registed or not
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.ClientSvcContext._Channel">
            <summary>
            TcpClient Channel 
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.ClientSvcContext.#ctor">
            <summary>
            Constructor
            - 0. Channel Register 
            - 1. if Address was setted then Call GetService()
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.ClientSvcContext.GetService">
            <summary>
            Get Service 
            </summary>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.ClientSvcContext.Request(HSF.TechSvc2010.Common.RequestPacket)">
            <summary>
            Run Request Service
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="P:HSF.TechSvc2010.Common.ClientSvcContext.PSID">
            <summary>
            ProcessID
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.ClientSvcContext.Address">
            <summary>
            .NET Remoting Service Address : ex) tcp://localhost:9900/myService.rem
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.ClientSvcContext.ID">
            <summary>
            Context ID
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.ClientSvcContext.ServiceLease">
            <summary>
            ILease for Service Object
            </summary>
        </member>
        <member name="E:HSF.TechSvc2010.Common.ClientSvcContext.Completed">
            <summary>
            Complted Event when Rased whend complte Request() Method
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.ClientSvcContext.Context">
            <summary>
            GUID
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.ClientSvcContext.CanBePooled">
            <summary>
            Can be pooled
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.Dictionary.HSFPContextDICDesigner.components">
            <summary> 
            필수 디자이너 변수입니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Dictionary.HSFPContextDICDesigner.Dispose(System.Boolean)">
            <summary> 
            사용 중인 모든 리소스를 정리합니다.
            </summary>
            <param name="disposing">관리되는 리소스를 삭제해야 하면 true이고, 그렇지 않으면 false입니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Dictionary.HSFPContextDICDesigner.InitializeComponent">
            <summary> 
            디자이너 지원에 필요한 메서드입니다. 
            이 메서드의 내용을 코드 편집기로 수정하지 마십시오.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.HSFConfigManager">
             <summary>
             윈도우즈 애플리케이션 / 웹 애플리케이션을 동시에 지원하고 환경 값에 대한 암/복화하를 지원하는 클래스 입니다.
             </summary>
             <example>
                 <code>
                     // Configuration 에서 데이터를 가져옵니다.
                     string value = HSFConfigManager.GetString("KEY", true);
            
                     // Configuration 에 데이터를 설정합니다.
                     HSFConfigManager.Default["URI"] = "http://localhost:8080/Service.asmx";
            
                     if (!HSFConfigManager.ContainsKey("URI"))
                     {
                         HSFConfigManager.AddString("URI", "http://localhost:8080/Service.asmx", true);
                     }
                 </code>
             </example>
             <reqid id="RQ-TS-BFT-006">Data Source 서비스 지원</reqid>
             <reqid id="RQ-TS-BFT-017">Configuration 설정 지원</reqid>
        </member>
        <member name="F:HSF.TechSvc2010.Common.HSFConfigManager.KEY_ENC_KEY">
            <summary>
            암/복호화에 사용할 키 값의 상수를 정의 합니다.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.HSFConfigManager.KEY_ENC_IV">
            <summary>
            암/복호화에 사용할 백터 값의 상수를 정의 합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.HSFConfigManager.#cctor">
            <summary>
            인수를 사용하지 않고 HSFConfigManager 클래스의 새 인스턴스를 초기화 합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.HSFConfigManager.RefreshConfiguration">
            <summary>
            Configuration 정보를 갱신합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.HSFConfigManager.Save">
            <summary>
            Configuration 를 저장합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.HSFConfigManager.ContainsKey(System.Configuration.Configuration,System.String)">
            <summary>
            Configuration을 지정하여 해당 Configuration에 키가 존재하는지 검사를 합니다.
            </summary>
            <param name="cfg">Configuration을 지정합니다.</param>
            <param name="key">Config 키 값을 지정합니다.</param>
            <returns>지정한 Configuration에 Config 키가 존재하면 true, 그렇지 않으면 false를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.HSFConfigManager.ContainsKey(System.String)">
            <summary>
            현재 애플리케이션에서 존재하는 Configuration에 Config 키가 존재하는지 검사를 합니다.
            </summary>
            <param name="key">Config 키 값을 지정합니다.</param>
            <returns>Configuration에 Config 키가 존재하면 true, 그렇지 않으면 false를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.HSFConfigManager.AddString(System.String,System.String,System.Boolean)">
            <summary>
            Configuration에 Config 키, 값, 암호화 여부를 지정하여 키를 추가 합니다.
            </summary>
            <param name="key">추가할 키를 지정합니다.</param>
            <param name="val">추가할 키의 값을 지정합니다.</param>
            <param name="toEncrypt">암호화 할 것인지 여부를 지정합니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.HSFConfigManager.AddStringFromConsole(System.String,System.String,System.Boolean)">
            <summary>
            Configuration에 Config 키, 값, 암호화 여부를 지정하여 키를 추가 합니다.
            </summary>
            <param name="key">추가할 키를 지정합니다.</param>
            <param name="val">추가할 키의 값을 지정합니다.</param>
            <param name="toEncrypt">암호화 할 것인지 여부를 지정합니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.HSFConfigManager.GetString(System.String,System.Boolean)">
            <summary>
            키값을 지정하여 Configuration에서 해당 값을 가져옵니다.
            </summary>
            <param name="key">키값을 지정합니다.</param>
            <param name="isEncrypt">암호화 되어 있는지 여부를 지정합니다.</param>
            <returns>키에 해당하는 평문을 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.HSFConfigManager.Remove(System.String)">
            <summary>
            키를 지정하여 Configuration에서 해당 키를 제거합니다.
            </summary>
            <param name="key">제거할 키를 지정합니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.HSFConfigManager.AddObject(System.String,System.Object,System.Boolean)">
            <summary>
            Configuration에 Config 키, 값, 암호화 여부를 지정하여 키를 추가 합니다.
            값읜 경우 object를 지정합니다.
            </summary>
            <param name="key">추가할 키를 지정합니다.</param>
            <param name="val">추가할 키의 값을 지정합니다.</param>
            <param name="toEncrypt">암호화 할 것인지 여부를 지정합니다.</param>
            <remarks>
            object를 저장 할때는 BinaryFomatter를 이용하여 BASE 64로 인코딩하여 저장합니다.
            </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Common.HSFConfigManager.GetObject(System.String,System.Boolean)">
            <summary>
            Object를 저장할 경우 키에 해당하는 object를 가져옵니다.
            </summary>
            <param name="key">키값을 지정합니다.</param>
            <param name="isEncrypt">암호화 되어 있는지 여부를 지정합니다.</param>
            <returns>키에 해당하는 object를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.HSFConfigManager.GetEnumerator">
            <summary>
            컬렉션을 반복하는 열거자를 반환합니다.
            </summary>
            <returns>컬렉션을 반복하는 데 사용할 수 있는 IEnumerator 개체입니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.HSFConfigManager.SetAppConfigFilePath(System.String)">
            <summary>
            Configuration 외부 파일 Path를 설정합니다.
            </summary>
            <param name="appConfigExternalFIlePath"></param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.HSFConfigManager.AddHSFConfigHeader(System.Configuration.Configuration)">
            <summary>
            Configuration에 HSFConfig 정보를 추가 합니다.
            </summary>
            <param name="cfg">Configuration 정보를 지정합니다.</param>
        </member>
        <member name="P:HSF.TechSvc2010.Common.HSFConfigManager.Default">
            <summary>
            FXConfigManger 인스턴스를 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.HSFConfigManager.RefreshInterval">
            <summary>
            Configuration 정보를 갱신할 주기를 설정하거나 가져옵니다. (기본값은 1분 입니다.)
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.HSFConfigManager.Config">
            <summary>
            Configuration 정보를 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.HSFConfigManager.Item(System.String)">
            <summary>
            키 값을 이용해 개체에 접근해 값을 설정하거나 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.HSFConfigManager.Settings">
            <summary>
            Configuration의 AppSetting의 Settins 값을 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.HSFConfigManager.Count">
            <summary>
            Configuration의 AppSetting에 포함된 Config 수를 정수형으로 가져옵니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.ConfigCryptoAgent">
            <summary>
            Confiuration 암호화 관리자 입니다. (내부 클래스 입니다.)
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.ConfigCryptoAgent.#ctor">
            <summary>
            인수를 사용하지 않고 ConfigCryptoAgent 클래스의 새 인스턴스를 초기화 합니다. (AES  암호화 기능을 제공합니다.)
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.ConfigCryptoAgent.#ctor(System.Configuration.Configuration)">
            <summary>
            Configuration 파일을 지정하여 ConfigCryptoAgent 클래스의 새 인스턴스를 초기화 합니다.
            </summary>
            <param name="cfg">Configuration을 지정합니다.</param>
            <remarks>
            Configuration에서 HSFConfig Secion을 검사하여 AES 암/복호화에 사용할 키와 백터를 초기화 합니다.
            만일 HSFConfig Section의 AES 키가 없으면 키와 백터를 생성하여 초기화 합니다.
            </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Common.ConfigCryptoAgent.GetNewAESKey">
            <summary>
            AES 키를 생성합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.ConfigCryptoAgent.GetNewAESIV">
            <summary>
            AES 백터를 생성합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.ConfigCryptoAgent.Encrypt(System.String)">
            <summary>
            AES 대칭키 알고리즘으로 문자열을 암호화 합니다.
            </summary>
            <param name="normalText">암호화 할 문자열을 지정합니다.</param>
            <returns> 암호화 문자열이 반환 됩니다. 암호화 문자열은 BASE 64로 형태의 문자열로 인코딩 되어 있습니다.</returns>
            <exception cref="T:System.Exception">암호화 에러가 발생할 때 생성되는 오류 입니다.</exception>
        </member>
        <member name="M:HSF.TechSvc2010.Common.ConfigCryptoAgent.Decrypt(System.String)">
            <summary>
            AES 대칭키 알고리즘으로 문자열을 복호화 합니다.
            </summary>
            <param name="encryptedText">복호화할 문자열을 지정합니다.</param>
            <returns>복호화된 평문으로 반환 됩니다.</returns>
            <exception cref="T:System.Exception">복호화 에러가 발생할 때 생성되는 오류 입니다.</exception>
        </member>
        <member name="P:HSF.TechSvc2010.Common.ConfigCryptoAgent.AESKey">
            <summary>
            AES 암/복호화에 사용할 키를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.ConfigCryptoAgent.AESIV">
            <summary>
            AES 암/복호화에 사용할 백터를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.HSFDTOExtenstion">
            <summary>
            DTO Class 객체를 DataTable 로 변환 및 DataTable을 DTO 객체로 변환해주는 서비스
            - DataTable 및 object 객체에 확장 메소드로 등록되어 사용된다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.HSFDTOExtenstion.ToDTO(System.Data.DataSet,System.Type)">
            <summary>
            DataSet 객체를 ToDTO 의 메소드를 통해 Data Object 형태로 변환해주는 서비스
            - DataSet 객체에 확장 메소드로 등록되어 사용된다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.HSFDTOExtenstion.ToDTO(System.Data.DataTable,System.Type)">
            <summary>
            DataTable 객체를 ToDTO 의 메소드를 통해 Data Object 형태로 변환해주는 서비스
            - DataTable 객체에 확장 메소드로 등록되어 사용된다.
            - 2012-06-16 박길선 성능개선
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.HSFDTOExtenstion.ToDTOTreeView(System.Data.DataTable,System.Type,System.String,System.String,System.String,System.Object)">
            <summary>
            DataSet 객체를 ToDTOTreeView 의 메소드를 통해 Tree 형태로 변환해주는 서비스
            - DataTable 객체에 확장 메소드로 등록되어 사용된다.
            - 2013-04-02 제갈한철 성능개선
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.HSFDTOExtenstion.ToDataTable(System.Object,System.String)">
            <summary>
            DTO object 객체를 ToDataTable 의 메소드를 통해 DataTable 형태로 변환해주는 서비스
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.HSFDTOExtenstion.ToDataTable(System.Object)">
            <summary>
            DTO object 객체를 ToDataTable 의 메소드를 통해 DataTable 형태로 변환해주는 서비스
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.HSFDTOExtenstion.GetGeneratorDataItem(System.Object,System.String)">
            <summary>
            DTO 객체를 받아서 DataItem으로 변환해주는 서비스
            </summary>
            <param name="param">DTO 객체</param>
            <param name="prefix">property.Name 앞에 붙일 string 값</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.HSFDTOExtenstion.Clone(HSF.TechSvc2010.Common.HSFDTOBaseObject)">
            <summary>
            DTO 복사
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="T:HSF.TechSvc2010.Common.Crypto.Hash.HashUtil">
            <summary>
            SHA-1, MD5 해시 기능을 제공합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.Hash.HashUtil.#ctor">
            <summary>
            private 생성자 
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.Hash.HashUtil.GetSha1Hash(System.String)">
            <summary>
            문자열의 SHA1 해시값을 작성하고 Base64로 인코딩하여 리턴합니다.
            </summary>
            <param name="text">해시대상 문자열( UTF8 인코딩을통해 byte[]로 변환됩니다. )</param>
            <returns>해시된 값(문자열은 Base64로 인코딩된 바이트 배열입니다.)</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.Hash.HashUtil.GetSha1Hash(System.String,System.Text.Encoding)">
            <summary>
            문자열의 SHA1 해시값을 작성하고 Base64로 인코딩하여 리턴합니다.
            </summary>
            <param name="text">해시대상 문자열( 해당 인코딩을통해 byte[]로 변환됩니다. )</param>
            <param name="encoding">text를 바이트로 변환할 인코딩</param>
            <returns>해시된 값(문자열은 Base64로 인코딩된 바이트 배열입니다.)</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.Hash.HashUtil.GetSha1Hash(System.Byte[])">
            <summary>
            지정된 data[] 바이트 배열을 SHA1으로 해시한 바이트 배열로 리턴합니다.
            </summary>
            <param name="data">해시할 데이터</param>
            <returns>계산된 해시 값 배열</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.Hash.HashUtil.GetMD5Hash(System.String)">
            <summary>
            문자열의 MD5 해시값을 작성하고 Base64로 인코딩하여 리턴합니다.
            </summary>
            <param name="text">해시대상 문자열( UTF8 인코딩을통해 byte[]로 변환됩니다. )</param>
            <returns>해시된 값(문자열은 Base64로 인코딩된 바이트 배열입니다.)</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.Hash.HashUtil.GetMD5Hash(System.String,System.Text.Encoding)">
            <summary>
            문자열의 MD5 해시값을 작성하고 Base64로 인코딩하여 리턴합니다.
            </summary>
            <param name="text">해시대상 문자열( 해당 인코딩을통해 byte[]로 변환됩니다. )</param>
            <param name="encoding">text를 바이트로 변환할 인코딩</param>
            <returns>해시된 값(문자열은 Base64로 인코딩된 바이트 배열입니다.)</returns>
            <example>
             string text = "test string 1";
            </example>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.Hash.HashUtil.GetMD5Hash(System.Byte[])">
            <summary>
            지정된 data[] 바이트 배열을 MD5로 해시한 바이트 배열로 리턴합니다.
            </summary>
            <param name="data">해시할 데이터</param>
            <returns>계산된 해시 값 배열</returns>
        </member>
        <member name="T:HSF.TechSvc2010.Common.Resource.ResourceManagerBase">
            <summary>
            UI 레이어에서 사용할 리소드 관리 추상 클래스 입니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Resource.ResourceManagerBase.Get(System.String,System.Globalization.CultureInfo)">
            <summary>
            must override 
            </summary>
            <param name="key"> key for resource</param>
            <param name="ci"> culture info </param>
            <returns> object in resource </returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Resource.ResourceManagerBase.Get(System.String)">
            <summary>
            get object by key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Resource.ResourceManagerBase.GetString(System.String,System.Globalization.CultureInfo)">
            <summary>
            get string by key, cultrue
            </summary>
            <param name="key"></param>
            <param name="ci"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Resource.ResourceManagerBase.GetString(System.String)">
            <summary>
            get string by key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:HSF.TechSvc2010.Common.Crypto.SymmetricMode">
            <summary>
            대칭키 동작 모드를 결정합니다.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.Crypto.SymmetricMode.AES">
            <summary>
            AES 대칭 키 암호화 알고리즘 사용 모드
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.Crypto.SymmetricMode.TripleDES">
            <summary>
            TripleDES 대칭 키 암호화 알고리즘 사용 모드
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.Crypto.TripleDESCryptoAgent">
            <summary>
            TripleDES 암호화 관리자 입니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.TripleDESCryptoAgent.#ctor">
            <summary>
            TripleDES  암호화 기능을 제공합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.TripleDESCryptoAgent.GetNewTripleDESKey">
            <summary>
            Triple DES 키를 생성합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.TripleDESCryptoAgent.GetNewTripleDESIV">
            <summary>
            Triple DES 백터를 생성합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.TripleDESCryptoAgent.Encrypt(System.String)">
            <summary>
            Triple DES 대칭키 알고리즘으로 문자열을 암호화 합니다.
            </summary>
            <param name="normalText">암호화 할 문자열을 지정합니다.</param>
            <returns> 암호화 문자열이 반환 됩니다. 암호화 문자열은 BASE 64로 형태의 문자열로 인코딩 되어 있습니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.TripleDESCryptoAgent.Decrypt(System.String)">
            <summary>
            Triple DES 대칭키 알고리즘으로 문자열을 복호화 합니다.
            </summary>
            <param name="encryptedText">복호화할 문자열을 지정합니다.</param>
            <returns>복호화된 평문으로 반환 됩니다.</returns>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Crypto.TripleDESCryptoAgent.TripleDESKey">
            <summary>
            Triple DES 키를 설정하거나 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Crypto.TripleDESCryptoAgent.TripleDESIV">
            <summary>
            Triple DES 백터를 설정하거나 가져옵니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.Auth.AuthenticationInfo">
            <summary>
            로그인 및 인증 처리를 위한 데이터 개체 입니다.
            </summary>
            <reqid id="RQ-TS-BFT-012">인증 및 권한 지원</reqid>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Auth.AuthenticationInfo.#ctor">
            <summary>
            인수를 사용하지 않고 AuthenticationInfo 클래스의 새 인스턴스를 초기화 합니다.
            </summary>
            <remarks>
            초기화 시 사용자 아이디와 이름은 Enviroment의 사용자 이름으로 초기화 합니다.
            IP Address, IPv6의 경우도 현재 컴퓨터의 IP로 초기화 합니다.
            </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Auth.AuthenticationInfo.#ctor(System.String,System.String,System.String,System.Object)">
            <summary>
            아이디, 이름, IP, 상태 정보로 AuthenticationInfo 클래스의 새 인스턴스를 초기화 합니다.
            </summary>
            <param name="ID">아이디를 지정합니다.</param>
            <param name="Name">이름을 지정합니다.</param>
            <param name="networkIP">IP Address를 지정합니다.</param>
            <param name="state">기타 로그인처리에 필요한 정보를 지정합니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Auth.AuthenticationInfo.getLocalNetworkAddress">
            <summary>
            로컬컴퓨터의 IPv4의 IP Address를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Auth.AuthenticationInfo.getLocalNetworkAddressV6">
            <summary>
            로컬컴퓨터의 IPv6의 IP Address를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Auth.AuthenticationInfo.AuthTicket">
            <summary>
            인증 티켓을 설정하거나 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Auth.AuthenticationInfo.ID">
            <summary>
            인증 ID 를 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Auth.AuthenticationInfo.Name">
            <summary>
            인증 이름을 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Auth.AuthenticationInfo.NetworkIP">
            <summary>
            인증 시 사용된 클라이언트 IP address (IPV4) 를 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Auth.AuthenticationInfo.NetworkIPV6">
            <summary>
            인증 시 사용된 클라이언트 IP address (IPV6) 를 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Auth.AuthenticationInfo.State">
            <summary>
             인증 시 기타 사용자 정보를 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Auth.AuthenticationInfo.IsAuthenticate">
            <summary>
            인증여부를 설정하거나 가져옵니다.
            </summary>
            <remarks>
            인증 되어 있으면 true, 그렇지 않으면 false를 반환합니다.
            </remarks>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Auth.AuthenticationInfo.Identity">
            <summary>
            윈도우 인증정보를 설정하거나 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Auth.AuthenticationInfo.AuthType">
            <summary>
            인증 형태를 설정하거나 가져옵니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.MVC.Design.ViewMappingsEditorForm">
            <summary>
            Summary description for ViewMappingsEditorForm.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Design.ViewMappingsEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Design.ViewMappingsEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.MVC.Design.ViewMappingsEditorForm._designer">
            <summary>
            A reference to the designer for the component. 
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.MVC.Design.ViewMappingsEditorForm._reference">
            <summary>
            Resolves references to controls on the page.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.MVC.Design.ViewMappingsEditorForm._resolution">
            <summary>
            Resolves type loading at design-time.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Design.ViewMappingsEditorForm.InitControls(System.Object)">
            <summary>
            Loads all controls in the page.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Design.ViewMappingsEditorForm.ClearControlDependent">
            <summary>
            Clears all combos from the form (except cbControl)
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.MVC.Design.ControllerRootDesigner">
            <summary>
            This root designer controls which toolbox items are available as well as filtering properties.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Design.ControllerRootDesigner.PreFilterProperties(System.Collections.IDictionary)">
            <summary>
            Removes the <see cref="!:BaseController.ConfiguredViews"/> property when the controller is
            the root component, because in that case it's not applicable.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.MVC.Design.ControllerCodeDomSerializer">
            <summary>
            Provides the custom serialization of <see cref="T:HSF.TechSvc2010.MVC.Controller.BaseController"/> inherited 
            components at design-time.
            </summary>
            <remarks>
            This class performs the actual code generation for the code-behind page, specifically for  
            the InitializeComponent method. It makes extensive use of CodeDom classes.
            It is associated with the <see cref="T:HSF.TechSvc2010.MVC.Controller.BaseController"/> though the <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute"/> attribute.
            </remarks>
        </member>
        <member name="T:HSF.TechSvc2010.MVC.Design.BaseCodeDomSerializer">
            <summary>
            This is the base class for our custom serializers. It provides helper methods and 
            also implements required base class abstract members.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.MVC.Design.BaseCodeDomSerializer._headercomment">
            <summary>
            The comment header to signal custom code section.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Design.BaseCodeDomSerializer.GetCommentHeader(System.String)">
            <summary>
            Constructs a header to mark our custom code sections.
            </summary>
            <param name="sectionTitle">The title of the section.</param>
            <returns>The collection of comments to send to the output.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Design.BaseCodeDomSerializer.GetConfiguredSerializer(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
            <summary>
            Retrieves the serializer originally assigned to the type through its <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute"/>.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Design.BaseCodeDomSerializer.GetBaseComponentSerializer(System.ComponentModel.Design.Serialization.IDesignerSerializationManager)">
            <summary>
            Retrieves a typed serializer for a component from the base class (Component).
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Design.BaseCodeDomSerializer.AttachToEvent(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.String,System.Type,System.Object,System.String)">
            <summary>
            Builds an event attach code expression with the received parameters.
            </summary>
            <param name="manager">A serialization manager interface that is used during the deserialization process.</param>
            <param name="eventName">The name of the event to attach to. This must be an event available on the class 
            containing the component, such as Init or PreRender if the component is hosted on a <see cref="T:System.Web.UI.Page"/>.</param>
            <param name="delegateType">The type of the event handler.</param>
            <param name="connectingComponent">The component that will handle the event, containing the <paramref name="componentMethod"/> specified.</param>
            <param name="componentMethod">The method on the component matching the signature specified by the <paramref name="delegateType"/> 
            and which will handle the event.</param>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Design.BaseCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
            <summary>
            Implements abstract base member. Just passes deserialization responsibility to the component serializer.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Design.ControllerCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
            <summary>
            Serializes the <see cref="T:HSF.TechSvc2010.MVC.Controller.BaseController"/> and all its relevant values 
            to the code-behind file.
            </summary>
            <returns>A CodeDom object graph containing the code expressions generated.</returns>
        </member>
        <member name="T:HSF.TechSvc2010.Common.OriginalType">
            <summary>
            삭제/변경되는 Collection의 구분 Type을 정의 합니다.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.OriginalType.delete">
            <summary> 삭제 </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.OriginalType.modify">
            <summary> 변경 </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.HSFDTOCollectionBaseObject`1">
            <summary>
            DTO 의 값을 Collection 으로 표현하는 개체의 구현을 제공합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.HSFDTOCollectionBaseObject`1.FirstChanged">
            <summary>
            HSFDTOCollectionBaseObject Collection 의 최초 데이터 바인딩 여부 처리
            </summary>        
        </member>
        <member name="M:HSF.TechSvc2010.Common.HSFDTOCollectionBaseObject`1.Merge(HSF.TechSvc2010.Common.HSFDTOCollectionBaseObject{`0})">
            <summary>
            HSFDTOCollectionBaseObject Collection 의 추가 구성된 Collection 의 Merge 처리
            </summary> 
        </member>
        <member name="M:HSF.TechSvc2010.Common.HSFDTOCollectionBaseObject`1.AcceptChanges">
            <summary>
            HSFDTOCollectionBaseObject Collection 의 변경/삭제/추가된 정보의 확정처리
            </summary> 
        </member>
        <member name="M:HSF.TechSvc2010.Common.HSFDTOCollectionBaseObject`1.RejectChanges">
            <summary>
            HSFDTOCollectionBaseObject Collection 의 변경/삭제/추가된 정보의 롤백처리
            </summary> 
        </member>
        <member name="M:HSF.TechSvc2010.Common.HSFDTOCollectionBaseObject`1.GetChanges">
            <summary>
            HSFDTOCollectionBaseObject Collection 의 변경/삭제/추가된 정보의 추출처리
            </summary> 
        </member>
        <!-- 잘못된 형식의 XML 주석은 "M:HSF.TechSvc2010.Common.HSFDTOCollectionBaseObject`1.Filter(System.Func{`0,System.Boolean})" 멤버에 대해 무시됩니다. -->
        <!-- 잘못된 형식의 XML 주석은 "M:HSF.TechSvc2010.Common.HSFDTOCollectionBaseObject`1.Sort``1(System.Func{`0,``0})" 멤버에 대해 무시됩니다. -->
        <!-- 잘못된 형식의 XML 주석은 "M:HSF.TechSvc2010.Common.HSFDTOCollectionBaseObject`1.Sort``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})" 멤버에 대해 무시됩니다. -->
        <!-- 잘못된 형식의 XML 주석은 "M:HSF.TechSvc2010.Common.HSFDTOCollectionBaseObject`1.SortDescending``1(System.Func{`0,``0})" 멤버에 대해 무시됩니다. -->
        <!-- 잘못된 형식의 XML 주석은 "M:HSF.TechSvc2010.Common.HSFDTOCollectionBaseObject`1.SortDescending``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})" 멤버에 대해 무시됩니다. -->
        <!-- 잘못된 형식의 XML 주석은 "M:HSF.TechSvc2010.Common.HSFDTOCollectionBaseObject`1.InternalSort(System.Collections.Generic.IEnumerable{`0})" 멤버에 대해 무시됩니다. -->
        <member name="T:HSF.TechSvc2010.Common.Crypto.Rsa.RsaCryptoUtil">
            <summary>
            Rsa 암호화 기능을 문자열 단위로 수행가능하도록 제공합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.Rsa.RsaCryptoUtil.CreateNewKey">
            <summary>
            RsaKeyPare를 생성하여 반환합니다.( 키 사이즈는 1024 입니다. )
            </summary>
            <returns>RsaKeyPare</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.Rsa.RsaCryptoUtil.CreateNewKey(System.Int32)">
            <summary>
            지정된 길이의 RsaKeyPare를 생성하여 반환합니다.
            </summary>
            <param name="keySize">암호화 키 길이</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.Rsa.RsaCryptoUtil.EncryptWithPublicKey(System.String,HSF.TechSvc2010.Common.Crypto.Rsa.RsaKeyPare)">
            <summary>
            공개키로 문자열을 암호화 합니다.
            </summary>
            <param name="text">문자열( 암호화 시 기본 인코딩 UTF8로 변환되어 암호화 됩니다. )</param>
            <param name="key">공개키가 포함된 키</param>
            <returns>암호화(byte[]) 후 Base64로 인코딩된 문자열</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.Rsa.RsaCryptoUtil.EncryptWithPublicKey(System.String,System.Text.Encoding,HSF.TechSvc2010.Common.Crypto.Rsa.RsaKeyPare)">
            <summary>
            공개키로 문자열을 암호화 합니다.
            </summary>
            <param name="text">문자열</param>
            <param name="encoding">인코딩(문자열을 바이트로 전환하는 기준)</param>
            <param name="key">공개키가 포함된 키</param>
            <returns>암호화(byte[]) 후 Base64로 인코딩된 문자열</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.Rsa.RsaCryptoUtil.EncryptWithPrivateKey(System.String,HSF.TechSvc2010.Common.Crypto.Rsa.RsaKeyPare)">
            <summary>
            비밀키로 문자열을 암호화 합니다.
            </summary>
            <param name="text">문자열( 암호화 시 기본 인코딩 UTF8로 변환되어 암호화 됩니다. )</param>
            <param name="key">비밀키가 포함된 키</param>
            <returns>암호화(byte[]) 후 Base64로 인코딩된 문자열</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.Rsa.RsaCryptoUtil.EncryptWithPrivateKey(System.String,System.Text.Encoding,HSF.TechSvc2010.Common.Crypto.Rsa.RsaKeyPare)">
            <summary>
            비밀키로 문자열을 암호화 합니다.
            </summary>
            <param name="text">문자열</param>
            <param name="encoding">인코딩(문자열을 바이트로 전환하는 기준)</param>
            <param name="key">비밀키가 포함된 키</param>
            <returns>암호화(byte[]) 후 Base64로 인코딩된 문자열</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.Rsa.RsaCryptoUtil.DecryptWithPubliceKey(System.String,HSF.TechSvc2010.Common.Crypto.Rsa.RsaKeyPare)">
            <summary>
            공개키로 문자열을 해독(복호화) 합니다. ( 인코딩은 UTF8이 사용됩니다. )
            </summary>
            <param name="text">암호화된 문자열(Base64로 인코딩된 암호문)</param>
            <param name="key">공개키가 포함된 키</param>
            <returns>해독(복호화)된 문자열</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.Rsa.RsaCryptoUtil.DecryptWithPubliceKey(System.String,System.Text.Encoding,HSF.TechSvc2010.Common.Crypto.Rsa.RsaKeyPare)">
            <summary>
            공개키로 문자열을 해독(복호화) 합니다.
            - 제공된 공개키와 짝을 이루는 개인키로 암호화 된경우만 해독(복호화)에 성공합니다.
            </summary>
            <param name="text">암호화된 문자열(Base64로 인코딩된 암호문)</param>
            <param name="encoding">인코딩(해독 후 문자열로 변환시 사용될 인코딩 기준)</param>
            <param name="key">공개키가 포함된 키</param>
            <returns>해독(복호화)된 문자열</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.Rsa.RsaCryptoUtil.DecryptWithPrivateKey(System.String,HSF.TechSvc2010.Common.Crypto.Rsa.RsaKeyPare)">
            <summary>
            비밀키로 문자열을 해독(복호화) 합니다. ( 인코딩은 UTF8이 사용됩니다. )
            </summary>
            <param name="text">암호화된 문자열(Base64로 인코딩된 암호문)</param>
            <param name="key">비밀키가 포함된 키</param>
            <returns>해독(복호화)된 문자열</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.Rsa.RsaCryptoUtil.DecryptWithPrivateKey(System.String,System.Text.Encoding,HSF.TechSvc2010.Common.Crypto.Rsa.RsaKeyPare)">
            <summary>
            비밀키로 문자열을 해독(복호화) 합니다.
            - 제공된 비밀키와 짝을 이루는 개인키로 암호화 된경우만 해독(복호화)에 성공합니다.
            </summary>
            <param name="text">암호화된 문자열(Base64로 인코딩된 암호문)</param>
            <param name="encoding">인코딩(해독 후 문자열로 변환시 사용될 인코딩 기준)</param>
            <param name="key">비밀키가 포함된 키</param>
            <returns>해독(복호화)된 문자열</returns>
        </member>
        <member name="T:HSF.TechSvc2010.Common.RequestPacket">
            <summary>
            요청 패킷으로
            - 브로커기반 응용프로그램 서버에 COM+, 일반 클래스 응용프로그램 실행요청을 전달하기위한 정보표현 개체입니다.
            IRequestPacket, ISerializable,IDisposable  인터페이스 구현
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.IRequestPacket">
            <summary>
            Data Object Spec for .NET Remoting Trasfer object
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.IRequestPacket.GetXml">
            <summary>
            get xml format string of this instance
            </summary>
            <returns></returns>
        </member>
        <member name="P:HSF.TechSvc2010.Common.IRequestPacket.INPUT">
            <summary>
            미들웨어에 전달할 매개변수 목록 개체
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:HSF.TechSvc2010.Common.IRequestPacket.Count">
            <summary>
            return count of paramters
            </summary>
            <returns></returns>
        </member>
        <member name="F:HSF.TechSvc2010.Common.RequestPacket.CONST_CALLCONTEXT_REQUEST_KEY">
            <summary>
            CallContext에 저장할 RequestPacket 키 이름입니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.RequestPacket.#ctor">
            <summary>
            인수를 사용하지 않고 RequestPacket 클래스의 새 인스턴스를 초기화 합니다.
            UICultrue와 ContextID를 초기화 합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.RequestPacket.#ctor(HSF.TechSvc2010.Common.ServiceInfo,HSF.TechSvc2010.Common.Auth.AuthenticationInfo)">
            <summary>
            지정된 ServiceInfo, AuthenticationInfo 정보로 RequestPacket 클래스의 새 인스턴스를 초기화 합니다.
            </summary>
            <param name="serviceInfo">COM+ 응용 프로그램 정보를 지정합니다.</param>
            <param name="AuthenticationInfo">인증 정보를 지정합니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.RequestPacket.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializer를 위한 생성자로 직렬화 시 개체의 인스턴스를 초기화 합니다.
            </summary>
            <param name="si">데이터로 채울 SerializationInfo 입니다.</param>
            <param name="context">이 serialization에 대한 대상입니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.RequestPacket.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            개체가 자체 serialization 및 deserializationㅇ르 제어할 수 있도록 합니다.
            대상 개체를 serialize하는 데 필요한 데이터로 SerializationInfo를 채웁니다.
            </summary>
            <param name="info">데이터로 채울 SerializationInfo 입니다.</param>
            <param name="context">이 serialization에 대한 대상입니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.RequestPacket.GetXml">
            <summary>
            현재 RequestPacket의 내용을 XML String형태로 표현합니다.
            </summary>
            <returns>RequestPacket의 XML String 형태로 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.RequestPacket.Dispose">
            <summary>
            이 개체에서 사용하는 모든 리소스를 해제 합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.RequestPacket.Serialize2String(HSF.TechSvc2010.Common.RequestPacket)">
            <summary>
            개체를 지정된 포매터(기본은 BinarayFormatter)를 사용하여 문자열로 직렬화 하고 이를 다시 Base64로 인코딩한 문지열을 리턴합니다.
            </summary>
            <param name="pk">Base64로 인코딩할 RequesetPacket을 지정합니다.</param>
            <returns>Base64 인코딩 문자열을 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.RequestPacket.Serialize2XML(HSF.TechSvc2010.Common.RequestPacket)">
            <summary>
            개체를 Serialize2String()를 통해 문자열로 만들고 
            이를 다시 XMLDocument를 생성하여 내부에 RequestPacket Element에 담아 리턴합니다.
            </summary>
            <param name="pk">XMLDocument로 변환할 RequestPacket 정보를 지정합니다.</param>
            <returns>XMLDocument로 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.RequestPacket.DeSerializeFromString(System.String)">
            <summary>
            Base64로 인코딩된 문자열에서 원본 문자열을 추출하고 이를 다시 지정된 포매터(기본은 BinarryFormatter)를 사용하여 RequestPacket으로 복원합니다.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.RequestPacket.DeSerializeFromXML(System.Xml.XmlDocument)">
            <summary>
            XMLDocument의 "RequestPacket" Element에서 
            데이터를 추출하여 "DeSerializeFromString" 메소드를 호추하여 RequestPacket을 복원합니다.
            </summary>
            <param name="doc"></param>
            <returns></returns>
        </member>
        <member name="P:HSF.TechSvc2010.Common.RequestPacket.RequestContext">
            <summary>
            Request Context for WCF Internal
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.RequestPacket.ServiceFormatterType">
            <summary>
            송수신 데이터의 직렬화 방식을 설정하거나 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.RequestPacket.UICulture">
            <summary>
            이 개체의 UI Culture 정보를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.RequestPacket.ContextID">
            <summary>
            이 개체의 Context GUID를 설정하거나 가져옵니다.
            RequestPacket의 유일한 키 정보 입니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.RequestPacket.Current">
            <summary>
            CallContext의 저장된 정보를 읽어 RequestPacket 정보를 반환합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.RequestPacket.RequestTime">
            <summary>
            이 개체의 시간을 가져오거나 설정합니다.
            기본값은 이 개체를 만들때의 시간입니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.RequestPacket.RequestDataItemParameterString">
            <summary>
            전송용 INPUT 개체 직렬화 문자열 저장소
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.RequestPacket.Item(System.Int32)">
            <summary>
            이 개체에 포함된 입력개체의 DataValue값을 조회합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.RequestPacket.Service">
            <summary>
            이 개체가 호출 메소드 정보를 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.RequestPacket.Operator">
            <summary>
            이 개체를 조작하는 조작자 정보를 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.RequestPacket.INPUT">
            <summary>
            미들웨어에 전달할 매개변수가 담긴 개체 입니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.RequestPacket.Count">
            <summary>
            입력 매개변수의 개수를 반환합니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.MVC.Services.IAdapterService">
            <summary>
            Interface implemented by services that adapt requests according to the target "platform".
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Services.IAdapterService.FindControl(System.String)">
            <summary>
            Locates a control in the current container.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Services.IAdapterService.GetControlID(System.Object)">
            <summary>
            Retrieves the control ID.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Services.IAdapterService.GetControls">
            <summary>
            Retrieves all controls in the current container.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Services.IAdapterService.GetComponents">
            <summary>
            Gets all components in the current container.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Services.IAdapterService.RefreshView(HSF.TechSvc2010.MVC.Controller.BaseController)">
            <summary>
            Forces a refresh of controls in the current view (visual container).
            </summary>
            <param name="controller">The controller whose mappings will be taking into account for the refresh.</param>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Services.IAdapterService.RefreshModels(HSF.TechSvc2010.MVC.Controller.BaseController)">
            <summary>
            Forces a refresh of the model based on the current view (controls) values.
            </summary>
            <param name="controller">The controller whose mappings will be taking into account for the refresh.</param>
        </member>
        <member name="T:HSF.TechSvc2010.MVC.Design.ViewMappingsEditor">
            <summary>
            Provides the visual editor for the mappings contained in an <see cref="T:HSF.TechSvc2010.MVC.Controller.BaseController"/> component.
            </summary>
            <remarks>
            In order to provide visual forms, this editor uses the <see cref="T:System.Windows.Forms.Design.IWindowsFormsEditorService"/> 
            that is requested to the service provider (the IDE). With a reference to that service, 
            we can call <see cref="M:System.Windows.Forms.Design.IWindowsFormsEditorService.ShowDialog(System.Windows.Forms.Form)"/> to display the form.
            </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Design.ViewMappingsEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Specifies the type of editor we are.
            </summary>
            <returns>Returns <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.Modal"/> as this is a modal form editor.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Design.ViewMappingsEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Starts property edition.
            </summary>
            <returns>The new value.</returns>
        </member>
        <member name="T:HSF.TechSvc2010.AOPLibrary.AOPSink">
            <summary>
            AOP sink class: AOP 가로채기 Sink기능을 제공합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.AOPLibrary.AOPSink.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            동기 처리 Sink를 제공합니다.
            </summary>
            <param name="msg">메시지</param>
            <returns>메시지</returns>
        </member>
        <member name="M:HSF.TechSvc2010.AOPLibrary.AOPSink.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
            <summary>
            비동기 처리 sink를 제공합니다.
            </summary>
            <param name="msg">메시지</param>
            <param name="replySink">메시지</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.AOPLibrary.AOPSink.AsyncProcessReplyMessage(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            비동기 프로세스 메시지 전달
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="P:HSF.TechSvc2010.AOPLibrary.AOPSink.NextSink">
            <summary>
            next sink 
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.AOPLibrary.AsyncReplyHelperSink">
            <summary>
            비동기 Sink helper 기능을 제공합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.AOPLibrary.AsyncReplyHelperSink.#ctor(System.Runtime.Remoting.Messaging.IMessageSink,HSF.TechSvc2010.AOPLibrary.AsyncReplyHelperSink.AsyncReplyHelperSinkDelegate)">
            <summary>
            비동기 reploy sink 
            </summary>
            <param name="next"></param>
            <param name="d"></param>
        </member>
        <member name="M:HSF.TechSvc2010.AOPLibrary.AsyncReplyHelperSink.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            ProcessMessage
            </summary>
            <param name="msg">메시지</param>
            <returns>리턴메시지</returns>
        </member>
        <member name="M:HSF.TechSvc2010.AOPLibrary.AsyncReplyHelperSink.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
            <summary>
            비동기 ProcessMessage
            </summary>
            <param name="msg">메시지</param>
            <param name="replySink">메시지 sink</param>
            <returns>imessagectrl</returns>
        </member>
        <member name="P:HSF.TechSvc2010.AOPLibrary.AsyncReplyHelperSink.NextSink">
            <summary>
            get next sink
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.AOPLibrary.AsyncReplyHelperSink.AsyncReplyHelperSinkDelegate">
            <summary>
            Define a delegate to the callbacㅅk method.   
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="T:HSF.TechSvc2010.Common.Crypto.ASymmetricKey">
            <summary>
            비대칭키 암호화 알고리즘에 관련된 기능을 제공하는 클래스입니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.ASymmetricKey.#ctor(System.Boolean)">
            <summary>
            비대칭 키 방식의 키 교환 알고리즘을 위한 Constructor 입니다.
            </summary>
            <param name="includePrivateParameters">개인키를 내보낼지 여부를 결정합니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.ASymmetricKey.CreateRSA">
            <summary>
            RSACryptoServiceProvider Class Wrapper입니다.
            </summary>
            <returns>RSACryptoServiceProvider를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.ASymmetricKey.Dispose">
            <summary>
            사용 중인 모든 Resource를 정리합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.ASymmetricKey.CipherText(System.Byte[],System.Security.Cryptography.RSAParameters,System.Boolean)">
            <summary>
            RSA 알고리즘으로 암호화를 수행합니다.
            </summary>
            <param name="plainText">암호화할 평문을 입력합니다.</param>
            <param name="RSAKey">RSA Key 정보를 입력합니다.</param>
            <param name="fOAEP">OAEP Padding 여부를 결정합니다.</param>
            <returns>암호화된 결과를 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            using (ASymmetricKey crypto = new ASymmetricKey(false))
            {
            	RSAParameters rsaKey = crypto.GetRSAKey(false);
            	byte[] cipherText = crypto.CipherText(System.Text.Encoding.Default.GetBytes("Plaintext"), rsaKey, false);   //평문
            }
            </code>
            </example>
            <remarks>
            RSA 알고리즘으로 교환할 키 정보를 암호화합니다.
            </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.ASymmetricKey.CipherText(System.Byte[],System.String,System.Boolean)">
            <summary>
            RSA 알고리즘으로 암호화를 수행합니다.
            </summary>
            <param name="plainText">암호화할 평문을 입력합니다.</param>
            <param name="XMLKey">RSA XML Key 정보를 입력합니다.</param>
            <param name="fOAEP">OAEP Padding 여부를 결정합니다.</param>
            <returns>암호화된 결과를 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            using (ASymmetricKey crypto = new ASymmetricKey(false))
            {
            	byte[] cipherText = crypto.CipherText(System.Text.Encoding.Default.GetBytes("Plaintext"), "Public string XML", false);  //평문, XML 공개키 문자열
            }
            </code>
            </example>
            <remarks>
            RSA 알고리즘으로 교환할 키 정보를 암호화합니다.
            </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.ASymmetricKey.DecipherText(System.Byte[],System.Security.Cryptography.RSAParameters,System.Boolean)">
            <summary>
            RSA 알고리즘으로 복호화를 수행합니다.
            </summary>
            <param name="cipherText">복호화할 암호문을 입력합니다.</param>
            <param name="RSAKey">RSA Key 정보를 입력합니다.</param>
            <param name="fOAEP">OAEP Padding 여부를 결정합니다.</param>
            <returns>복호화된 결과를 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            using (ASymmetricKey crypto = new ASymmetricKey(true))
            {
            	RSAParameters rsaKey; // 보관하고 있는 개인 키 지정
            	byte[] decipherText = crypto.DecipherText(System.Convert.FromBase64String("Ciphertext"), rsaKey, false);   //암호문
            }
            </code>
            </example>
            <remarks>
            RSA 알고리즘으로 복호화를 수행합니다.
            </remarks>        
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.ASymmetricKey.DecipherText(System.Byte[],System.String,System.Boolean)">
            <summary>
            RSA 알고리즘으로 복호화를 수행합니다.
            </summary>
            <param name="cipherText">복호화할 암호문을 입력합니다.</param>
            <param name="XMLKey">RSA XML Key 정보를 입력합니다.</param>
            <param name="fOAEP">OAEP Padding 여부를 결정합니다.</param>
            <returns>복호화된 결과를 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            using (ASymmetricKey crypto = new ASymmetricKey(true))
            {
            	byte[] decipherText = crypto.DecipherText(System.Convert.FromBase64String("Ciphertext"), "Private string XML", false);   //암호문, XML 개인키 문자열
            }
            </code>
            </example>
            <remarks>
            RSA 알고리즘으로 복호화를 수행합니다.
            </remarks>        
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.ASymmetricKey.GetRSAKey(System.Boolean)">
            <summary>
            RSA Parameter를 생성합니다.
            </summary>
            <param name="includePrivateParameters">개인키를 내보낼지 여부를 결정합니다.</param>
            <returns>RSA Parameter를 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            using (Cryptography crypto = Cryptography(true))
            {
            	RSAParameters rsaKey = crypto.GetRSAKey(true);
            }
            </code>
            </example>
            <remarks>
            RSA Parameter를 생성합니다.
            개인키를 포함해서 생성할지 여부를 결정할 수 있습니다.
            </remarks> 
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.ASymmetricKey.GetRSAXMLKey(System.Boolean)">
            <summary>
            RSA XML String Key를 생성합니다.
            </summary>
            <param name="includePrivateParameters">개인키를 내보낼지 여부를 결정합니다.</param>
            <returns>RSA XML String Key를 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            using (Cryptography crypto = Cryptography(true))
            {
            	RSAParameters rsaKey = crypto.GetRSAKey(true);
            }
            </code>
            </example>
            <remarks>
            RSA XML String Key를 생성합니다.
            개인키를 포함해서 생성할지 여부를 결정할 수 있습니다.
            </remarks> 
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.ASymmetricKey.GetRSAKeyFromXMLString(System.String,System.Boolean)">
            <summary>
            RSA XML 형식의 Key로부터 Parameter를 읽어 옵니다.
            </summary>
            <param name="XMLString">RSA XML 문자열을 입력합니다.</param>
            <param name="includePrivateParameters">개인키를 내보낼지 여부를 결정합니다.</param>
            <returns>RSA Parameter를 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            using (Cryptography crypto = Cryptography(true))
            {
            	RSAParameters rsaKey = crypto.GetRSAKeyFromXMLString("Private string XML", true);   //XML 개인키 문자열
            }
            </code>
            </example>
            <remarks>
            RSA XML 형식의 Key로부터 Parameter를 읽어 옵니다.
            개인키를 포함해서 내보낼지 여부를 결정할 수 있습니다. 단, XML 문자열에 개인키가 포함되어 있는 경우에 유효합니다.
            </remarks>        
        </member>
        <member name="P:HSF.TechSvc2010.Common.Crypto.ASymmetricKey.RSAKey">
            <summary>
            현재 RSA 키 교환 알고리즘의 Key를 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Crypto.ASymmetricKey.RSAKeySize">
            <summary>
            현재 RSA 키의 크기를 가져옵니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.Test.Record">
            <summary>
            시나리오 테스트를 위한 사용자 Action 저장을 위한 클래스
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Test.Record.#ctor">
            <summary>
            Scenario Record 생성자
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Test.Record.Start">
            <summary>
            Scenario Recording Start
            Recording을 하고 있는 경우에 Start() 메소드를 수행하면 ApplicationException이 발생합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Test.Record.Stop">
            <summary>
            Scenario Recording Stop
            Recording을 하고 있지 않을 경우 Stop() 메소드를 수행하면 ApplicationException이 발생합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Test.Record.Pause">
            <summary>
            Scenario Recording Pause
            현재 Recording 중일 경우 Pause() 메소드를 수행하면 잠시 멈춤 상태로 전환 된다.
            잠시 멈춤 상태에서 Pause() 메소드를 수행하면 다시 Recording 중 상태로 바뀐다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Test.Record.Cancel">
            <summary>
            Scenario Recording Cancel
            현재 Recording 된 정보를 최종 저장하지 않고 취소를 수행한다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Test.Record.Save(System.String,System.String,HSF.TechSvc2010.Common.DataItem)">
            <summary>
            현재 Recording이 시작된 이후에 데이터 저장
            </summary>
            <param name="classfullname"></param>
            <param name="methodname"></param>
            <param name="item"></param>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Test.Record.Status">
            <summary>
            현재 시나리오 Record 상태 값을 가져옵니다. (Readonly)
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Test.Record.FileName">
            <summary>
            현재 Recording 중인 파일명을 가져옵니다. (Readonly)
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Test.Record.Instance">
            <summary>
            Scneario Record Singleton Instance
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.ServiceAssemblyInfo">
            <summary>
            AssemblyInfomation Class
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.ServiceAssemblyInfo.#ctor(System.String)">
            <summary>
            Constructor by AssemblyName
            </summary>
            <param name="assemblyName"></param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.ServiceAssemblyInfo.CreateAssemblyInfoByClassFullName(System.String)">
            <summary>
            Generate AssemblyInfo by Class Full Name
            if class name is "myNameSpace.ClassName" then assembly name reported "myNameSpace"
            </summary>
            <param name="classFullName">class's full name include namespace </param>
            <returns></returns>
        </member>
        <member name="P:HSF.TechSvc2010.Common.ServiceAssemblyInfo.AssemblyName">
            <summary>
            Get or Set Assembly Name 
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.Auth.AuthPacket">
            <summary>
            로그인 처리 후 응답 클래스 개체 정의 합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Auth.AuthPacket.#ctor">
            <summary>
            인수를 사용하지 않고 AuthPacket 클래스의 새 인스턴스를 초기화 합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Auth.AuthPacket.#ctor(System.Int32,System.String,System.String)">
            <summary>
            인증 결과, 에러메지시, 토큰 정보로 AuthPacket 클래스의 새 인스턴스를 초기화 합니다.
            </summary>
            <param name="resultcode">인증 결과 코드를 지정합니다.</param>
            <param name="errmessage">인증 에러 메시지를 지정합니다.</param>
            <param name="token">인증 토큰을 지정합니다.</param>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Auth.AuthPacket.ResultCode">
            <summary>
            인증 후 결과 코드를 설정하거나 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Auth.AuthPacket.ErrMessage">
            <summary>
            인증 후 에러 메시지를 설정하거나 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Auth.AuthPacket.Token">
            <summary>
            인증 후 토큰 정보를 설정하거나 가져옵니다.
            </summary>
        </member>
        <!-- 잘못된 형식의 XML 주석은 "T:HSF.TechSvc2010.Common.Auth.AuthenticateBase" 멤버에 대해 무시됩니다. -->
        <member name="M:HSF.TechSvc2010.Common.Auth.AuthenticateBase.Authenticate(HSF.TechSvc2010.Common.Auth.SignOnType,System.String,System.String,System.Object)">
            <summary>
            인증형태, 사용자 아이디, 비밀번호 상태 값을 지정하여 AuthenticateBase 클래스의 새 인스턴스를 초기화 합니다.
            </summary>
            <param name="kind">인증 형태를 지정합니다.</param>
            <param name="userid">사용자 아이디를 지정합니다.</param>
            <param name="pwd">비밀번호를 지정합니다.</param>
            <param name="state">기타 사용자의 상태를 지정합니다.</param>
            <returns>인증 정보가 반환 됩니다.</returns>
            <remarks>
             - kind 가 windows 일 경우 나머지 매개변수는 의미가 없습니다.(무시된다)
             - user인증을 사용할 경우 반드시 UserAuthenticate 메소드를 구현해야 합니다.
            </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Auth.AuthenticateBase.WindowsBasicAuthenticate">
            <summary>
            Windows 기본 인증을 수행합니다.
            </summary>
            <returns>인증 정보를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Auth.AuthenticateBase.WebBasicAuthenticate">
            <summary>
            웹 응용프로그램의 윈도우기본 인증을 수행합니다.
            </summary>
            <returns>인증 정보를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Auth.AuthenticateBase.WebUserAuthenticate(System.String,System.String,System.Object)">
            <summary>
            웹 응용프로그램 사용자 인증을 수행합니다.
            </summary>
            <param name="userid">사용자 아이디를 지정합니다.</param>
            <param name="pwd">비밀번호를 지정합니다.</param>
            <param name="state">인증 처리를 위한 기타 정보를 지정합니다.</param>
            <returns>인증 정보를 반환합니다.</returns>
            <remarks>
            이 메소드는 인증 형태가 SignOnType.WebUser일 경우 반드시 재 정의해야 합니다.
            재 정의 하지 않으면 기본 반환값은 null 입니다.
            </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Auth.AuthenticateBase.WindowsUserAuthenticate(System.String,System.String,System.Object)">
            <summary>
            Windows 사용자 인증을 수행합니다.
            </summary>
            <param name="userid">사용자 아이디를 지정합니다.</param>
            <param name="pwd">비밀번호를 지정합니다.</param>
            <param name="state">인증 처리를 위한 기타 정보를 지정합니다.</param>
            <returns>인증 정보를 반환합니다.</returns>
            <remarks>
            이 메소드는 인증 형태가 SignOnType.WindowsUser일 경우 반드시 재 정의해야 합니다.
            재 정의 하지 않으면 기본 반환값은 null 입니다.
            </remarks>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Auth.AuthenticateBase.IsAuthenticated">
            <summary>
            인증 여부를 설정하거나 가져옵니다.
            </summary>
            <remarks>
            인증이 되었으면 true, 그렇지 않으면 false 값을 가집니다.
            기본 값은 false 입니다.
            </remarks>
        </member>
        <member name="T:HSF.TechSvc2010.Common.Auth.SignOnType">
            <summary>
            로그인 형태를 정의 합니다.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.Auth.SignOnType.WindowsBasic">
            <summary>
            윈도우즈 기본 로그인입니다.
            </summary>
            <remarks>
            Active Directory, Windows Domain Login시에 사용할 수 있습니다.
            </remarks>
        </member>
        <member name="F:HSF.TechSvc2010.Common.Auth.SignOnType.WindowsUser">
            <summary>
            사용자 로그인입니다.
            </summary>
            <remarks>
            사용자 로그인을 지정합니다.
            </remarks>
        </member>
        <member name="F:HSF.TechSvc2010.Common.Auth.SignOnType.WebBasic">
            <summary>
            웹 애플리케이션 윈도우즈 통합 인증입니다.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.Auth.SignOnType.WebUser">
            <summary>
            웹 애플리케이션 사용자 인증입니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.MVC.Services.ControllerService">
            <summary>
            Provides design-time services related to controller mappings.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Services.ControllerService.#ctor(System.ComponentModel.Design.IDesignerHost)">
            <summary>
            Initializes a new instance of the <see cref="T:HSF.TechSvc2010.MVC.Services.ControllerService"/>.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Services.ControllerService.VerifyMappings(HSF.TechSvc2010.MVC.Controller.BaseController)">
            <summary>
            Verifies that mappings for the controller are correct. 
            </summary>
            <param name="controller">Controller to check.</param>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Services.ControllerService.OnVerifyAll(System.Object,System.EventArgs)">
            <summary>
            Verifies all mappings in all controllers in the current host. 
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Services.ControllerService.GetControlProperties(System.Object)">
            <summary>
            Lists all the properties of the control.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Services.ControllerService.GetModelProperties(HSF.TechSvc2010.MVC.Model.BaseModel)">
            <summary>
            Lists all the properties of a model.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.AOPLibrary.AOPBaseClass">
            <summary>
            AOP 서비스를 위한 Base Class
            </summary>
            <reqid id="RQ-TS-BFT-002">Aspect Oriented Programming 지원</reqid>
        </member>
        <member name="M:HSF.TechSvc2010.AOPLibrary.AOPBaseClass.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.AOPLibrary.AOPBaseClass.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessageSink,System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            Sync Process message
            </summary>
            <param name="sink">IMessageSink</param>
            <param name="msg">IMessage</param>
            <returns></returns>
        </member>
        <member name="T:HSF.TechSvc2010.Common.Crypto.SymmetricAgent">
            <summary>
            SymmetricKey Class를 효율적으로 사용하기 위한 Agent입니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.SymmetricAgent.#ctor">
            <summary>
            Default Constructor입니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.SymmetricAgent.#ctor(HSF.TechSvc2010.Common.Crypto.SymmetricMode)">
            <summary>
            대칭 키 알고리즘을 위한 Constructor입니다.
            </summary>
            <param name="provider">SymmetricAlgorithm Service Provider를 지정합니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.SymmetricAgent.#ctor(HSF.TechSvc2010.Common.Crypto.SymmetricMode,System.Byte[],System.Byte[])">
            <summary>
            대칭 키 알고리즘을 위한 Constructor입니다.
            </summary>
            <param name="provider">SymmetricAlgorithm Service Provider를 지정합니다.</param>
            <param name="Key">Key를 지정합니다.</param>
            <param name="IV">IV를 지정합니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.SymmetricAgent.Dispose">
            <summary>
            사용 중인 모든 Resource를 정리합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.SymmetricAgent.Encrypt(System.String,System.Byte[],System.Byte[])">
            <summary>
            대칭 키 알고리즘으로 평문을 암호화합니다.
            </summary>
            <param name="plainText">평문을 입력합니다.</param>
            <param name="Key">Key를 지정합니다.</param>
            <param name="IV">IV를 지정합니다.</param>
            <returns>암호문을 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            using (SymmetricAgent agent = new SymmetricAgent())
            {
            	byte[] Key; // 보유하고 있는 Key 할당
            	byte[] IV; // 보유하고 있는 IV 할당
            	string cipherText = agent.Encrypt("Plaintext", Key, IV);   // 평문
            }	
            </code>
            </example>
            <remarks>
            대칭 키 알고리즘으로 지정된 키를 이용하여, 평문을 암호화합니다.
            </remarks>        
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.SymmetricAgent.Encrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            대칭 키 알고리즘으로 평문을 암호화합니다.
            </summary>
            <param name="plainText">평문을 입력합니다.</param>
            <param name="Key">Key를 지정합니다.</param>
            <param name="IV">IV를 지정합니다.</param>
            <returns>암호문을 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            using (SymmetricAgent agent = new SymmetricAgent())
            {
            	byte[] Key; // 보유하고 있는 Key 할당
            	byte[] IV; // 보유하고 있는 IV 할당
            	byte[] cipherText = agent.Encrypt("byte [] plaintext", Key, IV);   // byte[] 평문
            }
            </code>
            </example>
            <remarks>
            대칭 키 알고리즘으로 지정된 키를 이용하여, 평문을 암호화합니다.
            </remarks>        
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.SymmetricAgent.Encrypt(System.String)">
            <summary>
            대칭 키 알고리즘으로 평문을 암호화합니다.
            </summary>
            <param name="plainText"></param>
            <returns>암호문을 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            using (SymmetricAgent agent = new SymmetricAgent())
            {
            	byte[] Key; // 보유하고 있는 Key 할당
            	byte[] IV; // 보유하고 있는 IV 할당
            	string cipherText = agent.Encrypt("Plaintext", Key, IV);   // 평문
            }
            </code>
            </example>
            <remarks>
            대칭 키 알고리즘으로 평문을 암호화합니다. 사용된 대칭 키는 Property로 제공됩니다.
            </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.SymmetricAgent.Encrypt(System.Byte[])">
            <summary>
            대칭 키 알고리즘으로 평문을 암호화합니다.
            </summary>
            <param name="plainText">평문을 입력합니다.</param>
            <returns>암호문을 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            using (SymmetricAgent agent = new SymmetricAgent())
            {
            	byte[] cipherText = agent.Encrypt("byte [] plaintext");   // byte[] 평문
            }
            </code>
            </example>
            <remarks>
            대칭 키 알고리즘으로 평문을 암호화합니다. 사용된 대칭 키는 Property로 제공됩니다.
            </remarks> 
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.SymmetricAgent.Decrypt(System.String,System.Byte[],System.Byte[])">
            <summary>
            대칭 키 알고리즘으로 암호문을 복호화합니다.
            </summary>
            <param name="cipherText">암호문을 입력합니다.</param>
            <param name="Key">Key를 지정합니다.</param>
            <param name="IV">IV를 지정합니다.</param>
            <returns></returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            using (SymmetricAgnet agent = new SymmetricAgnet())
            {
            	byte[] Key; // 보유하고 있는 Key 할당
            	byte[] IV; // 보유하고 있는 IV 할당
            	string decipherText = agent.Decrypt("Ciphertext", Key, IV);  // 암호문
            }
            </code>
            </example>
            <remarks>
            대칭 키 알고리즘으로 지정된 키를 이용하여, 암호문을 평문으로 복호화합니다.
            </remarks>        
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.SymmetricAgent.Decrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            대칭 키 알고리즘으로 암호문을 복호화합니다.
            </summary>
            <param name="cipherText">byte[] 암호문을 입력합니다.</param>
            <param name="Key">Key를 지정합니다.</param>
            <param name="IV">IV를 지정합니다.</param>
            <returns></returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            using (SymmetricAgnet agent = new SymmetricAgnet())
            {
            	byte[] Key; // 보유하고 있는 Key 할당
            	byte[] IV; // 보유하고 있는 IV 할당
            	byte[] decipherText = agent.Decrypt("byte [] ciphertext", Key, IV);   // byte[] 암호문
            }
            </code>
            </example>
            <remarks>
            대칭 키 알고리즘으로 지정된 키를 이용하여, 암호문을 평문으로 복호화합니다.
            </remarks>        
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.SymmetricAgent.Decrypt(System.String)">
            <summary>
            대칭 키 알고리즘으로 암호문을 복호화합니다.
            </summary>
            <param name="cipherText">암호문을 입력합니다.</param>
            <returns></returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            using (SymmetricAgnet agent = new SymmetricAgnet())
            {
            	string decipherText = agent.Decrypt("Ciphertext");   // 암호문
            }
            </code>
            </example>
            <remarks>
            대칭 키 알고리즘으로 암호문을 평문으로 복호화합니다.
            </remarks>        
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.SymmetricAgent.Decrypt(System.Byte[])">
            <summary>
            대칭 키 알고리즘으로 암호문을 복호화합니다.
            </summary>
            <param name="cipherText">byte[] 암호문을 입력합니다.</param>
            <returns></returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            using (SymmetricAgnet agent = new SymmetricAgnet())
            {
            	byte[] decipherText = agent.Decrypt("byte [] ciphertext");   // byte[] 암호문
            }
            </code>
            </example>
            <remarks>
            대칭 키 알고리즘으로 암호문을 평문으로 복호화합니다.
            </remarks>        
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.SymmetricAgent.GetKey">
            <summary>
            SymmetricAlgorithm Key를 생성합니다.
            </summary>
            <returns>생성된 Key를 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            using (SymmetricAgnet agent = new SymmetricAgnet())
            {
            	byte[] Key = agent.GetKey();
            }
            </code>
            </example>
            <remarks>
            SymmetricAlgorithm Key를 생성합니다.
            </remarks> 
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.SymmetricAgent.GetIV">
            <summary>
            SymmetrciAlgorithm IV를 생성합니다.
            </summary>
            <returns>생성된 IV를 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            using (SymmetricAgnet agent = new SymmetricAgnet())
            {
            	byte[] AESIV = agent.GetAESIV();
            }
            </code>
            </example>
            <remarks>
            SymmetricAlgorithm IV(Initialization Vector)를 생성합니다.
            </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.SymmetricAgent.CryptoWrapper(HSF.TechSvc2010.Common.Crypto.SymmetricMode)">
            <summary>
            SymmetricKey Wrapper Class 입니다.
            </summary>
            <returns>SymmetricKey Instance를 반환합니다.</returns>
            <param name="mode">SymmetricMode 작업 모드를 지정합니다.</param>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Crypto.SymmetricAgent.CryptoType">
            <summary>
            SymmetricMode 작업 모드를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Crypto.SymmetricAgent.SAKey">
            <summary>
            현재 대칭 알고리즘의 Key를 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Crypto.SymmetricAgent.SAIV">
             <summary>
            현재 대칭 알고리즘의 IV를 가져옵니다.
             </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.Resource.IMenuManager">
            <summary>
            UI Layer에서 프로그램의 메뉴를 관리합니다. 일반적으로 Singleton으로 구현합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Resource.IMenuManager.Refresh">
            <summary>
            메뉴를 다시 가져옵니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Resource.IMenuManager.Update(System.Data.DataTable)">
            <summary>
            메뉴의 수정 내용을 서버에 적용합니다.
            </summary>
            <param name="table">수정 내용이 포함된 메뉴 테이블</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Resource.IMenuManager.GetMenuName(System.String)">
            <summary>
            제공된 메뉴의 메뉴 이름을 가져옵니다.
            </summary>
            <param name="menuId">메뉴아이디</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Resource.IMenuManager.GetMenuPrivilege(System.String)">
            <summary>
            메뉴의 현재 권한을 가져옵니다.
            </summary>
            <param name="menuId">메뉴아이디</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Resource.IMenuManager.GetLocation(System.String)">
            <summary>
            메뉴의 전체 경로 문자열을 가져옵니다.
            </summary>
            <param name="menuId">메뉴아이디</param>
            <returns></returns>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Resource.IMenuManager.CurrentCulture">
            <summary>
            현재 문화권 이름을 가져옵니다. 일반적으로 IResourceManager의 CurrentCulture 값을 가져오도록 구현합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Resource.IMenuManager.MenuTable">
            <summary>
            메뉴 테이블을 가져옵니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.Dictionary.HSFPDicManager">
            <summary>
            HSF.Framework의 자료사전을 관리하는 관리자클래스입니다.
            </summary>
            <reqid id="RQ-TS-BFT-010">국제화, 지역화 지원</reqid>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Dictionary.HSFPDicManager.ConnectionString">
            <summary>
            mssql 연결 문자열
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.PerformanceContext">
            <summary>
            Simple Performance Context for Check Performance
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.MVC.Design.ModelCodeDomSerializer">
            <summary>
            Emits special constructor for a model so that it constructs itself using the 
            containing controller as the container, not the usual private "components" field.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.FileDTLoader">
            <summary>
            File to Datatable utility
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.FileDTLoader.Load(System.Boolean,System.Char,System.String,System.String,System.Text.Encoding)">
            <summary>
            load 
            </summary>
            <param name="columnHeader">column 헤더 포함 여부</param>
            <param name="colDelimeter">컬럼 구분 문자</param>
            <param name="dir">directory</param>
            <param name="fileName">파일명</param>
            <param name="enc">인코딩</param>
            <returns></returns>
        </member>
        <member name="T:HSF.TechSvc2010.AOPLibrary.AOPConfig">
            <summary>
            AOPConfig Class
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.AOPLibrary.AOPConfig.SetAOPController(System.Type,System.Type,HSF.TechSvc2010.AOPLibrary.IMessageMatcher)">
            <summary>
            Set AOP Controller for Type
            </summary>
            <param name="classtype">target type</param>
            <param name="controllertype">controller type</param>
            <param name="matcher">function name match pattern</param>
        </member>
        <member name="M:HSF.TechSvc2010.AOPLibrary.AOPConfig.GetAOPController(System.Type)">
            <summary>
            Get AOPController 
            </summary>
            <param name="classtype"></param>
            <returns></returns>
        </member>
        <member name="T:HSF.TechSvc2010.Common.IDataItem">
            <summary>
            interface for DataItem
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.IDataItem.Clear">
            <summary>
            Clear Resource
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.IDataItem.GetXml">
            <summary>
            Report xml string for self instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.IDataItem.ContainKey(System.String)">
            <summary>
            return if [key] is contained
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.IDataItem.add(System.String,System.Object)">
            <summary>
            add item 
            </summary>
            <param name="name"> name </param>
            <param name="obj"> vlaue </param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.IDataItem.add(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            add item 
            </summary>
            <param name="name"> name </param>
            <param name="obj"> vlaue </param>
            <param name="dir">direction</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.IDataItem.add(System.String,System.Object,System.Data.ParameterDirection,System.Int32,System.Data.DbType)">
            <summary>
            add item 
            </summary>
            <param name="name"> name </param>
            <param name="obj"> vlaue </param>
            <param name="dir">direction</param>
            <param name="length">data length</param>
            <param name="type"> data type </param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.IDataItem.add(HSF.TechSvc2010.Common.DataValue)">
            <summary>
            add item
            </summary>
            <param name="val"> idatavalue </param>
        </member>
        <member name="P:HSF.TechSvc2010.Common.IDataItem.Item(System.String)">
            <summary>
            return self indexed data value (string key)
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.IDataItem.Item(System.Int32)">
            <summary>
            return self indexed data value (string key)
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.IDataItem.Count">
            <summary>
            return count of items
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.IDataItem.GUID">
            <summary>
            dataitem GUID
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.IDataItem.RootGUID">
            <summary>
            ROOT GUID
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.IDataItem.DataSet">
            <summary>
            DataSet
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.IDataItem.DataTable">
            <summary>
            DataTable
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.IDataItem.SerializationFormatForData">
            <summary>
            DataTable, DataSet의 .NET Remoting에서의 직렬화 Formater를 설정합니다. 
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.HSFServiceFormatterType">
            <summary>
            직렬화 포맷터 형식을 지정합니다.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.HSFServiceFormatterType.SOAP">
            <summary>
            SOAP으로 직렬화 합니다.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.HSFServiceFormatterType.Binary">
            <summary>
            Binary로 직렬화 합니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.Test.ResponsePacket">
            <summary>
            레코딩된 시나리오를 수행한 결과를 저장하기 위한 클래스로 HSF.Dev2010.Common.ResponsePacket의 속성만을 추가해서 만들어진 클래스
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.ResponsePacket">
            <summary>
            응답 패킷으로 
            - 브로커기반 응용프로그램서버가 COM+ 응용프로그램 실행을 완료후 결과정보 표현개체 입니다.
            ISerializable,IDisposable 인터페이스 구현
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.ResponsePacket._Success">
            <summary>
            Service 정상 처리 여부
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.ResponsePacket._errorMessage">
            <summary>
            비 정상 처리 되었을 경우, 오류메세지
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.ResponsePacket._returnScalar">
            <summary>
            단일 Return Value
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.ResponsePacket._ex">
            <summary>
            발생한 예외
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.ResponsePacket._DataItem">
            <summary>
            Output DataItem
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.ResponsePacket.#ctor">
            <summary>
            인수를 사용하지 않고 RequestPacket 클래스의 새 인스턴스를 초기화 합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.ResponsePacket.GetXml">
            <summary>
            현재 ResponsePacket의 내용을 XML String형태로 표현합니다.
            </summary>
            <returns>ResponsePakcet을 String 형태로 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.ResponsePacket.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializer를 위한 생성자로 직렬화 시 개체의 인스턴스를 초기화 합니다.
            </summary>
            <param name="si">데이터로 채울 SerializationInfo 입니다.</param>
            <param name="context">이 serialization에 대한 대상입니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.ResponsePacket.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            개체가 자체 serialization 및 deserializationㅇ르 제어할 수 있도록 합니다.
            대상 개체를 serialize하는 데 필요한 데이터로 SerializationInfo를 채웁니다.
            </summary>
            <param name="info">데이터로 채울 SerializationInfo 입니다.</param>
            <param name="context">이 serialization에 대한 대상입니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.ResponsePacket.Dispose">
            <summary>
            이 개체에서 사용하는 모든 리소스를 해제 합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.ResponsePacket.Serialize2String(HSF.TechSvc2010.Common.ResponsePacket)">
            <summary>
            개체를 지정된 포매터(기본은 BinarayFormatter)를 사용하여 문자열로 직렬화 하고 이를 다시 Base64로 인코딩한 문지열을 리턴합니다.
            </summary>
            <param name="pk"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.ResponsePacket.Serialize2XML(HSF.TechSvc2010.Common.ResponsePacket)">
            <summary>
            개체를 Serialize2String()를 통해 문자열로 만들고 
            이를 다시 XMLDocument를 생성하여 내부에 ResponsePacket Element에 담아 리턴합니다.
            </summary>
            <param name="pk"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.ResponsePacket.DeSerializeFromString(System.String)">
            <summary>
            Base64로 인코딩된 문자열에서 원본 문자열을 추출하고 이를 다시 지정된 포매터(기본은 BinarryFormatter)를 사용하여 ResponsePacket으로 복원합니다.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.ResponsePacket.DeSerializeFromXML(System.Xml.XmlDocument)">
            <summary>
            XMLDocument의 "ResponsePacket" Element에서 
            데이터를 추출하여 "DeSerializeFromString" 메소드를 호추하여 ResponsePacket을 복원합니다.
            </summary>
            <param name="doc"></param>
            <returns></returns>
        </member>
        <member name="P:HSF.TechSvc2010.Common.ResponsePacket.ServiceFormatterType">
            <summary>
            송수신 데이터의 직렬화 방식을 설정하거나 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.ResponsePacket.ResponseDataItemParameterString">
            <summary>
            전송용 OUTPUT 개체 직렬화 문자열 저장소
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.ResponsePacket.OUTPUT">
            <summary>
            출력 매개변수 개체를 설정하거나 가져옵니다.
            	- COM+ 수행후 그 결과값이 할당되어 반환됩니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.ResponsePacket.Ex">
            <summary>
            발생한 예외
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.ResponsePacket.Success">
            <summary>
            호출 성공 여부를 가져오가나 설정합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.ResponsePacket.ErrorMessage">
            <summary>
            오류 메시지를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.ResponsePacket.ReturnScalar">
            <summary>
            수행 결과 리턴값을 가져오거나 설정합니다.
            	- COM+ 메소드 실행 결과 Objec가 전달됩니다. ( Serializable 가능한 개체만 리턴되며 그렇지 않을 경우 예외가 발생합니다. )
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.ResponsePacket.CustomResultType">
            <summary>
            ORM Result 전송을 위한 필드
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.ResponsePacket.CustomResultString">
            <summary>
            ORM Result 전송을 위한 필드
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.ResponsePacket.Duration">
            <summary>
            서버의 비즈니스 로직을 수행한 총 시간을 Milliseconds로 가져오거나 설정합니다.
            이 속성은 클라이언트에서 요청하고 서버에서 수행한 결과가 넘어오기까지의 수행 시간입니다. (네트워크 타임 + 서버 수행 시간 포함입니다.)
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.ResponsePacket.ResponseTime">
            <summary>
            비즈니스 로직이 수행 완료된 시각을 설정하거나 가져옵니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Test.ResponsePacket.Copy(HSF.TechSvc2010.Common.ResponsePacket)">
            <summary>
            HSF.Dev2010.Common.ResponsePacket 클래스를 HSF.Dev2010.Common.Test.ResponsePacket 클래스로 복사합니다.
            </summary>
            <param name="pk"></param>
            <returns></returns>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Test.ResponsePacket.OUTPUT">
            <summary>
            레코딩된 시나리오 수행 결과를 저장하기위한 OUTPUT 속성 재 정의
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Test.ResponsePacket.ReturnScalar">
            <summary>
            레코딩된 시나리오 수행 결과를 저장하기위한 ReturnScalar 속성 재 정의
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Test.ResponsePacket.Ex">
            <summary>
            레코딩된 시나리오 수행 결과를 저장하기위한 Ex 속성 재 정의
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.Resource.IResourceManager">
            <summary>
            UI Layer에서 ResourceManager를 관리합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Resource.IResourceManager.CurrentCulture">
            <summary>
            현재 문화권 이름을 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Resource.IResourceManager.Dictionary">
            <summary>
            Dictionary 정보를 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Resource.IResourceManager.Menu">
            <summary>
            프로그램 메뉴를 가져옵니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.Dictionary.HSFPRM">
            <summary>
            HSF.Framework local Resource Manager
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.Dictionary.HSFPEntry">
            <summary>
            확장속성 엔트리
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.Dictionary.HSFPEntry.DicID">
            <summary>
            Dictonary ID
            </summary>
            
        </member>
        <member name="F:HSF.TechSvc2010.Common.Dictionary.HSFPEntry.Control">
            <summary>
            컨테이너 컨트롤
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Dictionary.HSFPEntry.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.Cache.ICacheStorage">
            <summary>
            데이터 캐시 저장소 인터페이스 입니다.
            </summary>
            <remarks>
            캐시 저장소를 구현하는 클래스는 반드시 ICacheStorage를 상속받아 구현해야 합니다.
            </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Cache.ICacheStorage.Add(System.String,HSF.TechSvc2010.Common.Cache.CacheValue)">
            <summary>
            캐시 저장소에 값을 추가 합니다.
            </summary>
            <param name="key">키 이름을 지정합니다.</param>
            <param name="item">값을 지정합니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Cache.ICacheStorage.Get(System.String)">
            <summary>
            캐시 저장소에 있는 요소를 가져옵니다.
            </summary>
            <param name="key">찾을 려는 키 이름을 지정합니다.</param>
            <returns>요소(CacheValue)를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Cache.ICacheStorage.ContainsKey(System.String)">
            <summary>
            캐시 저장소에 키이름이 존재하는지 검사를 합니다.
            </summary>
            <param name="key">키 이름을 지정합니다.</param>
            <returns>캐시 저장소의 키가 존재하면 true, 그렇지 않으면 false 입니다.</returns>
            <remarks>
            캐시 저장소에 키가 존재하면 true, 그렇지 않으면 false 입니다.
            </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Cache.ICacheStorage.Clear">
            <summary>
            캐시 저장소의 모든 요소를 제거 합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Cache.ICacheStorage.Remove(System.String)">
            <summary>
            캐시 저장소의 Key 요소를 제거 합니다.
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Cache.ICacheStorage.KeyList">
            <summary>
            캐시된 Key의 목록을 조회합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Cache.ICacheStorage.Count">
            <summary>
            캐시저장소에 저장된 개체의 개수
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.Cache.DefaultCache">
            <summary>
            기본 캐시 관리자 입니다.
            </summary>
            <remarks>
            - 저장 공간은 MemoryCacheStorage을 사용 합니다.
            - 기본 캐시 기간은 매분(* * * * *) 입니다.
            - 저장할 때 별도의 표현식을 입력하면 기본값은 무시 됩니다.
            기본값은  "* * * * *"로 분단위 갱신입니다.
            캐시기능을 사용하지 않을 경우 빈문자열을 설정합니다.
            Extended format syntax : <br/><br/>
            
            Minute       - 0-59 <br/>
            Hour         - 0-23 <br/>
            Day of month - 1-31 <br/>
            Month        - 1-12 <br/>
            Day of week  - 0-6 (Sunday is 0) <br/>
            Wildcards    - * means run every <br/>
            Examples: <br/>
            * * * * *    - expires every minute<br/>
            5 * * * *    - expire 5th minute of every hour <br/>
            * 21 * * *   - expire every minute of the 21st hour of every day <br/>
            31 15 * * *  - expire 3:31 PM every day <br/>
            7 4 * * 6    - expire Saturday 4:07 AM <br/>
            15 21 4 7 *  - expire 9:15 PM on 4 July <br/>
            </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Cache.DefaultCache.#ctor">
            <summary>
            인수를 사용하지 않고 TestScript 클래스의 새 인스턴스를 초기화 합니다.
            </summary>
            <remarks>
            캐쉬 갱신 주기는 매분으로 초기화 합니다.
            저장 공간은 MemoryCacheStorage로 초기화 합니다.
            </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Cache.DefaultCache.Add(System.String,System.Object)">
            <summary>
            이 개체에 요소를 등록 합니다.
            </summary>
            <param name="key">이 개체에 등록할 키 이름을 지정합니다.</param>
            <param name="item">이 개체에 저장할 정보를 지정합니다.</param>
            <exception cref="T:System.ArgumentNullException">키 이름, 저장할 정보가 null 이면 오류를 발생 합니다.</exception>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Cache.DefaultCache.Add(System.String,System.Object,System.String)">
            <summary>
            이 개체에 요소를 등록 합니다.
            </summary>
            <param name="key">이 개체에 등록할 키 이름을 지정합니다.</param>
            <param name="item">이 개체에 저장할 정보를 지정합니다.</param>
            <param name="refresh">등록한 개체의 갱신 주기를 지정합니다.</param>
            <exception cref="T:System.ArgumentNullException">키 이름, 저장할 정보가 null 이면 오류를 발생 합니다.</exception>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Cache.DefaultCache.Get(System.String)">
            <summary>
            Gets the item with the specific key
            </summary>
        </member>
        <!-- 잘못된 형식의 XML 주석은 "M:HSF.TechSvc2010.Common.Cache.DefaultCache.ContainsKey(System.String)" 멤버에 대해 무시됩니다. -->
        <member name="M:HSF.TechSvc2010.Common.Cache.DefaultCache.Clear">
            <summary>
            이 개체에 저장된 모든 요소를 삭제 합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Cache.DefaultCache.ActivateCacheStorage">
            <summary>
            CacheStorage 인스턴스를 반환 합니다.
            </summary>
            <returns>Instance of a specific CacheStorage implementation.</returns>
            <remarks>이 개체의 경우 MemoryCacheStorage 을 이용해 캐시화 하지만 재 구현을 해 다른 캐시 방법을 사용할 수 있습니다. (ex: XML 파일, Database 등등)</remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Cache.DefaultCache.Remove(System.String)">
            <summary>
            캐시 저장소의 Key 요소를 제거 합니다.
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Cache.DefaultCache.UseCache">
            <summary>
            미들웨어(BHS)사용 유무를 설정합니다. - 기본값은 true이며 false로 설정할 경우 미들웨어가 아닌 로컬에서 비즈니스를 실행합니다.
            configuration key "UseMiddleware"의 값을 "true", "false"로 설정 가능합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Cache.DefaultCache.Item(System.String)">
            <summary>
            이 개체 인덱서를 통해 캐시 값을 가져오거나 설정 합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Cache.DefaultCache.Refresh">
            <summary>
            캐시의 갱신 주기를 설정하거나 가져옵니다.
            Extended format syntax : <br/><br/>
            
            Minute       - 0-59 <br/>
            Hour         - 0-23 <br/>
            Day of month - 1-31 <br/>
            Month        - 1-12 <br/>
            Day of week  - 0-6 (Sunday is 0) <br/>
            Wildcards    - * means run every <br/>
            Examples: <br/>
            * * * * *    - expires every minute<br/>
            5 * * * *    - expire 5th minute of every hour <br/>
            * 21 * * *   - expire every minute of the 21st hour of every day <br/>
            31 15 * * *  - expire 3:31 PM every day <br/>
            7 4 * * 6    - expire Saturday 4:07 AM <br/>
            15 21 4 7 *  - expire 9:15 PM on 4 July <br/>
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Cache.DefaultCache.KeyList">
            <summary>
            캐시된 Key의 목록을 조회합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Cache.DefaultCache.Count">
            <summary>
            캐시된 Key의 개수를 조회합니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.MVC.Services.GetServiceEventHandler">
            <summary>
            Provides a means to hook to the request for a service during run-time.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.MVC.Services.GetServiceEventArgs">
            <summary>
            Arguments of a request for a service. 
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.MVC.Services.GetServiceEventArgs.ServiceType">
            <summary>
            Gets the requested service.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.MVC.Services.RuntimeSite">
            <summary>
            Provides a custom site to be used at run-time, so that components can 
            request our custom services just as if they were at design-time.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Services.RuntimeSite.#ctor(System.ComponentModel.IContainer,System.ComponentModel.IComponent,HSF.TechSvc2010.MVC.Services.GetServiceEventHandler)">
            <summary>
            Constructs the site.
            </summary>
            <param name="container">Current component container.</param>
            <param name="component">The component to associate this site with.</param>
            <param name="getServiceCallback">The handler that will provide services when asked by the component.</param>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Services.RuntimeSite.GetService(System.Type)">
            <summary>
            Passes the call for a service to the handler received in the constructor.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.HSFDTOBaseObject">
            <summary>
            DTO 의 값을 표현하는 개체의 구현을 제공합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.HSFDTOBaseObject.RejectChanges">
            <summary>
            HSFDTOBaseObject 의 변경/삭제/추가된 정보의 롤백처리
            </summary> 
        </member>
        <member name="M:HSF.TechSvc2010.Common.HSFDTOBaseObject.AcceptChanges">
            <summary>
            HSFDTOBaseObject 의 변경/삭제/추가된 정보의 확정처리
            </summary> 
        </member>
        <member name="T:HSF.TechSvc2010.Common.TestScriptBuilder">
            <summary>
            TestScript를 Visual Studio의 단위 테스트 클래스 및 메소드로 만들어 줍니다.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.TestScriptBuilder.TagStart">
            <summary>
            C#의 블럭 시작 문자열을 지정합니다.
            기본값은 { 입니다.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.TestScriptBuilder.TagEnd">
            <summary>
            C#의 블럭 종료 문자열을 지정합니다.
            기본값은 } 입니다.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.TestScriptBuilder.TagQutation">
            <summary>
            Qutation 문자열을 지정합니다.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.TestScriptBuilder.TestMethodHeader">
            <summary>
            테스트 스크립트 작성 시 사용될 Attribute 값을 지정합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.TestScriptBuilder.GenerateMethod(HSF.TechSvc2010.Common.TestScript,System.Int32,System.Boolean)">
            <summary>
            단위 테스트 클래스에서 사용될 테스트 메소드를 만듭니다.
            </summary>
            <param name="script">단위테스트 메소드를 만들 TestScript을 지정합니다.</param>
            <param name="timeOut">단위테스트 메소드를 통해 실행될 비즈니스컴포넌트의 Time Out을 지정합니다.</param>
            <param name="isParameterEditable">파라메터를 편집할 수 있는지 여부를 지정합니다. 편집할 수 있으면 true, 그렇지 않으면 false 입니다.</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.TestScriptBuilder.GenerateTestClass(System.String,System.String,HSF.TechSvc2010.Common.TestScriptCollection,System.Int32,System.Boolean)">
            <summary>
            단위 테스트 클래스를 생성합니다.
            </summary>
            <param name="nameSpace">단위 테스트 클래스의 NameSpace를 지정합니다.</param>
            <param name="className">단위 테스트 클래스 이름을 지정합니다.</param>
            <param name="testCollection">단위 테스트 안에 만들어질 TestScript 메소드 컬렉션을 지정합니다.</param>
            <param name="timeOut">단위테스트 메소드를 통해 실행될 비즈니스컴포넌트의 Time Out을 지정합니다.</param>
            <param name="isParameterEditable">파라메터를 편집할 수 있는지 여부를 지정합니다. 편집할 수 있으면 true, 그렇지 않으면 false 입니다.</param>
            <returns></returns>
        </member>
        <member name="T:HSF.TechSvc2010.Common.Crypto.SymmetricKey">
            <summary>
            대칭키 암호화 알고리즘에 관련된 기능을 제공하는 클래스입니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.SymmetricKey.#ctor(HSF.TechSvc2010.Common.Crypto.SymmetricMode)">
            <summary>
            대칭 키 알고리즘을 위한 Constructor 입니다.
            </summary>
            <param name="symmetricMode">대칭 키 알고리즘을 지정합니다.</param>
            <remarks>
            AES 알고리즘의 경우 KeySize = 256, BlockSize = 256, CipherMode.CBC, PaddingMode.PKCS7을 디폴트
            TripleDES 알고리즘의 경우 KeySize = 192, BlockSize = 64, CipherMode.CBC, PaddingMode.PKCS7을 디폴트
            </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.SymmetricKey.#ctor(HSF.TechSvc2010.Common.Crypto.SymmetricMode,System.Int32,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            대칭 키 알고리즘을 위한 Constructor 입니다.
            </summary>
            <param name="symmetricMode">대칭 키 알고리즘을 지정합니다.</param>
            <param name="keySize">대칭 알고리즘에서 사용할 비밀 키의 크기(비트단위)를 지정합니다.</param>
            <param name="blockSize">암호화 작업의 블록 크기(비트단위)를 지정합니다.</param>
            <param name="cipherMode">대칭 알고리즘의 작업 모드를 지정합니다.</param>
            <param name="padding">대칭 알고리즘에 사용될 패딩 모드를 지정합니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.SymmetricKey.CreateCipher(HSF.TechSvc2010.Common.Crypto.SymmetricMode)">
            <summary>
            SymmetricAlgorithm Class Wrapper 입니다.
            </summary>
            <param name="mode">대칭 키 알고리즘을 지정합니다.</param>
            <returns>SymmetricAlgorithm를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.SymmetricKey.Dispose">
            <summary>
            사용 중인 모든 Resource를 정리합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.SymmetricKey.CipherText(System.Byte[])">
            <summary>
            대칭 키 알고리즘을 이용하여, 평문을 암호화시킵니다.
            </summary>
            <param name="plainText">평문을 입력합니다.</param>
            <returns>암호문을 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            using (SymmetricKey crypto = new SymmetricKey(SymmetricMode.AES, 256, 256, CipherMode.CBC, PaddingMode.PKCS7))
            {
            	byte[] cipherBytes = crypto.CipherText(plainText);
            }
            </code>
            </example>
            <remarks>
            대칭 키 알고리즘을 이용하여, 평문을 암호화시킵니다. 사용된 키는 Property로 제공됩니다.
            </remarks>        
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.SymmetricKey.CipherText(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            대칭 키 알고리즘을 이용하여, 평문을 암호화시킵니다.
            </summary>
            <param name="plainText">평문을 입력합니다.</param>
            <param name="Key">Key를 지정합니다.</param>
            <param name="IV">IV를 지정합니다.</param>
            <returns>암호문을 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            using (SymmetricKey crypto = SymmetricKey(SymmetricMode.AES, 256, 256, CipherMode.CBC, PaddingMode.PKCS7))
            {
            	byte[] cipherBytes = crypto.CipherText(plainText, Key, IV);
            }
            </code>
            </example>
            <remarks>
            지정된 대칭 키로 대칭 키 알고리즘을 이용하여, 평문을 암호화시킵니다.
            </remarks>        
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.SymmetricKey.DecipherText(System.Byte[])">
            <summary>
            대칭 키 알고리즘을 이용하여, 암호문을 평문으로 반환합니다.
            </summary>
            <param name="cipherText">암호문을 입력합니다.</param>
            <returns>해독한 평문을 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            using (SymmetricKey crypto = SymmetricKey(SymmetricMode.AES, 256, 256, CipherMode.CBC, PaddingMode.PKCS7))
            {
            	byte[] decipherBytes = crypto.DecipherText(cipherText);
            }
            </code>
            </example>
            <remarks>
            대칭 키 알고리즘을 이용하여, 암호문을 복호화시킵니다. 복호화에 사용되는 키는 Property로 지정된 것을 사용합니다.
            </remarks>        
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.SymmetricKey.DecipherText(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            대칭 키 알고리즘을 이용하여, 암호문을 평문으로 반환합니다.
            </summary>
            <param name="cipherText">암호문을 입력합니다.</param>
            <param name="Key">Key를 지정합니다.</param>
            <param name="IV">IV를 지정합니다.</param>
            <returns>해독한 평문을 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            using (SymmetricKey crypto = SymmetricKey(256, 256, CipherMode.CBC, PaddingMode.PKCS7))
            {
            	byte[] decipherBytes = crypto.DecipherText(cipherText, Key, IV);
            }
            </code>
            </example>
            <remarks>
            지정된 키로 대칭 키 알고리즘을 이용하여, 암호문을 복호화시킵니다.
            </remarks>        
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.SymmetricKey.GetKey">
            <summary>
            SymmetricAlgorithm Key를 생성합니다.
            </summary>
            <returns>생성된 Key를 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            using (Cryptography crypto = Cryptography(256, 256, CipherMode.CBC, PaddingMode.PKCS7))
            {
            	byte[] Key = crypto.GetKey();
            }
            </code>
            </example>
            <remarks>
            SymmetricAlgorithm Key를 생성합니다.
            </remarks>        
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.SymmetricKey.GetIV">
            <summary>
            SymmetricAlgorithm IV를 생성합니다.
            </summary>
            <returns>생성된 IV를 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            using (Cryptography crypto = Cryptography(256, 256, CipherMode.CBC, PaddingMode.PKCS7))
            {
            	byte[] IV = crypto.GetIV();
            }
            </code>
            </example>
            <remarks>
            SymmetricAlgorithm IV(Initialization Vector)를 생성합니다.
            </remarks>        
        </member>
        <member name="P:HSF.TechSvc2010.Common.Crypto.SymmetricKey.SAKey">
            <summary>
            현재 대칭 알고리즘의 Key를 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Crypto.SymmetricKey.SAIV">
            <summary>
            현재 대칭 알고리즘의 IV를 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Crypto.SymmetricKey.SAKeySize">
            <summary>
            대칭 알고리즘에서 사용한 비밀 키의 크기(비트단위)를 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Crypto.SymmetricKey.SABlockSize">
            <summary>
            암호화 작업의 블록 크기(비트단위)를 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Crypto.SymmetricKey.SACipherMode">
            <summary>
            대칭 알고리즘의 작업 모드를 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Crypto.SymmetricKey.SAPaddingMode">
            <summary>
            대칭 알고리즘에서 사용된 패딩 모드를 가져옵니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.PoolEventsPublisher">
            <summary>
            풀이 변경 되었을 경우 발생 시킬 이벤트 게시자 입니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.PoolEventsPublisher.Changed(HSF.TechSvc2010.Common.PoolChangeKind,System.Int32,System.Object)">
            <summary>
            풀이 변경 되었을 경우 COM+ 이벤트를 발생 합니다.
            </summary>
            <param name="kind">풀이 변경 되는 종류를 지정합니다.</param>
            <param name="Count">풀의 갯수를 지정합니다.</param>
            <param name="sender">발생하는 이벤트 원본 메소드를 지정합니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.PoolEventsPublisher.Changed(System.String,System.String,System.Int32,HSF.TechSvc2010.Common.PoolChangeKind,System.Int32,System.Object)">
            <summary>
            풀이 변경 되었을 경우 COM+ 이벤트를 발생 합니다.
            </summary>
            <param name="MachineName">컴퓨터 이름을 지정합니다.</param>
            <param name="ProcessName">프로세스 (Worker Process) 이름을 지정합니다.</param>
            <param name="ProcessID">프로세스 아이디를 지정합니다.</param>
            <param name="kind">풀이 변경 되는 종류를 지정합니다.</param>
            <param name="Count">풀의 갯수를 지정합니다.</param>
            <param name="sender">발생하는 이벤트 원본 메소드를 지정합니다.</param>
        </member>
        <member name="T:HSF.TechSvc2010.MVC.Design.DesignUtils">
            <summary>
            Contains utility methods for type loading and reflection.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Design.DesignUtils.LoadPrivateType(System.String)">
            <summary>
            Loads a type that is not declared as public (internal or private for example.
            </summary>
            <param name="className">The qualified name of the type to load.</param>
            <returns>The loaded type.</returns>
            <exception cref="T:System.Reflection.ReflectionTypeLoadException">The received type couldn't be loaded.</exception>
            <example>
            The following code loads the private type associated with properties which are extended 
            at design-time by <see cref="T:System.ComponentModel.IExtenderProvider"/> components:
            <code>
            	Type prop = DesignUtils.LoadPrivateType("System.ComponentModel.ExtendedPropertyDescriptor,System");
            </code>
            </example>
            <remarks>
            Use this feature sparingly because changes in the underlying .NET Framework implementation 
            may turn working code into failing one!
            </remarks>
        </member>
        <member name="F:HSF.TechSvc2010.MVC.Design.DesignUtils.ProviderProperty">
            <summary>
            Provides access to the hidden type property that allows us to access the actual 
            component providing a property, in case the edition is taking place from 
            within the control Property Browser.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.AOPLibrary.AOPProperty.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.AOPLibrary.AOPProperty.System#Runtime#Remoting#Contexts#IContextProperty#Freeze(System.Runtime.Remoting.Contexts.Context)">
            <summary>
            freeze
            </summary>
            <param name="ctx">context</param>
        </member>
        <member name="P:HSF.TechSvc2010.AOPLibrary.AOPProperty.System#Runtime#Remoting#Contexts#IContextProperty#Name">
            <summary>
            Name "AOP"
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.Test.IHSFTestSupport">
            <summary>
            HSF TestSupport 인터페이스
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Test.IHSFTestSupport.GetTestCallStack(System.Guid)">
            <summary>
            Get Call Stack
            </summary>
            <param name="ContextID"></param>
            <returns></returns>
        </member>
        <member name="T:HSF.TechSvc2010.Common.CountChangedHandler">
            <summary>
            풀의 갯수가 변경 되었을 경우 처리할 대리자를 정의 합니다.
            </summary>
            <param name="Count">변경된 풀의 갯수를 지정합니다.</param>
        </member>
        <member name="T:HSF.TechSvc2010.Common.PoolManager`1">
            <summary>
            풀을 관리 합니다.
            </summary>
            <typeparam name="Context">IContext Interface를 지정합니다.</typeparam>
            <remarks>
            Context는 IContext 인터페이스를 구현한 클래스만 사용이 가능합니다.
            </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Common.PoolManager`1.RasePublicEvents(HSF.TechSvc2010.Common.PoolChangeKind,System.Int32,System.Object)">
            <summary>
            풀 변경 시 COM+ 이벤트로 게시를 합니다.
            </summary>
            <param name="kind">풀 변경 종류를 지정합니다.</param>
            <param name="cnt">현재 풀의 갯수를 지정합니다.</param>
            <param name="sender">발생하는 이벤트 원본 메소드를 지정합니다.</param>
        </member>
        <member name="F:HSF.TechSvc2010.Common.PoolManager`1.Pool">
            <summary>
            전체 컨텍스트 풀을 정의 합니다.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.PoolManager`1.WorkingPool">
            <summary>
            동작중인 컨텍스트 풀을 정의 합니다.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.PoolManager`1.MaxPoolSize">
            <summary>
            최대 풀 사이즈를 정의 합니다. (기본값은 1000 입니다.)
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.PoolManager`1.MinPoolSize">
            <summary>
            최소 풀 사이즈를 정의 합니다. (기본값은 50 입니다.)
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.PoolManager`1.IncPoolSize">
            <summary>
            증가 풀 사이즈를 정의 합니다. (기본값은 20 입니다.)
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.PoolManager`1.DecPoolSize">
            <summary>
            감소 풀 사이즈를 정의 합니다. (기본값은 20 입니다.)
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.PoolManager`1.CheckPool(System.Object)">
            <summary>
            현재 풀의 생태를 검사합니다.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.PoolManager`1.#cctor">
            <summary>
            PollManager 클래스의 새 인스턴스를 초기화 합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.PoolManager`1.InitalPool">
            <summary>
            최초 개체가 생성되면 MinPoolSize 만큼 Context를 초기화 합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.PoolManager`1._IncreaseWorker(System.Int32)">
            <summary>
            컨텍스트 증가 합니다.
            </summary>
            <param name="Degree">증가 시킬 갯수를 지정합니다.</param>
            <returns>증가 성공 여부를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.PoolManager`1._DecreaseWorker(System.Int32)">
            <summary>
            컨텍스트 감소
            </summary>
            <param name="Degree">개수</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.PoolManager`1.GetContext">
            <summary>
            현재 컨텍스트 반환합니다.
            </summary>
            <returns>현재 컨텍스트를 반환합니다.</returns>
            <remarks>
            컨텍스트를 반환 하면서 사용 가능한 풀, 사용중인 풀 이벤트를 발생합니다.
            </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Common.PoolManager`1.client_Completed(System.Guid)">
            <summary>
            Completed 호출시 자동으로 다시 풀로 컨텍스트를 보냅니다.
            - 내부적으로 SaveToPool() 
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.PoolManager`1.SaveToPool(System.Guid)">
            <summary>
            컨텍스트의 CanbePooled = true로 설정하고 풀로 반환 합니다.
            </summary>
            <param name="context">반환할 Context GUID를 지정합니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.PoolManager`1.CreateContext">
            <summary>
            컨텍스트 개체를 생성합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="P:HSF.TechSvc2010.Common.PoolManager`1.PublishEventFlag">
            <summary>
            COM+ 이벤트로 발생 할 지 여부를 설정하거나 가져옵니다.
            </summary>
        </member>
        <member name="E:HSF.TechSvc2010.Common.PoolManager`1.AblePoolChanged">
            <summary>
            사용가능 Context 개수 변화할 때 발생하는 이벤트 입니다.
            </summary>
        </member>
        <member name="E:HSF.TechSvc2010.Common.PoolManager`1.WorkerPoolChanged">
            <summary>
            사용중인 Context 개수 변화할 때 발생하는 이벤트 입니다.
            </summary>
        </member>
        <member name="E:HSF.TechSvc2010.Common.PoolManager`1.TotalPoolChanged">
            <summary>
            총 Context 개수변화할 때 발생하는 이벤트 입니다.
            </summary>
        </member>
        <member name="E:HSF.TechSvc2010.Common.PoolManager`1.ContextCreated">
            <summary>
            Context 신규 생성될 때 발생하는 이벤트 입니다.
            </summary>
        </member>
        <member name="E:HSF.TechSvc2010.Common.PoolManager`1.ContextDeque">
            <summary>
            컨텍스트 제거 될 때 발생하는 이벤트 입니다.
            </summary>
        </member>
        <member name="E:HSF.TechSvc2010.Common.PoolManager`1.ContextEnque">
            <summary>
            컨텍스트 추가 될 때 발생하는 이벤트 입니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.PoolManager`1.Count">
            <summary>
            현재 풀의 갯수를 가져오거나 설정합니다.
            </summary>
            <remarks>
            풀의 갯수를 설정하게 되면 COM+ 이벤트를 발생 시킵니다.
            </remarks>
        </member>
        <member name="P:HSF.TechSvc2010.Common.PoolManager`1.AbleCount">
            <summary>
            현재 사용 가능한 풀의 갯수를 가져오거나 설정합니다.
            </summary>
            <remarks>
            현재 사용 가능한 풀이 변경 되면 COM+ 이벤트를 발생 시킵니다.
            </remarks>
        </member>
        <member name="P:HSF.TechSvc2010.Common.PoolManager`1.WorkingCount">
            <summary>
            현재 사용 중인 풀의 갯수를 가져오거나 설정합니다.
            </summary>
            <remarks>
            현재 사용 중인 풀의 변경 되면 COM+ 이벤트를 발생 시킵니다.
            </remarks>
        </member>
        <member name="T:HSF.TechSvc2010.Common.PoolManager`1.ContextIOHandler">
            <summary>
            풀이 생성 되거나 제거 되거나 할 때 처리할 대리자 입니다.
            </summary>
            <param name="context">생성되거나 제거 될때의 Context를 지정합니다.</param>
        </member>
        <member name="T:HSF.TechSvc2010.Common.Crypto.HashAgent">
            <summary>
            해시알고리즘을 이용해 Text를 해쉬 값으로 반환하는 클래스
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.HashAgent.GetHash(System.Byte[],System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Text에 대한 Hash 값을 반환합니다.
            </summary>
            <param name="byteText">Hash를 얻기 위한 Text를 입력합니다.</param>
            <param name="hashAlgorithm">Hash 알고리즘을 지정합니다.</param>
            <returns>Hash 값을 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            	byte[] hashBytes = HashAgent.GetHash(System.Text.Encoding.Default.GetBytes("String"), new SHA1Managed());   // 문자열
            </code>
            </example>
            <remarks>
            Hash Algorithm은 System.Security.Cryptography에서 제공되는 것을 사용합니다.
            </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.HashAgent.GetHash(System.String,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Text에 대한 Hash 값을 반환합니다.
            </summary>
            <param name="plainText">Hash를 얻기 위한 Text를 입력합니다.</param>
            <param name="hashAlgorithm">Hash 알고리즘을 지정합니다.</param>
            <returns>Hash 값을 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            	byte[] hashBytes = HashAgent.GetHash("String", new SHA1Managed());   // 문자열
            </code>
            </example>
            <remarks>
            Hash Algorithm은 System.Security.Cryptography에서 제공되는 것을 사용합니다.
            </remarks>
        </member>
        <member name="T:HSF.TechSvc2010.Common.WorkingStatus">
            <summary>
            비즈니스 컴포너트가 실행 되는 상태 형태를 정의 합니다.
            - Working State - init, Working, Complteted, Error
            - It is used on Monitering or Events
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.WorkingStatus.Init">
            <summary>
            초기화
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.WorkingStatus.Working">
            <summary>
            동작중
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.WorkingStatus.Completed">
            <summary>
            성공적 완료 - 예외없이 호출성공함.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.WorkingStatus.End">
            <summary>
            호출 종료 - 예외와 관련없이 종료됨을 의미함
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.WorkingStatus.Error">
            <summary>
            오류 발생 - 예외 발생 상태
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.TestScript">
            <summary>
            비즈니스 컴포넌트를 실행할때 하나의 요청에 대한 Script 저장 클래스입니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.TestScript.#ctor">
            <summary>
            인수를 사용하지 않고 TestScript 클래스의 새 인스턴스를 초기화 합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.TestScript.#ctor(System.Int32,HSF.TechSvc2010.Common.RequestPacket,HSF.TechSvc2010.Common.ResponsePacket)">
            <summary>
            행, RequesetPacket, ResponsePacket 정보로 TestScript 클래스의 새 인스턴스를 초기화 합니다.
            </summary>
            <param name="row">행을 지정합니다.</param>
            <param name="request">RequestPacket을 지정합니다.</param>
            <param name="response">ResponsePacket을 지정합니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.TestScript.ExportToTestScript">
            <summary>
            TestScript를 Export 합니다.
            </summary>
            <remarks>
            구형 되어 있지 않습니다.
            </remarks>
            <returns></returns>
        </member>
        <member name="P:HSF.TechSvc2010.Common.TestScript.Row">
            <summary>
            저장된 스크립트의 행을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.TestScript.ServiceName">
            <summary>
            실행할 비즈니스 컴포넌트 정보를 가져오거나 설정합니다.
            </summary>
            <remarks>
            ServiceName은 클래스 이름, 메소드 이름의 실행할 비즈니스 컴포넌트 전제 이름 입니다.
            </remarks>
        </member>
        <member name="P:HSF.TechSvc2010.Common.TestScript.Client">
            <summary>
            RequestPacket에서 요청한 클라이언트 IP Address 정보를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.TestScript.UserID">
            <summary>
            RequestPacket에서 요청한 사용자 ID 정보를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.TestScript.Request">
            <summary>
            RquestPacket 정보를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.TestScript.Response">
            <summary>
            ResponsePacket 정보를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.HSFConfigKeyHandler">
            <summary>
            HSFConfig 구성 섹션에 대한 구성 시스템 지원 기능을 제공합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.HSFConfigKeyHandler.#ctor">
            <summary>
            인수를 사용하지 않고 HSFConfigKeyHandler 클래스의 새 인스턴스를 초기화 합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.HSFConfigKeyHandler.#ctor(System.String)">
            <summary>
            암호화할 키를 지정하여 HSFConfigKeyHandler 클래스의 새 인스턴스를 초기화 합니다.
            </summary>
            <param name="key">암호화할 키를 지정합니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.HSFConfigKeyHandler.GenNewKeyIV">
            <summary>
            암호화에 사용할 키와 백터를 신규로 생성합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.HSFConfigKeyHandler.Key">
            <summary>
            AppSetting에서 사용하는 Config의 값을 암호화 할 때 사용하는 키 값을 설정하거나 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.HSFConfigKeyHandler.IV">
            <summary>
            AppSetting에서 사용하는 Config의 값을 암화할 할 때 사용하는 백터 값을 설정하거나 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.HSFConfigKeyHandler.ReadCacheInterval">
            <summary>
            AppSetting에 지정된 Config 값을 갱신할 주기를 설정하거나 가져옵니다. (단위는 mllisecond 입니다.)
            </summary>
            <remarks>
            기본 값은 60000 으로 1분 입니다.
            </remarks>
        </member>
        <member name="T:HSF.TechSvc2010.Common.Cache.MemoryCacheStorage">
            <summary>
            메모리 캐시 저장소 입니다.
            </summary>
            <remarks>
            - 캐시 데이터를 Hashtable을 사용하여 메모리내에 저장을 합니다.
            - 응용프로그램이 다시시작할 경우 캐시정보가 모두 초기화 됩니다.
            </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Cache.MemoryCacheStorage.Add(System.String,HSF.TechSvc2010.Common.Cache.CacheValue)">
            <summary>
            캐시 저장소에 값을 추가 합니다.
            </summary>
            <param name="key">키 이름을 지정합니다.</param>
            <param name="item">값을 지정합니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Cache.MemoryCacheStorage.Get(System.String)">
            <summary>
            캐시 저장소에 있는 요소를 가져옵니다.
            </summary>
            <param name="key">찾을 려는 키 이름을 지정합니다.</param>
            <returns>요소(CacheValue)를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Cache.MemoryCacheStorage.ContainsKey(System.String)">
            <summary>
            캐시 저장소에 키이름이 존재하는지 검사를 합니다.
            </summary>
            <param name="key">키 이름을 지정합니다.</param>
            <returns>캐시 저장소의 키가 존재하면 true, 그렇지 않으면 false 입니다.</returns>
            <remarks>
            캐시 저장소에 키가 존재하면 true, 그렇지 않으면 false 입니다.
            </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Cache.MemoryCacheStorage.Clear">
            <summary>
            캐시 저장소의 모든 요소를 제거 합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Cache.MemoryCacheStorage.Remove(System.String)">
            <summary>
            캐시 저장소의 Key 요소를 제거 합니다.
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Cache.MemoryCacheStorage.KeyList">
            <summary>
            캐시된 Key의 목록을 조회합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Cache.MemoryCacheStorage.Count">
            <summary>
            캐시된 Key의 개수를 조회합니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.GZipUtil">
            <summary>
            gzip 압축 관련 유틸리티 클래스입니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.GZipUtil.ZipByte(System.Byte[])">
            <summary>
            byte 배열의 데이터를 압축 하여 다시 byte 배열로 반환합니다.
            </summary>
            <example>
                <code>
                    byte[] data = null;
                    byte[] inbyt = null;
                    
                    if (obj is DataSet)
                    {
                        ((DataSet)obj).RemotingFormat = SerializationFormat.Binary;
                    }
                    IFormatter bf = FormatterFactory.CreateFormatter(ServiceFormatterType);
                    using (MemoryStream ms = new MemoryStream())
                    {
                        bf.Serialize(ms, obj);
                        inbyt = ms.ToArray();
                    }
                    if (gZip)
                    {
                        data = GZipUtil.ZipByte(inbyt);
                    }
                    else
                    {
                        data = inbyt;
                    }
                </code>
            </example>
            <param name="inbyt">압축할 byte 배열 데이터 입니다.</param>
            <returns>압축한 byte 배열 데이터 입니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.GZipUtil.UnZipByte(System.Byte[])">
             <summary>
             압축된 byte 배열의 데이터를 압축 해제 한 후 byte 배열로 반환합니다.
             </summary>
             <param name="byteArray">압축 해제를 위한 byte 배열 데이터 입니다.</param>
             <returns>압축 해제된 byte 배열 데이터 입니다.</returns>
             <example>
                 <code>
                     IFormatter bf = null;
                     MemoryStream ms = null;
                     object item = null;
                     byte[] buffer = null;
            
                     try
                     {
                         buffer = Convert.FromBase64String(data);
                         buffer = GZipUtil.UnZipByte(buffer);
                         using (ms = new MemoryStream())
                         {
                             bf = FormatterFactory.CreateFormatter(ServiceFormatterType);
                             ms.Write(buffer, 0, buffer.Length);
                             ms.Position = 0;
                             item = bf.Deserialize(ms);
                         }
                     }
                     catch (Exception ex)
                     {
                         throw;
                     }
                     finally
                     {
                         if (bf != null) { bf = null; }
                         if (buffer != null) { buffer = null; }
                     }
                 </code>
             </example>
        </member>
        <!-- 잘못된 형식의 XML 주석은 "M:HSF.TechSvc2010.Common.GZipUtil.ReadFullStream(System.IO.Stream)" 멤버에 대해 무시됩니다. -->
        <member name="T:HSF.TechSvc2010.Common.DataItemRowCollection">
            <summary>
             DataItem의 Collection 개체 입니다.
            </summary>
            <example>
             <code>
                 // DataItem Collection 생성
                 DataItemRowCollection items = new DataItemRowCollection();
            
                 // DataItem Collection에 DataItem 추가
                 items.Add(new DataItem());
                 items.Add(new DataItem());
            
                 // DataItem Collection에서 DataItem 가져오기
                 DataItem item = items[0];
            
                 // DataItem Collection의 DataItem 수 가져오기
                 int count = items.Count;
            
                 // DataItem Collection의 Clear
                 items.Clear();
             </code>
            </example>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItemRowCollection.#ctor">
            <summary>
            인수를 사용하지 않고 DataItemRowCollection 클래스의 새 인스턴스를 초기화 합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItemRowCollection.Add(HSF.TechSvc2010.Common.DataItem)">
            <summary>
            이 개체에 DataItem을 추가 합니다.
            </summary>
            <param name="row">추가할 DataItem 입니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItemRowCollection.Clear">
            <summary>
            이 개체에 포함된 DataItem을 Clear 합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItemRowCollection.Dispose">
            <summary>
            이 개체에서 사용하는 모든 리소스를 해제 합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItemRowCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializer를 위한 생성자로 직렬화 시 개체의 인스턴스를 초기화 합니다.
            </summary>
            <param name="si">데이터로 채울 SerializationInfo 입니다.</param>
            <param name="context">이 serialization에 대한 대상입니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItemRowCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            개체가 자체 serialization 및 deserializationㅇ르 제어할 수 있도록 합니다.
            대상 개체를 serialize하는 데 필요한 데이터로 SerializationInfo를 채웁니다.
            </summary>
            <param name="info">데이터로 채울 SerializationInfo 입니다.</param>
            <param name="context">이 serialization에 대한 대상입니다.</param>
        </member>
        <member name="P:HSF.TechSvc2010.Common.DataItemRowCollection.Item(System.Int32)">
            <summary>
            DataItemRowCollection 인덱서로 Index를 통해 DataItem 을 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.DataItemRowCollection.Count">
            <summary>
            이 개체에 포함된 DataItem의 개수를 가져옵니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.TestScriptChangeHandle">
            <summary>
            TestScript 변경 시 이벤트를 처리할 메서드를 나타냅니다.
            </summary>
            <param name="script">추가 되거나 혹은 삭제 되는 TestScript를 지정합니다.</param>
            <param name="sender">이벤트 소스로 TestScriptCollection을 지정합니다.</param>
        </member>
        <member name="T:HSF.TechSvc2010.Common.TestScriptCollection">
            <summary>
            TestScript에 대한 컬렉션을 나타냅니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.TestScriptCollection.Clear">
            <summary>
            TestScriptCollection의 ArrayList에서 요소를 모두 제거합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.TestScriptCollection.Add(HSF.TechSvc2010.Common.TestScript)">
            <summary>
            TestScript를 이 개체에 추가 합니다.
            </summary>
            <param name="script">추가하 TestScript를 지정합니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.TestScriptCollection.Remove(HSF.TechSvc2010.Common.TestScript)">
            <summary>
            이 개체에서 TestScript를 제거 합니다.
            </summary>
            <param name="script">제거할 TestScript를 지정합니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.TestScriptCollection.RemoveAt(System.Int32)">
            <summary>
            이 개체의 지정한 인텍스에서 요소를 제거합니다.
            </summary>
            <param name="index">제거할 요소의 0부터 시작하는 인텍스 입니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.TestScriptCollection.SaveToFile(System.String,HSF.TechSvc2010.Common.TestScriptCollection)">
            <summary>
            TestScriptCollection을 파일로 저장합니다.
            </summary>
            <param name="FileFullPath">저장할 파일 전체 이름을 지정합니다.</param>
            <param name="testcollection">저장할 TestScriptCollection을 지정합니다.</param>
            <remarks>
            파일을 저장할 때는 XML 문서로 저장됩니다.
            오류 발생 시 오류를 무시 합니다.
            </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Common.TestScriptCollection.ExportTestScript(HSF.TechSvc2010.Common.TestScriptCollection)">
            <summary>
            TestScriptCollection을 Export 합니다.
            </summary>
            <param name="testCollection">Export할 TestScriptCollection을 지정합니다.</param>
            <returns></returns>
            <remarks>
            구현 되어 있지 않습니다.
            </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Common.TestScriptCollection.LoadFromFile(System.String)">
            <summary>
            TestScriptCollection을 지정할 파일에서 읽어 TestScriptCollection 개체로 변환 합니다.
            </summary>
            <param name="FileFullPath">읽을 파일을 지정합니다.</param>
            <returns>파일을 읽어 TestScriptCollection으로 반환합니다.</returns>
            <remarks>
            에러 발생 시 무시 합니다.
            </remarks>
        </member>
        <member name="E:HSF.TechSvc2010.Common.TestScriptCollection.ScriptAdded">
            <summary>
            TestScript가 추가 될 때 발생하는 이벤트 입니다.
            </summary>
        </member>
        <member name="E:HSF.TechSvc2010.Common.TestScriptCollection.ScriptRemoved">
            <summary>
            TestScript가 제거 될 때 발생하는 이벤트 입니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.TestScriptCollection.Instance">
            <summary>
            TestScriptCollection 접근 개체를 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.TestScriptCollection.Count">
            <summary>
            이 개체에 실제로 포함된 요소의 수를 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.TestScriptCollection.TestList">
            <summary>
            이 개체의 저장된 TestScript 개체 리스트를 ArrrayList로 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.TestScriptCollection.TssResponseObjectSaveFG">
            <summary>
            완료된 항목 자동 삭제 시 삭제주기(Interval)을 설정합니다. - 기본값은 30 입니다.
            configuration key "MoniterAutoRemoveInterval"의 값을 "10", "30" 등으로 설정 가능합니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.HIS.MessageType">
            <summary>
            메시지 UI 타입
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.HIS.MessageType.MSG_TYPE_ERROR">
            <summary>
            시스템 또는 업무상 오류를 알려주는 메시지 UI타입이다
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.HIS.MessageType.MSG_TYPE_INFORMATION">
            <summary>
            일반 정보성 메시지 UI타입이다
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.HIS.MessageType.MSG_TYPE_EXCLAMATION">
            <summary>
            유효성 체크 등 사용자에게 주의/경고를 알려주는 메시지 UI 타입
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.HIS.MessageType.MSG_TYPE_QUESTION">
            <summary>
            사용자에게 선택을 의뢰하는 메시지 UI 타입이다
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.HIS.MsgBoxButton">
            <summary>
            메시지 상자에 표시되는 단추를 지정합니다.Overload:System.Windows.MessageBox.Show 메서드의 인수로 사용됩니다.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.HIS.MsgBoxButton.OK">
            <summary>
            메시지 상자에 확인 단추가 표시됩니다.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.HIS.MsgBoxButton.OKCancel">
            <summary>
            메시지 상자에 확인 및 취소 단추가 표시됩니다.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.HIS.MsgBoxButton.YesNoCancel">
            <summary>
            메시지 상자에 예, 아니요 및 취소 단추가 표시됩니다.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.HIS.MsgBoxButton.YesNo">
            <summary>
            메시지 상자에 예 및 아니요 단추가 표시됩니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.HIS.ButtonFocusType">
            <summary>
            MsgBox의 초기 포커스를 지정할 단추의 상수를 지정 합니다. 
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.HIS.ButtonFocusType.None">
            <summary>
            기본값으로 확인 단추 입니다.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.HIS.ButtonFocusType.OK">
            <summary>
            메시지 상자의 확인 단추 입니다.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.HIS.ButtonFocusType.YES">
            <summary>
            메시지 상자의 예 단추 입니다.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.HIS.ButtonFocusType.NO">
            <summary>
            메시지 상자의 아니오 단추 입니다.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.HIS.ButtonFocusType.Cancel">
            <summary>
            메시지 상자의 취소 단추입니다.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.HIS.ButtonFocusType.OKDetail">
            <summary>
            예외 발생시 상세 내용을 보여 줍니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.HIS.HISException">
            <summary>
            HIS 응용 프로그램 오류가 발생할 때 throw되는 예외입니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.HIS.HISException.#ctor">
            <summary>
            HISBaseException 클래스의 새 인스턴스를 초기화합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.HIS.HISException.#ctor(System.String)">
            <summary>
            HISBaseException 클래스의 새 인스턴스를 초기화합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.HIS.HISException.#ctor(System.String,System.Exception)">
            <summary>
            HISBaseException 클래스의 새 인스턴스를 초기화합니다.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.HIS.HISException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            HISBaseException 클래스의 새 인스턴스를 초기화합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.HIS.HISException.#ctor(System.String,System.Int32,System.String,System.String,System.String,System.String,HSF.TechSvc2010.Common.HIS.MessageType,System.Boolean,System.String,HSF.TechSvc2010.Common.HIS.MsgBoxButton,System.Nullable{System.Int32},HSF.TechSvc2010.Common.HIS.ButtonFocusType)">
            <summary>
            
            </summary>
            <param name="MsgText">에러 상수 메시지 ID</param>
            <param name="HISErrorCode">HIS 사용자 정의 예외 코드</param>
            <param name="HISSource">에러 위치(소스)</param>
            <param name="SqlType">SQL 유형</param>
            <param name="SqlCode">SQL 에러 코드</param>
            <param name="SqlErrrm">SQL 에러 메시지</param>
            <param name="messageType">메시지 타입</param>
            <param name="modalYN">모달여부</param>
            <param name="caption">팝업 제목</param>
            <param name="messageButton">메시지박스버튼</param>
            <param name="TimeSpan">메시지 소멸 시간</param>
            <param name="buttonFocus">버튼 포커스</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.HIS.HISException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
              HISBaseException 개체를 serialize하는 데 필요한 데이터로 System.Runtime.Serialization.SerializationInfo를 채웁니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.HIS.HISException.HasUseDefine">
            <summary>
            사용자 정의 에러 입니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.HIS.HISException.UseDefineCode">
            <summary>
            사용자 정의 에러 코드 입니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.HIS.HISException.MessageInfo">
            <summary>
            메시지 대화상자를 표시할 정보를 가져오거나 설정 합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.HIS.HISException.OraInfo">
            <summary>
            오라클 에러 메시지 정보를 가져 옵니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.HIS.MessageInfo">
            <summary>
            메시지 대화상자 정보 입니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.HIS.MessageInfo.CAPTION">
            <summary>
            메시지 대화상자의 제목 를 가져오거나 설정 합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.HIS.MessageInfo.MODALYN">
            <summary>
            메시지 대화상자를 Model로 표시할지 여부를 설정 합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.HIS.MessageInfo.MSGTYPE">
            <summary>
            메시지 대화상자의 유형입니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.HIS.MessageInfo.MSGBOXBUTTON">
            <summary>
            메시지 상자에 표시되는 단추를 지정합니다.Overload:System.Windows.MessageBox.Show 메서드의 인수로 사용됩니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.HIS.MessageInfo.TIMESPAN">
            <summary>
            대화상자가 자동으로 닫기는 시간을 설정 합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.HIS.MessageInfo.BUTTONFOCUSTYPE">
            <summary>
            버튼의 포커스를 결정 합니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.HIS.OraInfo">
            <summary>
            오라클 에러 메시지를 표시합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.HIS.OraInfo.SQLTYPE">
            <summary>
            SQL 유형
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.HIS.OraInfo.SQLCODE">
            <summary>
            SQL 에러 코드
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.HIS.OraInfo.SQLERRM">
            <summary>
            SQL 에러 메시지
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.HIS.OraInfo.SOURCE">
            <summary>
            에러 위치(소스)
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.HIS.OraInfo.Number">
            <summary>
            오라클 에러 넘버
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.HIS.OraInfo.Procedure">
            <summary>
            프로시저 명
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.HIS.OraInfo.DataSource">
            <summary>
            데이타베이스
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.HIS.HISMessageHelper">
            <summary>
            응용프로그램 오류 메시지 처리와 관련된 일반적인 작업을 수행하는 유틸리티 메서드를 제공합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.HIS.HISMessageHelper.GetMessage(System.String,System.Exception)">
            <summary>
            응용프로그램 오류로 부터 메시지를 가져옵니다.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <returns></returns>
        </member>
        <member name="T:HSF.TechSvc2010.Common.SerilizeUtil">
            <summary>
            Conversion Regercy Object to .NET Managed Objects for Serilize or Deserilize
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.SerilizeUtil.Serialize2Base64String(System.Object)">
            <summary>
            개체를 지정된 포매터(기본은 BinarayFormatter)를 사용하여 직렬화합니다.
            직렬화 된 데이터를 GZipStream을통해 압축합니다.
            압축된 스트림을 Text저장이 가능한 Base64 Encoding을 한 문자열을 반환합니다.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.SerilizeUtil.Serialize2String(System.Object)">
            <summary>
            개체를 지정된 포매터(기본은 BinarayFormatter)를 사용하여 문자열로 직렬화 합니다.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.SerilizeUtil.Serialize2XML(System.Object)">
            <summary>
            개체를 Serialize2String()를 통해 문자열로 만들고 
            이를 다시 XMLDocument를 생성하여 내부에 DataItem Element에 담아 리턴합니다.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.SerilizeUtil.DeSerializeFromBase64String(System.String)">
            <summary>
            Base64로 인코딩된 데이터에서 Object를 복원합니다. ( 압축된 스트림 )
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.SerilizeUtil.DeSerializeFromString(System.String)">
            <summary>
            지정된 포매터(기본은 BinarryFormatter)를 사용하여 object로 복원합니다.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.SerilizeUtil.DeSerializeFromXML(System.Xml.XmlDocument)">
            <summary>
            XMLDocument의 "DataItem" Element에서 
            데이터를 추출하여 "DeSerializeFromString" 메소드를 호추하여 DataItem을 복원합니다.
            </summary>
            <param name="doc"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.SerilizeUtil.Serialize2Byte(System.Object,System.Boolean)">
            <summary>
            개체를 지정된 포매터(기본은 BinarayFormatter)를 사용하여 직렬화합니다.
            직렬화 된 데이터를 GZipStream을통해 압축합니다.
            스트림을 byte array로 반환합니다.
            </summary>
            <param name="obj">Serialize 할 개체를 지정합니다.</param>
            <param name="gZip">압축을 할 것이지 여부를 지정합니다.</param>
            <returns>스트림을 Byte Array로 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.SerilizeUtil.DeSerializeFromByte(System.Byte[],System.Boolean)">
            <summary>
            Byte Array의 데이터를 역 직렬화하여 개체로 반환합니다.
            </summary>
            <param name="buffer">역 직렬화할 Byte Array를 지정합니다.</param>
            <param name="gZip">압축되어 있는지 여부를 지정합니다.</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.SerilizeUtil.BinarySerializeToString(System.Object)">
            <summary>
            Serilize to string
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.SerilizeUtil.BinarySerialize(System.Object)">
            <summary>
            개체를 바이트로 직렬화합니다.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.SerilizeUtil.BinaryDeSerializeFromString(System.String)">
            <summary>
            Deserilize from string
            </summary>
            <param name="serializedObject"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.SerilizeUtil.BinaryDeSerialize(System.Byte[])">
            <summary>
            직렬화된 바이트에서 개체로 복원합니다.
            </summary>
            <param name="serializedObject"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.SerilizeUtil.Serialize(System.Object)">
            <summary>
            SoapFormatter를 이용해 item 개체를 XmlDocument로 반환 합니다.
            </summary>
            <param name="item">Soapformatter에 의해 XMLDocument로 반환할 DataItem을 지정합니다.</param>
            <returns>DataItem이 XMLDocument로 반환 횝니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.SerilizeUtil.Serialize(System.Object,System.Text.Encoding)">
            <summary>
            SoapFormatter를 이용해 item 개체를 string으로 반환 합니다.
            </summary>
            <param name="item">Soapformatter에 의해 XMLDocument로 반환할 DataItem을 지정합니다.</param>
            <param name="encodingType">직렬화에 사용할 인코딩입니다.</param>
            <returns>DataItem이 XMLDocument로 반환 횝니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.SerilizeUtil.Deserialize(System.String)">
            <summary>
            deserilize  from xml node, encoding
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.SerilizeUtil.Deserialize(System.String,System.Text.Encoding)">
            <summary>
            deserilize  from xml node, encoding
            </summary>
            <param name="input"></param>
            <param name="encodingType"></param>
            <returns></returns>
        </member>
        <member name="P:HSF.TechSvc2010.Common.SerilizeUtil.ServiceFormatterType">
            <summary>
            송수신 데이터의 직렬화 방식을 설정하거나 가져옵니다. (기본 값은 FXServiceFormatterType.Binary 입니다.)
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.MVC.Services.WebFormsAdapterService">
            <summary>
            Adapts requests for Web Forms-hosted components.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Services.WebFormsAdapterService.GetServiceHandler(System.Object,HSF.TechSvc2010.MVC.Services.GetServiceEventArgs)">
            <summary>
            To be used by the web runtime site version.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.MVC.Design.WebControlSerializationProvider">
            <summary>
            Emits custom code-behind code for mapped controls in a web form.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Design.WebControlSerializationProvider.GetSerializer(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Type,System.Type)">
            <summary>
            Returns our custom serializer only if the type received implements <see cref="T:System.Web.UI.IAttributeAccessor"/>, 
            the only common ground (for attribute settings) for HtmlControls and WebControls.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.MVC.Design.WebControlSerializer">
            <summary>
            Emits all Mvc mappings as attributes of the emitted HTML at run-time.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.DILibrary.DIConfigLoader">
            <summary>
            ADependency Injection 기법을 지원하기 위한  Class
            </summary>
            <reqid id="RQ-TS-BFT-003">Dependency Resolution 지원 DI(Dependency Injection) 기법을 지원</reqid>
        </member>
        <member name="T:HSF.TechSvc2010.Common.HSFBHSException">
            <summary>
            BHS 예외
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.HSFBHSException.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:HSF.TechSvc2010.Common.HSFBHSException.AssemblyName">
            <summary>
            어셈블리명
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.HSFBHSException.MethodName">
            <summary>
            메소드명
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.HSFBHSException.ClassName">
            <summary>
            클래스명
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.HSFBHSException.ErrorCode">
            <summary>
            오류 코드
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.HSFBHSNotWorkingException">
            <summary>
            BHS 예외
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.HSFBHSServiceNotFoundException">
            <summary>
            BHS 예외
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.HSFBHSWorkerPocessZeroExcetion">
            <summary>
            BHS 예외
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.HSFBHSAssemblyNotFoundExcetion">
            <summary>
            BHS 예외 - 
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.HSFBHSClassNotFoundExcetion">
            <summary>
            BHS 예외 - 
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.HSFBHSMethodNotFoundExcetion">
            <summary>
            BHS 예외 - 
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.HSFBHSMethodArgumentNotMatchedExcetion">
            <summary>
            BHS 예외 - 
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.HSFBHSServiceTimeoutExcetion">
            <summary>
            BHS 예외 - 
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.HSFBHSServiceRuntimeExcetion">
            <summary>
            BHS 예외 - 서비스 실행중 발생한 예외
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.Properties.Resources">
            <summary>
              지역화된 문자열 등을 찾기 위한 강력한 형식의 리소스 클래스입니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Properties.Resources.ResourceManager">
            <summary>
              이 클래스에서 사용하는 캐시된 ResourceManager 인스턴스를 반환합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Properties.Resources.Culture">
            <summary>
              이 강력한 형식의 리소스 클래스를 사용하여 모든 리소스 조회에 대한 현재 스레드의 CurrentUICulture
              속성을 재정의합니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.Crypto.CryptoUtil">
            <summary>
            암호화와 관련된 Utility 기능입니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.CryptoUtil.Encrypt(System.String,System.String)">
            <summary>
            RSA 알고리즘으로 키를 암호화합니다.
            </summary>
            <param name="plainText">평문 키를 입력합니다.</param>
            <param name="XMLKey">RSA XML 공개키를 지정합니다.</param>
            <returns>암호화된 키를 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            string cipherText = Common.Encrypt("Plaintext key", "RSA XML public");   //평문키, RSA XML 공개키
            </code>
            </example>
            <remarks>
            RSA 알고리즘으로 지정된 공개키를 이용하여, 평문 키를 암호화합니다.
            </remarks>        
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.CryptoUtil.Encrypt(System.Byte[],System.String)">
            <summary>
            RSA 알고리즘으로 키를 암호화합니다.
            </summary>
            <param name="plainText">평문 키를 입력합니다.</param>
            <param name="XMLKey">RSA XML 공개키를 지정합니다.</param>
            <returns>암호화된 키를 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            string cipherText = Common.Encrypt("byte [] Plaintext key", "RSA XML public");   //byte[] 평문키, RSA XML 공개키
            </code>
            </example>
            <remarks>
            RSA 알고리즘으로 지정된 공개키를 이용하여, 평문 키를 암호화합니다.
            </remarks>        
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.CryptoUtil.Encrypt(HSF.TechSvc2010.Common.Crypto.SymmetricMode,System.String,System.Byte[],System.Byte[])">
            <summary>
            대칭키(AES, TripleDes) 알고리즘으로 평문을 암호화합니다.
            </summary>
            <param name="cryptoMode">대칭키 알고리즘을 입력합니다.</param>
            <param name="plainText">평문을 입력합니다.</param>
            <param name="Key">AES Key를 지정합니다.</param>
            <param name="IV">AES IV를 지정합니다.</param>
            <returns>암호문을 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            byte[] Key; // 보유하고 있는 Key 할당
            byte[] IV; // 보유하고 있는 IV 할당
            string cipherText = Common.Encrypt(SymmetricMode.TripleDES, "Plaintext", Key, IV);   //평문
            </code>
            </example>
            <remarks>
            대칭키(AES, TripleDes) 알고리즘으로 지정된 키를 이용하여, 평문을 암호화합니다.
            </remarks>  
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.CryptoUtil.Encrypt(HSF.TechSvc2010.Common.Crypto.SymmetricMode,System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            대칭키(AES, TripleDes) 알고리즘으로 평문을 암호화합니다.
            </summary>
            <param name="cryptoMode">대칭키 알고리즘을 입력합니다.</param>
            <param name="plainText">평문을 입력합니다.</param>
            <param name="Key">AES Key를 지정합니다.</param>
            <param name="IV">AES IV를 지정합니다.</param>
            <returns>암호문을 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            byte[] Key; // 보유하고 있는 Key 할당
            byte[] IV; // 보유하고 있는 IV 할당
            string cipherText = Common.Encrypt(SymmetricMode.TripleDES, "byte [] plaintext", Key, IV);   //byte[] 평문
            </code>
            </example>
            <remarks>
            대칭키(AES, TripleDes) 알고리즘으로 지정된 키를 이용하여, 평문을 암호화합니다.
            </remarks>        
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.CryptoUtil.Encrypt(HSF.TechSvc2010.Common.Crypto.SymmetricMode,System.String,System.Byte[]@,System.Byte[]@)">
            <summary>
            대칭키(AES, TripleDES) 알고리즘으로 평문을 암호화합니다.
            </summary>
            <param name="cryptoMode">대칭키 알고리즘을 입력합니다.</param>
            <param name="plainText">평문을 입력합니다.</param>
            <param name="Key">AES Key를 반환합니다.</param>
            <param name="IV">AES IV를 반환합니다.</param>
            <returns>암호문을 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            byte[] Key;
            byte[] IV;
            string cipherText = Common.Encrypt(SymmetricMode.AES, "Plaintext", Key, IV);   //평문
            </code>
            </example>
            <remarks>
            AES 알고리즘으로 평문을 암호화하고, 사용된 Key와 IV를 반환합니다.
            </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.CryptoUtil.Encrypt(HSF.TechSvc2010.Common.Crypto.SymmetricMode,System.Byte[],System.Byte[]@,System.Byte[]@)">
            <summary>
            대칭키(AES, TripleDES) 알고리즘으로 평문을 암호화합니다.
            </summary>
            <param name="cryptoMode">대칭키 알고리즘을 입력합니다.</param>
            <param name="plainText">평문을 입력합니다.</param>
            <param name="Key">AES Key를 반환합니다.</param>
            <param name="IV">AES IV를 반환합니다.</param>
            <returns>암호문을 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            byte[] Key;
            byte[] IV;
            string cipherText = Common.Encrypt("Plaintext", out Key, out IV);   //평문
            </code>
            </example>
            <remarks>
            AES 알고리즘으로 평문을 암호화하고, 사용된 Key와 IV를 반환합니다.
            </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.CryptoUtil.Decrypt(System.String,System.String)">
            <summary>
            RSA 알고리즘으로, 암호화된 키를 복호화합니다.
            </summary>
            <param name="cipherText">암호화된 키를 입력합니다.</param>
            <param name="XMLKey">RSA XML 개인키를 입력합니다.</param>
            <returns>복호화된 키를 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            string cipherText = Common.Decrypt("The encrypted key", "RSA XML private");   // 암호화된 키, RSA XML 개인키
            </code>
            </example>
            <remarks>
            RSA 알고리즘으로 지정된 개인키를 이용하여, 암호화된 키를 복호화합니다.
            </remarks>        
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.CryptoUtil.Decrypt(System.Byte[],System.String)">
            <summary>
            RSA 알고리즘으로, 암호화된 키를 복호화합니다.
            </summary>
            <param name="cipherText">byte[] 암호화된 키를 입력합니다.</param>
            <param name="XMLKey">RSA XML 개인키를 입력합니다.</param>
            <returns>복호화된 키를 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            byte[] cipherText = Common.Decrypt("byte [] encrypted key", "RSA XML private");   // byte[] 암호화된 키, RSA XML 개인키
            </code>
            </example>
            <remarks>
            RSA 알고리즘으로 지정된 개인키를 이용하여, 암호화된 키를 복호화합니다.
            </remarks>        
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.CryptoUtil.Decrypt(HSF.TechSvc2010.Common.Crypto.SymmetricMode,System.String,System.Byte[],System.Byte[])">
            <summary>
            대칭키(AES, TripleDES) 알고리즘으로 암호문을 복호화합니다.
            </summary>
            <param name="cryptoMode">대칭키 알고리즘을 입력합니다.</param>
            <param name="cipherText">암호문을 입력합니다.</param>
            <param name="Key">AES Key를 지정합니다.</param>
            <param name="IV">AES IV를 지정합니다.</param>
            <returns></returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            byte[] Key; // 보유하고 있는 Key 할당
            byte[] IV; // 보유하고 있는 IV 할당
            string decipherText = Common.Decrypt(SymmetricMode.AES, "Ciphertext", Key, IV);  // 암호문
            </code>
            </example>
            <remarks>
            AES 알고리즘으로 지정된 키를 이용하여, 암호문을 평문으로 복호화합니다.
            </remarks>        
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.CryptoUtil.Decrypt(HSF.TechSvc2010.Common.Crypto.SymmetricMode,System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            대칭키(AES, TripleDES) 알고리즘으로 암호문을 복호화합니다.
            </summary>
            <param name="cryptoMode">대칭키 알고리즘을 입력합니다.</param>
            <param name="cipherText">byte[] 암호문을 입력합니다.</param>
            <param name="Key">AES Key를 지정합니다.</param>
            <param name="IV">AES IV를 지정합니다.</param>
            <returns></returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            byte[] Key; // 보유하고 있는 Key 할당
            byte[] IV; // 보유하고 있는 IV 할당
            byte[] decipherText = Common.Decrypt(SymmetricMode.AES, "byte [] ciphertext", Key, IV);   // byte[] 암호문
            </code>
            </example>
            <remarks>
            AES 알고리즘으로 지정된 키를 이용하여, 암호문을 평문으로 복호화합니다.
            </remarks>        
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.CryptoUtil.GetRSAKey(System.Boolean)">
            <summary>
            RSA Parameter를 생성합니다.
            </summary>
            <param name="includePrivateParameters">개인키를 내보낼지 여부를 결정합니다.</param>
            <returns>RSA Parameter를 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            RSAParameters rsaKey = Common.GetRSAKey(true);
            </code>
            </example>
            <remarks>
            RSA Parameter를 생성합니다.
            개인키를 포함해서 생성할지 여부를 결정할 수 있습니다.
            </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.CryptoUtil.GetRSAXMLKey(System.Boolean)">
            <summary>
            RSA XML String Key를 생성합니다.
            </summary>
            <param name="includePrivateParameters">개인키를 내보낼지 여부를 결정합니다.</param>
            <returns>RSA XML String Key를 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            RSAParameters rsaKey = agent.GetRSAKey(true);
            </code>
            </example>
            <remarks>
            RSA XML String Key를 생성합니다.
            개인키를 포함해서 생성할지 여부를 결정할 수 있습니다.
            </remarks> 
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.CryptoUtil.GetRSAKeyFromXMLString(System.String,System.Boolean)">
            <summary>
            RSA XML 형식의 Key로부터 Parameter를 읽어 옵니다.
            </summary>
            <param name="XMLString">RSA XML 문자열을 입력합니다.</param>
            <param name="includePrivateParameters">개인키를 내보낼지 여부를 결정합니다.</param>
            <returns>RSA Parameter를 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            RSAParameters rsaKey = agent.GetRSAKeyFromXMLString("Private string XML", true);   // XML 개인키 문자열
            </code>
            </example>
            <remarks>
            RSA XML 형식의 Key로부터 Parameter를 읽어 옵니다.
            개인키를 포함해서 내보낼지 여부를 결정할 수 있습니다. 단, XML 문자열에 개인키가 포함되어 있는 경우에 유효합니다.
            </remarks>        
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.CryptoUtil.GetSymmetricKey(HSF.TechSvc2010.Common.Crypto.SymmetricMode)">
            <summary>
            비대칭 Key를 생성합니다.
            </summary>
            <returns>생성된 Key를 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            byte[] AESKey = Common.GetSymmetricKey(SymmetricMode.AES);
            </code>
            </example>
            <remarks>
            AES(Rijndael) Key, TripleDES Key를 생성합니다.
            </remarks> 
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.CryptoUtil.GetSymmetricIV(HSF.TechSvc2010.Common.Crypto.SymmetricMode)">
            <summary>
            비대칭 IV를 생성합니다.
            </summary>
            <returns>생성된 IV를 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            byte[] AESIV = Common.GetSymmetricIV(SymmetricMode.AES);
            </code>
            </example>
            <remarks>
            AES(Rijndael) IV(Initialization Vector), TripleDES IV를 생성합니다.
            </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.CryptoUtil.GetBinHexString(System.Byte[])">
            <summary>
            byte 배열을 받아, Binary Hexadecimal String을 반환합니다.
            </summary>
            <param name="bytes">변환할 byte 배열을 입력합니다.</param>
            <returns>Binary Hexadecimal String을 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            	string binHexString = StringConverter.GetBinHexString(byteArray);
            </code>
            </example>
            <remarks>
            byte 배열을 받아, Binary Hexadecimal String을 반환합니다.
            </remarks>        
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.CryptoUtil.HexStringToBytes(System.String)">
            <summary>
            Binary 16진수로 이루어진 문자열을 byte 배열로 반환합니다.
            </summary>
            <param name="binHexString">변환할 Binary 16진수 문자열를 입력합니다.</param>
            <returns>byte 배열을 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            	byte[] bytes = StringConverter.HexStringToBytes(binaryHexString);
            </code>
            </example>
            <remarks>
            Binary 16진수로 이루어진 문자열을 byte 배열로 반환합니다.
            </remarks>        
        </member>
        <member name="T:HSF.TechSvc2010.Common.Crypto.ASymmetricAgent">
            <summary>
            ASymmetricKey Class를 효율적으로 사용하기 위한 Agent입니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.ASymmetricAgent.#ctor">
            <summary>
            Default Constructor입니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.ASymmetricAgent.#ctor(System.Security.Cryptography.RSAParameters)">
            <summary>
            RSA 키 교환 알고리즘을 위한 Constructor입니다.
            </summary>
            <param name="rsaKey">RSA Key Parameter를 지정합니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.ASymmetricAgent.Dispose">
            <summary>
            사용 중인 모든 Resource를 정리합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.ASymmetricAgent.Encrypt(System.String,System.String)">
            <summary>
            RSA 알고리즘으로 키를 암호화합니다.
            </summary>
            <param name="plainText">평문 키를 입력합니다.</param>
            <param name="XMLKey">RSA XML 공개 키를 지정합니다.</param>
            <returns>암호화된 키를 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            using (ASymmetricAgent agent = new ASymmetricAgent())
            {
            	string cipherText = agent.Encrypt("Plaintext key", "RSA XML Public Key"); //평문키, RSA XML 공개 키
            }	
            </code>
            </example>
            <remarks>
            RSA 알고리즘으로 지정된 공개 키를 이용하여, 평문 키를 암호화합니다.
            </remarks>        
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.ASymmetricAgent.Encrypt(System.Byte[],System.String)">
            <summary>
            RSA 알고리즘으로 키를 암호화합니다.
            </summary>
            <param name="plainText">byte[] 평문 키를 입력합니다.</param>
            <param name="XMLKey">RSA XML 공개 키를 지정합니다.</param>
            <returns>암호화된 키를 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            using (ASymmetricAgent agent = new ASymmetricAgent())
            {
            	byte[] cipherText = agent.Encrypt("byte [] Plaintext key", "RSA XML Public Key");  //byte[] 평문키, RSA XML 공개 키
            }
            </code>
            </example>
            <remarks>
            RSA 알고리즘으로 지정된 공개 키를 이용하여, 평문 키를 암호화합니다.
            </remarks>        
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.ASymmetricAgent.Encrypt(System.String,System.Security.Cryptography.RSAParameters)">
            <summary>
            RSA 알고리즘으로 키를 암호화합니다.
            </summary>
            <param name="plainText">byte[] 평문 키를 입력합니다.</param>
            <param name="RSAKey">RSA 공개 키를 지정합니다.</param>
            <returns>암호화된 키를 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            using (ASymmetricAgent agent = new ASymmetricAgent())
            {
            	string cipherText = agent.Encrypt("byte [] Plaintext key", "RSA public-key");   //byte[] 평문키, RSA 공개 키
            }
            </code>
            </example>
            <remarks>
            RSA 알고리즘으로 지정된 공개 키를 이용하여, 평문 키를 암호화합니다.
            </remarks>  
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.ASymmetricAgent.Encrypt(System.Byte[],System.Security.Cryptography.RSAParameters)">
            <summary>
            RSA 알고리즘으로 키를 암호화합니다.
            </summary>
            <param name="plainText">byte[] 평문 키를 입력합니다.</param>
            <param name="RSAKey">RSA 공개 키를 지정합니다.</param>
            <returns>암호화된 키를 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            using (ASymmetricAgent agent = new ASymmetricAgent())
            {
            	byte[] cipherBytes = agent.Encrypt("byte [] Plaintext key", "RSA public-key");   //byte[] 평문키, RSA 공개 키
            }
            </code>
            </example>
            <remarks>
            RSA 알고리즘으로 지정된 공개 키를 이용하여, 평문 키를 암호화합니다.
            </remarks>  
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.ASymmetricAgent.Decrypt(System.String,System.String)">
            <summary>
            RSA 알고리즘으로, 암호화된 키를 복호화합니다.
            </summary>
            <param name="cipherText">암호화된 키를 입력합니다.</param>
            <param name="XMLKey">RSA XML 개인 키를 입력합니다.</param>
            <returns>복호화된 키를 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            using (ASymmetricAgent agent = new ASymmetricAgent())
            {
            	string cipherText = agent.Decrypt("The encrypted key", "RSA XML private key");  //암호화된 키, RSA XML 개인 키
            }
            </code>
            </example>
            <remarks>
            RSA 알고리즘으로 지정된 개인 키를 이용하여, 암호화된 키를 복호화합니다.
            </remarks>        
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.ASymmetricAgent.Decrypt(System.Byte[],System.String)">
            <summary>
            RSA 알고리즘으로, 암호화된 키를 복호화합니다.
            </summary>
            <param name="cipherText">byte[] 암호화된 키를 입력합니다.</param>
            <param name="XMLKey">RSA XML 개인 키를 입력합니다.</param>
            <returns>복호화된 키를 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            using (ASymmetricAgent agent = new ASymmetricAgent())
            {
            	byte[] decipherBytes = agent.Decrypt("byte [] encrypted key", "RSA XML private key");   //byte[] 암호화된 키, RSA XML 개인 키
            }
            </code>
            </example>
            <remarks>
            RSA 알고리즘으로 지정된 개인 키를 이용하여, 암호화된 키를 복호화합니다.
            </remarks>        
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.ASymmetricAgent.Decrypt(System.String,System.Security.Cryptography.RSAParameters)">
            <summary>
            RSA 알고리즘으로, 암호화된 키를 복호화합니다.
            </summary>
            <param name="cipherText">byte[] 암호화된 키를 입력합니다.</param>
            <param name="RSAKey">RSA 개인 키를 입력합니다.</param>
            <returns>복호화된 키를 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            using (ASymmetricAgent agent = new ASymmetricAgent())
            {
            	string decipherText = agent.Decrypt("byte [] encrypted key", "RSA XML private key");   //byte[] 암호화된 키, RSA XML 개인 키
            }
            </code>
            </example>
            <remarks>
            RSA 알고리즘으로 지정된 개인 키를 이용하여, 암호화된 키를 복호화합니다.
            </remarks>        
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.ASymmetricAgent.Decrypt(System.Byte[],System.Security.Cryptography.RSAParameters)">
            <summary>
            RSA 알고리즘으로, 암호화된 키를 복호화합니다.
            </summary>
            <param name="cipherText">byte[] 암호화된 키를 입력합니다.</param>
            <param name="RSAKey">RSA 개인 키를 입력합니다.</param>
            <returns>복호화된 키를 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            using (ASymmetricAgent agent = new ASymmetricAgent())
            {
            	byte[] decipherBytes = agent.Decrypt("byte [] encrypted key", "RSA XML private key");   //byte[] 암호화된 키, RSA XML 개인 키
            }
            </code>
            </example>
            <remarks>
            RSA 알고리즘으로 지정된 개인 키를 이용하여, 암호화된 키를 복호화합니다.
            </remarks>        
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.ASymmetricAgent.GetRSAKey(System.Boolean)">
            <summary>
            RSA Parameter를 생성합니다.
            </summary>
            <param name="includePrivateParameters">개인 키를 내보낼지 여부를 결정합니다.</param>
            <returns>RSA Parameter를 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            using (ASymmetricAgent agent = new ASymmetricAgent())
            {
            	RSAParameters rsaKey = agent.GetRSAKey(true);
            }
            </code>
            </example>
            <remarks>
            RSA Parameter를 생성합니다.
            개인 키를 포함해서 생성할지 여부를 결정할 수 있습니다.
            </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.ASymmetricAgent.GetRSAXMLKey(System.Boolean)">
            <summary>
            RSA XML String Key를 생성합니다.
            </summary>
            <param name="includePrivateParameters">개인 키를 내보낼지 여부를 결정합니다.</param>
            <returns>RSA XML String Key를 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            using (ASymmetricAgent agent = new ASymmetricAgent())
            {
            	RSAParameters rsaKey = agent.GetRSAKey(true);
            }
            </code>
            </example>
            <remarks>
            RSA XML String Key를 생성합니다.
            개인 키를 포함해서 생성할지 여부를 결정할 수 있습니다.
            </remarks> 
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.ASymmetricAgent.GetRSAKeyFromXMLString(System.String,System.Boolean)">
            <summary>
            RSA XML 형식의 Key로부터 Parameter를 읽어 옵니다.
            </summary>
            <param name="XMLString">RSA XML 문자열을 입력합니다.</param>
            <param name="includePrivateParameters">개인 키를 내보낼지 여부를 결정합니다.</param>
            <returns>RSA Parameter를 반환합니다.</returns>
            <example>Method 사용 예제는 다음과 같습니다.
            <code>
            using (ASymmetricAgent agent = new ASymmetricAgent())
            {
            	RSAParameters rsaKey = agent.GetRSAKeyFromXMLString("XML private key string", true);   //XML 개인 키 문자열
            }
            </code>
            </example>
            <remarks>
            RSA XML 형식의 Key로부터 Parameter를 읽어 옵니다.
            개인 키를 포함해서 내보낼지 여부를 결정할 수 있습니다. 단, XML 문자열에 개인 키가 포함되어 있는 경우에 유효합니다.
            </remarks>        
        </member>
        <member name="P:HSF.TechSvc2010.Common.Crypto.ASymmetricAgent.RSAKey">
            <summary>
            현재 RSA 키 교환 알고리즘의 Key를 가져옵니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.RuntimeAssemblyLoader">
            <summary>
            어셈블리를 런타임시에 직접 로딩합니다. - DLL 변경시 바로 적용될 수 있도록 지원합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.RuntimeAssemblyLoader.AttachCache(System.String,System.String,System.DateTime,System.DateTime,System.Reflection.Assembly)">
            <summary>
            
            </summary>
            <param name="assemblyName"></param>
            <param name="filename"></param>
            <param name="lastWriteTimeUTC"></param>
            <param name="LoadedTimeUTC"></param>
            <param name="assembly"></param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.RuntimeAssemblyLoader.Containe(System.String)">
            <summary>
            
            </summary>
            <param name="assemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.RuntimeAssemblyLoader.GetAssemblyInfo(System.String)">
            <summary>
            
            </summary>
            <param name="assemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.RuntimeAssemblyLoader.Remove(System.String)">
            <summary>
            
            </summary>
            <param name="assemblyName"></param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.RuntimeAssemblyLoader.ClearAssemblyCache">
            <summary>
            로드된 어셈블리의 캐시를 제거합니다.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.RuntimeAssemblyLoader.Cache">
            <summary>
            로드된 어셈블리 캐시 
            - 내부에서 관리됩니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.RuntimeAssemblyLoader.#cctor">
            <summary>
            정적 생성자로 최초 호출시 1회 실행되며 이벤트 등록을 수행합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.RuntimeAssemblyLoader.Init">
            <summary>
            어셈블리 로딩 실패 이벤트를 수신하여 처리합니다.
            AppDomain.CurrentDomain.AssemblyResolve 이벤트를 수신합니다.
            AppDomain.CurrentDomain.AssemblyResolve 이벤트는 어셈블리 로딩 실패시 발생하는 이벤트입니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.RuntimeAssemblyLoader.GetRuntimeValueTypeAssembly(System.Reflection.Assembly,System.Type)">
            <summary>
            런타임시 최신 버전의 ValueType을 조회합니다.
            </summary>
            <param name="assembly">원본 어셈블리</param>
            <param name="type"> 원본 Type </param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.RuntimeAssemblyLoader.GetRuntimeAssembly(System.String)">
            <summary>
            런타임시에 갱신가능한 형태로 어셈블리를 로드합니다.
            </summary>
            <param name="assemblyName">.dll을 제외한 어셈블리 이름</param>
            <returns></returns>
        </member>
        <member name="E:HSF.TechSvc2010.Common.RuntimeAssemblyLoader.onDependancyAssemblyLoaded">
            <summary>
            종속된 어셈블리가 로드될 경우 발생하는 이벤트
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.RuntimeAssemblyLoader.WorkingDir">
            <summary>
            Assembly Load Dir Location
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.RuntimeAssemblyLoader.UseMiddleware">
            <summary>
            미들웨어(BHS)사용 유무를 설정합니다. - 기본값은 true이며 false로 설정할 경우 미들웨어가 아닌 로컬에서 비즈니스를 실행합니다.
            configuration key "UseMiddleware"의 값을 "true", "false"로 설정 가능합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.RuntimeAssemblyLoader.BusinessDebugDir">
            <summary>
            비즈니스 컴포넌트의 폴더 경로를 지정합니다. - 디버깅, 관리폴더의 위치 변경시 사용합니다.
            /// configuration key "BusinessDebugDir"의 값을 "c:\...."와 같이 설정하여 적용합니다.
            </summary>
        </member>
        <member name="E:HSF.TechSvc2010.Common.RuntimeAssemblyLoader.AssemblyChaned">
            <summary>
            어셈블리 변경을 통지합니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.RuntimeAssemblyLoader.onDependancyAssemblyLoadHandller">
            <summary>
            종속 어셈블리 처리 핸들러
            </summary>
            <param name="assemblyName">어셈블리의 이름</param>
            <param name="asm">종속 어셈블리</param>
        </member>
        <member name="T:HSF.TechSvc2010.Common.RuntimeAssemblyLoader.AssemblyChanedHandller">
            <summary>
            어셈블리 변경 핸들러
            </summary>
            <param name="fileName">파일명(경로)</param>
            <param name="assemblyName">어셈블리명</param>
            <param name="currentTime">로딩일시</param>
            <param name="newTime">현재시각</param>
        </member>
        <member name="T:HSF.TechSvc2010.Common.RuntimeAssemblyLoader.CachedAssemblyInfo">
            <summary>
            내부 화면 어셈블리 정보 표현을 위한 클래스
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.RuntimeAssemblyLoader.CachedAssemblyInfo.FileName">
            <summary>
            파일명
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.RuntimeAssemblyLoader.CachedAssemblyInfo.LastWriteTimeUTC">
            <summary>
            최종 수정일 (UTC)
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.RuntimeAssemblyLoader.CachedAssemblyInfo.LoadedTimeUtc">
            <summary>
            로딩된 시각
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.RuntimeAssemblyLoader.CachedAssemblyInfo.RealAssembly">
            <summary>
            어셈블리
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.Crypto.RSACryptoAgent">
            <summary>
            RSA 암호화 관리자 입니다.
            </summary>
            <reqid id="RQ-TS-BFT-013">Encryption/Decryption 지원</reqid>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.RSACryptoAgent.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.RSACryptoAgent.GetNewPublicPrivateKeyPair">
            <summary>
            새 공개키,개인키 생성키를 생성합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.RSACryptoAgent.Encrypt(System.String)">
            <summary>
            RSA 알고리즘으로 암호화 합니다.
             - 유니코드 문자열로 암호화되며 텍스트 저장을위해 Base64로 다시 인코딩  
            </summary>
            <param name="normalText">암호화 할 문자열을 지정합니다.</param>
            <returns>암호화된 문자열로 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.RSACryptoAgent.Decrypt(System.String)">
            <summary>
            RSA 알고리즘으로 복호화 합니다.
            </summary>
            <param name="encryptedText">복호화 할 문자열을 지정합니다.</param>
            <returns>복호화된 평문으로 반환 합니다.</returns>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Crypto.RSACryptoAgent.PublicKeyOnly">
            <summary>
            공개키를 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Crypto.RSACryptoAgent.PublicKeyXMLFormat">
            <summary>
            공개키 XML표현을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Crypto.RSACryptoAgent.PublicPrivateKeyPairXMLFormat">
            <summary>
            공개키,개인키 XML표현을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Crypto.RSACryptoAgent.PublicKey">
            <summary>
            공개키를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Crypto.RSACryptoAgent.PublicPrivateKeyPair">
            <summary>
            공개키,개인키 쌍을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.MVC.Services.WindowsFormsAdapterService">
            <summary>
            Adapts requests for Windows Forms-hosted components.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.MVC.Controller.ViewInfo">
            <summary>
            This class represents a link between the view and the model.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.MVC.Controller.ViewInfo.Controller">
            <summary>
            Provides a means to link this view information with the parent controller.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Controller.ViewInfo.ToString">
            <summary>
            Provides a friendly string representation.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.MVC.Controller.ViewInfo.ControlID">
            <summary>
            The control ID.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.MVC.Controller.ViewInfo.IsHooked">
            <summary>
            Indicates whether the class has already been hooked to property change handlers.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.MVC.Controller.ViewInfo.Model">
            <summary>
            The name of the model in use.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.MVC.Controller.ViewInfo.ModelProperty">
            <summary>
            The model property used by this mapping.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.MVC.Controller.ViewInfo.ControlProperty">
            <summary>
            The control property updated by this mapping.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.Crypto.Rsa.RsaEncryption">
            <summary>
            Rsa 암호화 기능 제공 클래스
            - .NET 표준 암호화 알고리즘 + 비밀키 암호화 , 공개키 암호해독 기능을 추가 구현합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.Rsa.RsaEncryption.#ctor">
            <summary>
            생성자 - 1024 비트 키를 사용합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.Rsa.RsaEncryption.#ctor(System.Int32)">
            <summary>
            해당 키 크기를 사용하는 암호화 관리자가 생성됩니다.
            </summary>
            <param name="keySize">키 사이즈</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.Rsa.RsaEncryption.LoadPublicKey(System.String)">
            <summary>
            공개키를 로드합니다. 
            </summary>
            <param name="keyXmlFormat">xml 형식의 공개키 문자열</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.Rsa.RsaEncryption.LoadPublicFromXml(System.String)">
            <summary>
            지정된 경로의 파일에서 공개키를 로드합니다. 
            </summary>
            <param name="publicPath">xml 형식의 공개키 문자열이 저장된 파일의 경로</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.Rsa.RsaEncryption.LoadPrivateKey(System.String)">
            <summary>
            비밀키를 로드합니다. 
            </summary>
            <param name="xmlKey">xml 형식의 비밀키 문자열</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.Rsa.RsaEncryption.LoadPrivateFromXml(System.String)">
            <summary>
            지정된 경로의 파일에서 비밀키를 로드합니다. 
            </summary>
            <param name="privatePath">xml 형식의 비밀키 문자열이 저장된 파일의 경로</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.Rsa.RsaEncryption.PrivateEncryption(System.Byte[])">
            <summary>
            입력된 자료(byte[])를 개인키를 이용하여 암호화 합니다.
            </summary>
            <param name="data">암호화할 자료</param>
            <returns>암호화된 자료</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.Rsa.RsaEncryption.PublicEncryption(System.Byte[])">
            <summary>
            입력된 자료(byte[])를 공개키를 이용하여 암호화 합니다.
            </summary>
            <param name="data">암호화할 자료</param>
            <returns>암호화된 자료</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.Rsa.RsaEncryption.PrivateDecryption(System.Byte[])">
            <summary>
            입력된 자료(byte[])를 개인키를 이용하여 해독(복호화)합니다.
            </summary>
            <param name="encryptedData">암호화된 자료</param>
            <returns>해독된 자료</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.Rsa.RsaEncryption.PublicDecryption(System.Byte[])">
            <summary>
            입력된 자료(byte[])를 공개키를 이용하여 해독(복호화)합니다.
            </summary>
            <param name="encryptedData">암호화된 자료</param>
            <returns>해독된 자료</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.Rsa.RsaEncryption.Dispose">
            <summary>
            자원을 해제합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.Rsa.RsaEncryption.Dispose(System.Boolean)">
            <summary>
            자원을 해제합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Crypto.Rsa.RsaEncryption.IsPrivateKeyLoaded">
            <summary>
            개인키가 로드 되었는지를 조회합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Crypto.Rsa.RsaEncryption.IsPublicKeyLoaded">
            <summary>
            공개키가 로드 되었는지 조회합니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.AOPLibrary.AOPConfigLoader">
            <summary>
            AOP Config Loader
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.Test.RecordStatus">
            <summary>
            시나리오 테스트를 하기 위한 Record 상태 타입
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.Test.RecordStatus.Stop">
            <summary>
            현재 상태는 아무 상태도 아님
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.Test.RecordStatus.Start">
            <summary>
            현재 Recording 중인 상태
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.Test.RecordStatus.Pause">
            <summary>
            현재 잠시 멈춤 상태
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.Test.MappingOption">
            <summary>
            Record File을 Play할대 Option 처리를 위한 타입
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.Test.MappingOption.ByPass">
            <summary>
            현재 값 그대로 사용
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.Test.MappingOption.Reference">
            <summary>
            Parameters.Reference 값에 데이터 직접 입력, 개행 문자를 이용해 입력할 수 있다.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.Test.MappingOption.File">
            <summary>
            Parameters.Reference 값에 파일명을 Full Path로 입력
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.Test.RecordData">
            <summary>
            한건의 트랜잭션 데이터 저장을 위한 클래스
            클라이언트에서의 Action으로 서버쪽의 Method를 요청할 경우의 데이터 저장을 위한 클래스
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Test.RecordData.Serialize(HSF.TechSvc2010.Common.Test.RecordData)">
            <summary>
            RecordData Serialized
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Test.RecordData.Deserialize(System.Xml.XmlDocument)">
            <summary>
            RecordData Deserialize
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Test.RecordData.ClassFullName">
            <summary>
            전체 클래스 이름 (어셈블리 포함)
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Test.RecordData.MethodName">
            <summary>
            메소드 이름
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Test.RecordData.Parameters">
            <summary>
            파라메터 정보 Array
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.Test.RecordDataResult">
            <summary>
            한건의 트랜잭션 데이터를 수행 하고 난 후의 결과 정보를 저장할 클래스
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Test.RecordDataResult.Result">
            <summary>
            Boker를 통해 서버쪽 컴포넌트를 수행하고 난 이후의 결과를 설정하거나 가져옵니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.Test.Parameters">
            <summary>
            서버의 Method를 수행하기 위한 파라메터 정보 클래스
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Test.Parameters.Name">
            <summary>
            파라메터 이름
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Test.Parameters.Value">
            <summary>
            파라메터의 값
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Test.Parameters.Option">
            <summary>
            Play시에 파라메터의 값을 Mapping할 Option
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Test.Parameters.Reference">
            <summary>
            Play시 Option에 따라 해당 값을 저장하기 위한 값
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.Resource.IDicManager">
            <summary>
            UI Layer에서 Dictionary를 관리하며, 일반적으로 Singleton으로 구현합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Resource.IDicManager.GetValue(System.String)">
            <summary>
            제공된 키에 해당하는 Dictionary 값을 가져옵니다.
            </summary>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Resource.IDicManager.Refresh">
            <summary>
            Dictionary를 다시 가져옵니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Resource.IDicManager.Update(System.Data.DataTable)">
            <summary>
            Dictionary의 수정 내용을 서버에 적용합니다.
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Resource.IDicManager.CurrentCulture">
            <summary>
            현재 문화권 이름을 가져옵니다. 일반적으로 IResourceManager의 CurrentCulture 값을 가져오도록 구현합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Resource.IDicManager.DictionaryTable">
            <summary>
            Dictionary 테이블을 가져옵니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.BusinessInfo">
            <summary>
            비즈니스 서비스를 표현합니다.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.BusinessInfo.AssemblyName">
            <summary>
            어셈블리 이름
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.BusinessInfo.ClassName">
            <summary>
            클래스 이름
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.BusinessInfo.MethodName">
            <summary>
            메소드 이름
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.BusinessInfo.Description">
            <summary>
            설명
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.BusinessInfo.Parameters">
            <summary>
            매개변수들
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.BusinessInfo.Return">
            <summary>
            리턴값
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.MVC.Adapter.WebFormsAdapter">
            <summary>
            Provides connectivity with the hosting web forms.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.MVC.Adapter.BaseAdapter">
            <summary>
            Provides an abstract and common base for windows and web forms adapters.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Adapter.BaseAdapter.Connect(HSF.TechSvc2010.MVC.Controller.BaseController,System.Object,System.ComponentModel.IContainer)">
            <summary>
            Connects a controller with its hosting environment.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Adapter.WebFormsAdapter.Connect(HSF.TechSvc2010.MVC.Controller.BaseController,System.Object,System.ComponentModel.IContainer)">
            <summary>
            Connects a controller with its hosting environment.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.Crypto.Rsa.RsaKeyPare">
            <summary>
            Rsa Key Pare
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Crypto.Rsa.RsaKeyPare.KeySize">
            <summary>
            암호화 키의 사이즈 
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Crypto.Rsa.RsaKeyPare.IsPrivate">
            <summary>
            개인키를 포함하는지 반환합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Crypto.Rsa.RsaKeyPare.IsPublic">
            <summary>
            공개키를 포함하는지 반환합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Crypto.Rsa.RsaKeyPare.PublicKey">
            <summary>
            공개키 의 XML 표현 문자열을 반환합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Crypto.Rsa.RsaKeyPare.PrivateKey">
            <summary>
            비밀키의 XML 표현 문자열을 반환합니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.IServiceAgent">
            <summary>
            Client 와 서버간의 메시지 전달 인터페이스 입니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.IServiceAgent.Request(System.Object)">
            <summary>
            Client 와 서버간 메시지 전달 메소드 정의합니다.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:HSF.TechSvc2010.Common.IServiceAgent.ServiceURI">
            <summary>
            .NET Remoting Service URI
            </summary>
            <example> tcp://www.HSF.TechSvc2010.co.kr:9853/myservice.uri</example>
        </member>
        <member name="T:HSF.TechSvc2010.Common.FormatterFactory">
            <summary>
            직렬화를 담당하는 개체 생성을 대행하는 클래스입니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.FormatterFactory.CreateFormatter(HSF.TechSvc2010.Common.HSFServiceFormatterType)">
            <summary>
            직렬화를 담당하는 개체 생성을 대행합니다.
            </summary>
            <param name="formatterType">설정할 포맷 정보를 기입합니다.</param>
            <returns>설정한 포맷 정보에 따라 IFormatter (BinaryFormatter, SoapFormatter)로 반환 합니다.</returns>
        </member>
        <member name="T:HSF.TechSvc2010.Common.Cache.CacheValue">
            <summary>
            데이터 캐시를 사용하기위한 정보저장 클래스 입니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Cache.CacheValue.#ctor(System.Object,System.DateTime)">
            <summary>
            캐시할 값과 생성 시간을 지정하여 CacheValue 클래스의 새 인스턴스를 초기화 합니다.
            </summary>
            <param name="value">캐시할 값을 지정합니다.</param>
            <param name="itemAge">생성시간을 지정합니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Cache.CacheValue.#ctor(System.Object,System.DateTime,System.String)">
            <summary>
            캐시할 값, 생성 시간, 만료기간표현식을 지정하여 CacheValue 클래스의 새 인스턴스를 초기화 합니다.
            </summary>
            <param name="value">캐시할 값을 지정합니다.</param>
            <param name="itemAge">생성시간을 지정합니다.</param>
            <param name="refresh">만료기간표현식을 지정합니다.</param>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Cache.CacheValue.Value">
            <summary>
            캐시 값을 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Cache.CacheValue.ItemAge">
            <summary>
            생성시간을 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Cache.CacheValue.Refresh">
            <summary>
            만료기간 표현식을 설정하거나 가져옵니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.MVC.Adapter.WindowsFormsAdapter">
            <summary>
            Provides conectivity with windows forms hosts.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.MVC.Adapter.WindowsFormsAdapter._service">
            <summary>
            We keep the service because there's no such global context like the web HttpContext. 
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.MVC.Adapter.WindowsFormsAdapter._controller">
            <summary>
            The controller to connect with the host. We keep it because it must be connected after the form finished loading.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Adapter.WindowsFormsAdapter.Connect(HSF.TechSvc2010.MVC.Controller.BaseController,System.Object,System.ComponentModel.IContainer)">
            <summary>
            Connects a controller with its hosting environment.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Adapter.WindowsFormsAdapter.OnActivated(System.Object,System.EventArgs)">
            <summary>
            Hook controls to the controller to refresh the model.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Adapter.WindowsFormsAdapter.GetServiceHandler(System.Object,HSF.TechSvc2010.MVC.Services.GetServiceEventArgs)">
            <summary>
            Resolves queries for the <see cref="T:HSF.TechSvc2010.MVC.Services.IAdapterService"/> at runtime.
            </summary>
            <returns>The <see cref="T:HSF.TechSvc2010.MVC.Services.IAdapterService"/> instance or <c>null</c>.</returns>
        </member>
        <member name="T:HSF.TechSvc2010.Common.HSFRemoteContextData">
            <summary>
            AppDomain에서 전파되는 개체를 표시 합니다.
            다른 AppDomain에 있는 개체로 원격 메서드가 호출되면 현재 CallContext 클래스가 원격 위치에 대한 호출과 함계 전달되는 LogicalCallContext를 생성합니다.
            ILogicalThreadAffinative 인터페이스를 노출하고 CallContext에 저장되어 있는 개체에 한해 AppDomain에서 전파 됩니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.HSFRemoteContextData.#ctor">
            <summary>
            인수를 사용하지 않고 HSFRemoteContextData 클래스의 새 인스턴스를 초기화 합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.HSFRemoteContextData.#ctor(System.Object)">
            <summary>
            지정된 데이터를 사용하여 HSFRemoteContextData 클래스의 새 인스턴스를 초기화 합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.HSFRemoteContextData.Data">
            <summary>
            원격 메서드를 호출 될때 절달할 데이터를 설정하거나 가져옵니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.PrivilegeType">
            <summary>접근 권한 형식을 지정합니다.</summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.PrivilegeType.NotSet">
            <summary>설정되지 않음(권한 없음)</summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.PrivilegeType.Create">
            <summary>생성 권한</summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.PrivilegeType.Retrieve">
            <summary>조회 권한</summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.PrivilegeType.Update">
            <summary>수정 권한</summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.PrivilegeType.Delete">
            <summary>삭제 권한</summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.PrivilegeType.Print">
            <summary>인쇄 권한</summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.PrivilegeType.Download">
            <summary>다운로드 권한</summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.Privilege">
            <summary>
            응용프로그램 실행 권한에 대한 정의를 합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Privilege.op_Addition(HSF.TechSvc2010.Common.Privilege,HSF.TechSvc2010.Common.Privilege)">
            <summary>
            Privilege 의 + operator를 정의 합니다.
            좌측, 우측 피연산자의 C, R, U, P, P, W를 각각 OR 연산으로 처리를 한 결과를 반환합니다.
            </summary>
            <param name="a">+ 연산을 위한 피연산자를 지정합니다.</param>
            <param name="b">+ 연산을 위한 피연산자를 지정합니다.</param>
            <returns>Privilege + 연산 수행 결과를 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Privilege.#ctor">
            <summary>
            인수를 사용하지 않고 Privilege 클래스의 새 인스턴스를 초기화 합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Privilege.#ctor(System.Int32)">
            <summary>
            Privilege 의 해당하는 int 값으로 Privilege 클래스의 새 인스턴스를 초기화 합니다.
            예 )
                63=CRUDPW,
                63= RUDPW,
                15=CRUD  ,
                14= RUD  ,
                13=C UD  ,
                ...
            </summary>
            <param name="val">초기화 값을 지정합니다.</param>
            <exception cref="T:System.Exception">0 ~ 64 사이의 정수형만 사용할 수 있습니다.</exception>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Privilege.Check(HSF.TechSvc2010.Common.PrivilegeType)">
            <summary>
            이 개체에 할당된 CRUDPW에 대한 접근 권한 형식을 검사합니다.
            </summary>
            <param name="type">접근 권한 형식을 지정합니다.</param>
            <returns>접근 권한 형식을 검사하여 해당 접근 권한이 할당 되었는지 여부를 true, false로 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Privilege.ToInt">
            <summary>
            이 개체에 할당된 CRUDPW를 정수형으로 반환합니다.
            </summary>
            <returns>개체에 할당된 CRUDPW 값을 정수형으로 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Privilege.ToString">
            <summary>
            이 개체를 string 형태로 표현 합니다.
            문자열 표현식 - CRUDPW / CR_DPW / C_UDPW
            </summary>
            <returns>이 개체에 할당된 CRUDPW를 문자열로 반환합니다.</returns>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Privilege.C">
            <summary> 생성 권한을 가져오거나 설정합니다. </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Privilege.R">
            <summary> 조회 권한을 가져오거나 설정합니다.  </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Privilege.U">
            <summary> 수정 권한을 가져오거나 설정합니다.  </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Privilege.D">
            <summary> 삭제 권한을 가져오거나 설정합니다.  </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Privilege.P">
            <summary> 인쇄 권한을 가져오거나 설정합니다.  </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Privilege.W">
            <summary> 다운로드 권한을 가져오거나 설정합니다.  </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.DataItem">
            <summary>
             DataValue Collection 으로 object를 name, value 기반으로 저장하거나 index로 접근 가능하도록 해주는 개체입니다.
             메소드 호출에 전달되는 매개변수를 모두 포함할 수 있어 COM+, .NET Remoting, XML Webservice의 입출력 매개변수로 사용합니다.
             SqlDacBase, OracleDacBase, OleDbDacBase, ODBCDacBase 개체에서 처리하는 SQL 문장, 저장 프로시져를 실행할 때 매개변수와 1:1로 매핑 됩니다.
              
             매개변수로 사용될 경우 처리결과를 담기위해 DataTable, DataSet 속성을 포함합니다.
             IDataItem,IDisposable,ISerializable, IEnumerable 인터페이스를 상속 받고 있습니다.
            </summary>
            <example>
               아래 샘플코드는 DataItem 개체에 값을 추가,수정, 제거, 자원해제 하는 샘플입니다.
            <code>
                 // 개체 생성
                 DataItem item = new DataItem();
                 
                 // 매개변수 추가
                 item.add("param1", "test data");
                 item.add("param2", "test data2", ParameterDirection.Output);
                 item.add("param3", "test data3", ParameterDirection.Input, 10, DbType.StringFixedLength);
            
                 // 매개변수 값 변경
                 item["param3"].data = "modified data";
                 item[0].data = "modified data2";
            
                 // 순환 값 조회
                 foreach(DataValue val in item)
                 {
                     string temp = val.data.ToString();
                 }
                 
                 // 매개변수 제거
                 item.Remove("param1");
                 item.Remove(1);
                  
                 // 클리어
                 item.Clear();
            
                 // 자원해제
                 item.Dispose();
            </code>
            </example>
        </member>
        <member name="F:HSF.TechSvc2010.Common.DataItem._params">
            <summary>
            int Indexer 
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.DataItem._index">
            <summary>
            string Indexer
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.DataItem._RootGUID">
            <summary>
             GUID
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.DataItem._GUID">
            <summary>
            현개체의 GUID
            </summary>
            
        </member>
        <member name="F:HSF.TechSvc2010.Common.DataItem._Datatable">
            <summary>
            private datatable
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.DataItem._DataSet">
            <summary>
            private dataset
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItem.#ctor">
            <summary>
            인수를 사용하지 않고 DataItem 클래스의 새 인스턴스를 초기화 합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItem.#ctor(HSF.TechSvc2010.Common.DataItem)">
            <summary>
            DataItem 인수를 사용하여 DataItem 클래스의 새 인스턴스를 초기화 합니다.
            입력 받은 DataItem 인수는 새 인스턴스의 상위 개체로 할당 됩니다.
            </summary>
            <param name="parents"></param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItem.AddParam(HSF.TechSvc2010.Common.DataValue)">
            <summary>
            문자 인덱서에는 위치정보(Array List 배열 위치)만 저장
            </summary>
            <param name="dp"></param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItem.UpdateParam(HSF.TechSvc2010.Common.DataValue)">
            <summary>
            수정작업시 String indexer 관리
            </summary>
            <param name="dp"></param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItem.Remove(HSF.TechSvc2010.Common.IDataValue)">
            <summary>
            DataItem 개체의 Item을 IDataValue를 이용해 제거 합니다.
            </summary>
            <param name="val">IDataValue</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItem.Remove(System.Int32)">
            <summary>
            DataItem 개체의 Item을 Index를 이용해 제거 합니다.
            </summary>
            <param name="index">DataItem.add()를 이용해 등록된 순서 입니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItem.Remove(System.String)">
            <summary>
            DataItem 개체의 Item을 Key를 이용해 제거 합니다.
            DataItem의 add(string key, string value)를 이용해 등록 시 사용 된 키 이름으로 제거 합니다.
            </summary>
            <param name="keyname">Item의 키 이름</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItem.Copy">
            <summary>
            DataItem 개체는 다른 DataItem 개체로 복사 하여 반환 합니다.
            </summary>
            <returns>복사된 DatItem이 반환 됩니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItem.SetLength(System.String[])">
            <summary>
            인수로 전달 받은 Parameters의 이름 만큼 매개변수를 추가합니다.
            즉 string[]로 전달된 값을 DataItem의 Item 키 이름으로 추가 되고 값은 string.Empty로 초기화 됩니다.
            </summary>
            <param name="parameterlist">string[]의 각 string을 Item으로 추가 합니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItem.GetXml">
            <summary>
            DataItem에 저장된 Item을 XML 표현으로 반환합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItem.CreateChild">
            <summary>
            현재 DataItem 개체를 기준으로 자식 DataItem 개체를 만듭니다.
            </summary>
            <returns>현재 DataItem 개체가 Root DataItem이 되고 새로운 DataItem 개체를 생성하여 반환 합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItem.ContainKey(System.String)">
            <summary>
            Dataitem에 특정 키가 들어ㅓ 있는지 여부를 확인 합니다.
            </summary>
            <param name="key">Dataitem에서 찾을 수 있는 키 입니다.</param>
            <returns>DataItem에 지정된 키가 있는 Item이 포함되어 있으면 true이고, 그렇지 않으면 false 입니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItem.Clear">
            <summary>
            DataItem의 Index 값, Item 값을 Clear 합니다.
            기타 다른 값 (DataTable, Dataset)은 Clear 되지 않습니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItem.Add(System.Object)">
            <summary>
            지정된 개체를 DataItem에 추가 합니다. IDataValue는 단순추가되며 그 이외에는 Name1,값 의 형식의 DataValue로 전환되어 추가됩니다.
            </summary>
            <param name="obj">추가할 요소의 IDataValue 입니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItem.Add(HSF.TechSvc2010.Common.DataValue)">
            <summary>
            지정된 IDataValue 가지는 요소를 DataItem에 추가 합니다.
            </summary>
            <param name="val">추가할 요소의 IDataValue 입니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItem.add(System.String,System.Object)">
            <summary>
            지정된 키와 값을 가지는 요소를 DataItem에 추가 합니다.
            파라메터 개체로 사용 시에는 add(name, data, ParameterDirection.Input)가 기본 값 입니다.
            </summary>
            <param name="name">추가할 요소의 키 입니다.</param>
            <param name="data">추가할 요소의 값으로 null 일 수 있습니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItem.add(HSF.TechSvc2010.Common.DataValue)">
            <summary>
            지정된 IDataValue 가지는 요소를 DataItem에 추가 합니다.
            </summary>
            <param name="val">추가할 요소의 IDataValue 입니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItem.add(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            지정된 키, 값, 매개변수의 형식을 가지는 요소를 DataItem에 추가 합니다.
            </summary>
            <param name="name">추가할 요소의 키 입니다.</param>
            <param name="obj">추가할 요소의 값으로 null 일 수 있습니다.</param>
            <param name="dir">쿼리 내의 상대 매개 변수의 형식을 지정합니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItem.add(System.String,System.Object,System.Data.ParameterDirection,System.Int32,System.Data.DbType)">
            <summary>
            지정된 키, 값, 매개변수 형식, 사이즈, 매개변수 데이터 형식을 가지는 요소를 DataItem에 추가 합니다.
            </summary>
            <param name="name">추가할 요소의 키 입니다.</param>
            <param name="obj">추가할 요소의 값으로 null 일 수 있습니다.</param>
            <param name="dir">쿼리 내의 상대 매개 변수의 형식을 지정합니다.</param>
            <param name="length">매개변수 데이터 크기 입니다.</param>
            <param name="type">.NET Framework 데이터 공급자의 필드, 속성 또는 Parameter 개체의 데이터 형식을 지정합니다.</param>
        </member>
        <member name="F:HSF.TechSvc2010.Common.DataItem._SerializationFormatForData">
            <summary>
            IEnumerable XML Serialize 시 필요한 메소드 입니다.
            DataItem 에 요소를 추가 합니다.
            </summary>
            <param name="obj">추가할 요소의 값으로 null 일 수 있습니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItem.Dispose">
            <summary>
            DataItem에서 사용하는 모든 리소스를 해제 합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItem.Serialize(HSF.TechSvc2010.Common.DataItem)">
            <summary>
            SoapFormatter를 이용해 DataItem 개체를 XmlDocument로 반환 합니다.
            </summary>
            <param name="item">Soapformatter에 의해 XMLDocument로 반환할 DataItem을 지정합니다.</param>
            <returns>DataItem이 XMLDocument로 반환 횝니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItem.Serialize2String(HSF.TechSvc2010.Common.DataItem)">
            <summary>
            개체를 지정된 포매터(기본은 BinarayFormatter)를 사용하여 문자열로 직렬화 하고 이를 다시 Base64로 인코딩한 문지열을 리턴합니다.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItem.Serialize2XML(HSF.TechSvc2010.Common.DataItem)">
            <summary>
            개체를 Serialize2String()를 통해 문자열로 만들고 
            이를 다시 XMLDocument를 생성하여 내부에 DataItem Element에 담아 리턴합니다.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItem.Deserialize(System.Xml.XmlNode)">
            <summary>
            deserialize from xml node
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItem.Deserialize(System.Xml.XmlNode,System.Text.Encoding)">
            <summary>
            deserilize  from xml node, encoding
            </summary>
            <param name="node"></param>
            <param name="encodng"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItem.Deserialize(System.Xml.XmlDocument)">
            <summary>
            deserilize dataitem from xml document
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItem.Deserialize(System.Xml.XmlDocument,System.Text.Encoding)">
            <summary>
            deserilize dataitem from xml document
            </summary>
            <param name="xml"></param>
            <param name="encoding">encoding for Deserialize</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItem.DeSerializeFromString(System.String)">
            <summary>
            Base64로 인코딩된 문자열에서 원본 문자열을 추출하고 이를 다시 지정된 포매터(기본은 BinarryFormatter)를 사용하여 DataItem으로 복원합니다.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItem.DeSerializeFromXML(System.Xml.XmlDocument)">
            <summary>
            XMLDocument의 "DataItem" Element에서 
            데이터를 추출하여 "DeSerializeFromString" 메소드를 호추하여 DataItem을 복원합니다.
            </summary>
            <param name="doc"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItem.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializer를 위한 생성자로 직렬화 시 개체의 인스턴스를 초기화 합니다.
            </summary>
            <param name="si">데이터로 채울 SerializationInfo 입니다.</param>
            <param name="context">이 serialization에 대한 대상입니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItem.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            개체가 자체 serialization 및 deserializationㅇ르 제어할 수 있도록 합니다.
            대상 개체를 serialize하는 데 필요한 데이터로 SerializationInfo를 채웁니다.
            </summary>
            <param name="info">데이터로 채울 SerializationInfo 입니다.</param>
            <param name="context">이 serialization에 대한 대상입니다.</param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItem.ToString">
            <summary>
            이 개체를 string 형태로 표현 합니다.
            DataItem 개체가 string으로 변환은 아래와 같이 됩니다.
            <DataItem Row="index">
                <item N='키이름' Y='값' D='매개변수' L='매개변수사이즈' T='매개변수타입' />
                ....
            </DataItem>
            이 메소드를 상속되어 다른 형태로도 사용 가능 합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItem.GetEnumerator">
            <summary>
            For Each 구분을 위한 반복
            </summary>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.DataItem.Merge(HSF.TechSvc2010.Common.DataItem,System.Boolean)">
            <summary>
            현재 개체에 sub개체에 저장된 값을 merg합니다.
            overrideToExsitKey 가 true인 경우 이미 있는 값을 덮어 씁니다. overrideToExsitKey 값이 +false인 경우 기존 값이 null 또는 DBNull.Value인경우 새 값으로 바뀝니다.
            </summary>
            <param name="sub">병합할 dataitem</param>
        </member>
        <member name="P:HSF.TechSvc2010.Common.DataItem.ServiceFormatterType">
            <summary>
            송수신 데이터의 직렬화 방식을 설정하거나 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.DataItem.Item(System.String)">
            <summary>
            DataItem 개체 string 인덱서 입니다.
            키 이름으로 접근하면 IDataValue로 반환 합니다.
            </summary>
            <exception cref="T:System.ArgumentException">
            키 값이 없을 경우 ArgumentException 처리를 합니다. 
            에러 메시지는 "Encroach Unstored Data." 입니다.
            </exception>
        </member>
        <member name="P:HSF.TechSvc2010.Common.DataItem.Item(System.Int32)">
            <summary>
            DataItem 개체 index 인덱서 입니다.
            Item의 Index로 접근하면 IDataValue로 반환 합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.DataItem.Count">
            <summary>
            DataItem의 Item의 총 수를 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.DataItem.GUID">
            <summary>
            DataItem의 GUID를 가져옵니다.
            DataItem 인스턴스가 만들어지면 새로운 GUID를 할당 받습니다.
            유일키로 사용할 수 있습니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.DataItem.RootGUID">
            <summary>
            DataItem 개체의 Root GUID를 가져옵니다.
            DataItem 생성자에서 DataItem 인수를 갖는 생성자로 초기화 할 경우 값이 설정 됩니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.DataItem.DataTable">
            <summary>
            DataItem의 DataTable 값을 가져오거나 설정 할 수 있습니다.
            DataItem을 SqlDacBase, OracleDacBase, OleDbDacBase, ODBCDacBase를 이용해 데이터베이스 쿼리를 한 후 결과를 DataTable 개체에 반환 할 수 있습니다.
            또 하는 Multi-Tier 아키텍처에서 DataTable 값을 부고 받고자 할 경우에도 사용할 수 있습니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.DataItem.DataSet">
            <summary>
            DataItem의 DataSet 값을가져 오거나 설정 할 수 있습니다.
            DataItem을 SqlDacBase, OracleDacBase, OleDbDacBase, ODBCDacBase를 이용해 데이터베이스 쿼리를 한 후 결과를 DataTable 개체에 반환 할 수 있습니다.
            또 하는 Multi-Tier 아키텍처에서 DataTable 값을 부고 받고자 할 경우에도 사용할 수 있습니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.DataItem.SerializationFormatForData">
            <summary>
            DataTable, DataSet의 .NET Remoting에서의 직렬화 Formater를 가져오거나 설정합니다.
            - 기본값은 SerializationFormat.Binary 입니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.DataItem.Items">
            <summary>
            이 개체에 포함된 Item 개체를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.DataItem.SyncRoot">
            <summary>
            이 개체의 SyncRoot object를 가져옵니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.RecyclingConfigList">
            <summary>
            Recycling Configuration Class
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.RecyclingConfigList.Add(HSF.TechSvc2010.Common.RecyclingConfig)">
            <summary>
            Add Config
            </summary>
            <param name="cfg"></param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.RecyclingConfigList.Remove(System.Int32)">
            <summary>
            Remove Config
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.RecyclingConfigList.Remove(HSF.TechSvc2010.Common.RecyclingConfig)">
            <summary>
            Remove Config
            </summary>
            <param name="cfg"></param>
        </member>
        <member name="M:HSF.TechSvc2010.Common.RecyclingConfigList.Clear">
            <summary>
            Clear Config
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.RecyclingConfigList.NeedToRestart(System.DateTime,System.Int32,System.DateTime)">
            <summary>
            Check Need to Restart or not
            </summary>
            <param name="StartTime"></param>
            <param name="TotalRequest"></param>
            <param name="CurrentTime"></param>
            <returns></returns>
        </member>
        <member name="P:HSF.TechSvc2010.Common.RecyclingConfigList.Default">
            <summary>
            default instance of RecyclingConfigList
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.RecyclingConfigList.List">
            <summary>
            List of RecyclingConfig
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.RecyclingConfig.#ctor">
            <summary>
            cunstructor
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.RecyclingConfig.#ctor(HSF.TechSvc2010.Common.RecyclingOption,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="option"></param>
            <param name="val"></param>
        </member>
        <member name="P:HSF.TechSvc2010.Common.RecyclingConfig.Option">
            <summary>
            Option
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.RecyclingConfig.OptionValue">
            <summary>
            Option Value
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.RecyclingOption">
            <summary>
            Recycling Option
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.RecyclingOption.AterMinutes">
            <summary>
            특정 시간(분) 후 다시 재생
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.RecyclingOption.AfterRequest">
            <summary>
            특정 회수만큼 요청 수행후 재생
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.RecyclingOption.OnTimeList">
            <summary>
            지정된 시간에 재생
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.WorkerPrcessState">
            <summary>
            Worker Process 상태
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.WorkerPrcessState.Init">
            <summary>
            초기화중
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.WorkerPrcessState.Stopping">
            <summary>
            중지중
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.WorkerPrcessState.Stoped">
            <summary>
            중지됨
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.WorkerPrcessState.Starting">
            <summary>
            시작중
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.WorkerPrcessState.Running">
            <summary>
            동작중
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.IPoolable">
            <summary>
            Poolable Interface
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.IPoolable.FinalRelease">
            <summary>
            terminate
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.IPoolable.Initialize">
            <summary>
            init
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.IPoolable.Release">
            <summary>
            release
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.Crypto.AESCryptoAgent">
            <summary>
            AES 암호화 관리자 입니다.
            </summary>
            <reqid id="RQ-TS-BFT-013">Encryption/Decryption 지원</reqid>
        </member>
        <member name="F:HSF.TechSvc2010.Common.Crypto.AESCryptoAgent.KEY_TOKEN_IV">
            <summary>
            토큰 암호화 IV 저장 키 = "__KEY_TOKEN_IV__"
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.Crypto.AESCryptoAgent.KEY_TOKEN_KEY">
            <summary>
            토큰 암호화 키를 저장하는 키 = "__KEY_TOKEN_KEY__"
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.AESCryptoAgent.#ctor">
            <summary>
            AES  암호화 기능을 제공합니다.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.Crypto.AESCryptoAgent._TokenIV">
            <summary>
            token IV field
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.Crypto.AESCryptoAgent._TokenKey">
            <summary>
            token Key field
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.AESCryptoAgent.LoadKey">
            <summary>
            토큰 암호화 키를 로드합니다.
             - 저장되어 있을 경우 로드하며 없을경우 생성한다.
             - 새로 생성된 경우 생성한 키를 저장한다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.AESCryptoAgent.SaveKey">
            <summary>
            현재 암호화 키를 환경파일에 저장한다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.AESCryptoAgent.CreateNewAESKey">
            <summary>
            AES 키를 생성합니다.
            </summary>
            <returns>생성된 AES 키를 문자열로 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.AESCryptoAgent.CreateNewAESIV">
            <summary>
            AES 백터를 생성합니다.
            </summary>
            <returns>생성딘 AES 백터를 문자열로 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.AESCryptoAgent.GetNewAESKey">
            <summary>
            AES 키를 생성합니다.
            </summary>
            <returns>생성된 AES 키를 문자열로 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.AESCryptoAgent.GetNewAESIV">
            <summary>
            AES 백터를 생성합니다.
            </summary>
            <returns>생성딘 AES 백터를 문자열로 반환합니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.AESCryptoAgent.Encrypt(System.String)">
            <summary>
            AES 대칭키 알고리즘으로 문자열을 암호화 합니다.
            </summary>
            <param name="normalText">암호화 할 문자열을 지정합니다.</param>
            <returns> 암호화 문자열이 반환 됩니다. 암호화 문자열은 BASE 64로 형태의 문자열로 인코딩 되어 있습니다.</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Crypto.AESCryptoAgent.Decrypt(System.String)">
            <summary>
            AES 대칭키 알고리즘으로 문자열을 복호화 합니다.
            </summary>
            <param name="encryptedText">복호화할 문자열을 지정합니다.</param>
            <returns>복호화된 평문으로 반환 됩니다.</returns>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Crypto.AESCryptoAgent.TokenIV">
            <summary>
            token IV
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Crypto.AESCryptoAgent.TokenKey">
            <summary>
            token Key 
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Crypto.AESCryptoAgent.AESKey">
            <summary>
            AES Key를 설정하거나 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Crypto.AESCryptoAgent.AESIV">
            <summary>
            AES IV를 설정하거나 가져옵니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.Cache.ExtendedFormat">
            <summary>
            주기적 날짜 표현의 확장 형식 클래스 입니다.
            </summary>
            <remarks>
            - 데이터의 캐시 기간을 표현 합니다.
            - 작업의 반복시간을 표현 합니다.
            </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Cache.ExtendedFormat.#ctor(System.String)">
            <summary>
            날짜 확장 표현식을 지정하여 ExtendedFormat 클래스의 새 인스턴스를 초기화 합니다.
            </summary>
            <param name="format">날짜 확장 표현식을 지정합니다.</param>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">날짜 확장 표현식 에러시 발생합니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">날짜 확장 표현식 중 분, 시간, 일, 달, 요일에 표현 에러시 발생합니다.</exception>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Cache.ExtendedFormat.Minutes">
            <summary>
            날짜 확장 표현식의 분 정보를 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Cache.ExtendedFormat.Hours">
            <summary>
            날짜 확장 표현식의 시간 정보를 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Cache.ExtendedFormat.Days">
            <summary>
            날짜 확장 표현식의 일 정보를 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Cache.ExtendedFormat.Months">
            <summary>
            날짜 확장 표현식의 월 정보를 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Cache.ExtendedFormat.DaysOfWeek">
            <summary>
            날짜 확장 표현식의 요일 정보를 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Cache.ExtendedFormat.ExpireEveryMinute">
            <summary>
            매분 만료 여부를 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Cache.ExtendedFormat.ExpireEveryDay">
            <summary>
            매일 만료 여부를 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Cache.ExtendedFormat.ExpireEveryHour">
            <summary>
            매시 만료 여부를 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Cache.ExtendedFormat.ExpireEveryMonth">
            <summary>
            매월 만료 여부를 가져옵니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.Cache.ExtendedFormat.ExpireEveryDayOfWeek">
            <summary>
            매 요일 만료 여부를 가져옵니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.Cache.ExtendedFormatHelper">
             <summary>
             ExtendedFormat으로 표현된 만료기간, 지속시간등을 판독
             </summary>
             <remarks>
             Extended format syntax : <br/><br/>
             
             Minute       - 0-59 <br/>
             Hour         - 0-23 <br/>
             Day of month - 1-31 <br/>
             Month        - 1-12 <br/>
             Day of week  - 0-6 (Sunday is 0) <br/>
             Wildcards    - * means run every <br/>
             Examples: <br/>
             * * * * *    - expires every minute<br/>
             5 * * * *    - expire 5th minute of every hour <br/>
             * 21 * * *   - expire every minute of the 21st hour of every day <br/>
             31 15 * * *  - expire 3:31 PM every day <br/>
             7 4 * * 6    - expire Saturday 4:07 AM <br/>
             15 21 4 7 *  - expire 9:15 PM on 4 July <br/>
            	Therefore 6 6 6 6 1 means:
            	?have we crossed/entered the 6th minute AND
            	?have we crossed/entered the 6th hour AND 
            	?have we crossed/entered the 6th day AND
            	?have we crossed/entered the 6th month AND
            	?have we crossed/entered A MONDAY?
            
            	Therefore these cases should exhibit these behaviors:
            
            	getTime = DateTime.Parse( "02/20/2003 04:06:55 AM" );
            	nowTime = DateTime.Parse( "06/07/2003 07:07:00 AM" );
            	isExpired = ExtendedFormatHelper.IsExtendedExpired( "6 6 6 6 1", getTime, nowTime );
            	TRUE, ALL CROSSED/ENTERED
            			
            	getTime = DateTime.Parse( "02/20/2003 04:06:55 AM" );
            	nowTime = DateTime.Parse( "06/07/2003 07:07:00 AM" );
            	isExpired = ExtendedFormatHelper.IsExtendedExpired( "6 6 6 6 5", getTime, nowTime );
            	TRUE
            			
            	getTime = DateTime.Parse( "02/20/2003 04:06:55 AM" );
            	nowTime = DateTime.Parse( "06/06/2003 06:06:00 AM" );
            	isExpired = ExtendedFormatHelper.IsExtendedExpired( "6 6 6 6 *", getTime, nowTime );
            	TRUE
            	
            			
            	getTime = DateTime.Parse( "06/05/2003 04:06:55 AM" );
            	nowTime = DateTime.Parse( "06/06/2003 06:06:00 AM" );
            	isExpired = ExtendedFormatHelper.IsExtendedExpired( "6 6 6 6 5", getTime, nowTime );
            	TRUE
            						
            	getTime = DateTime.Parse( "06/05/2003 04:06:55 AM" );
            	nowTime = DateTime.Parse( "06/06/2005 05:06:00 AM" );
            	isExpired = ExtendedFormatHelper.IsExtendedExpired( "6 6 6 6 1", getTime, nowTime );
            	TRUE
            						
            	getTime = DateTime.Parse( "06/05/2003 04:06:55 AM" );
            	nowTime = DateTime.Parse( "06/06/2003 05:06:00 AM" );
            	isExpired = ExtendedFormatHelper.IsExtendedExpired( "6 6 6 6 1", getTime, nowTime );
            	FALSE:  we did not cross 6th hour, nor did we cross Monday
            						
            	getTime = DateTime.Parse( "06/05/2003 04:06:55 AM" );
            	nowTime = DateTime.Parse( "06/06/2003 06:06:00 AM" );
            	isExpired = ExtendedFormatHelper.IsExtendedExpired( "6 6 6 6 5", getTime, nowTime );
            	TRUE, we cross/enter Friday
            
            
            	getTime = DateTime.Parse( "06/05/2003 04:06:55 AM" );
            	nowTime = DateTime.Parse( "06/06/2003 06:06:00 AM" );
            	isExpired = ExtendedFormatHelper.IsExtendedExpired( "6 6 6 6 1", getTime, nowTime );
            	FALSE:  we don뭪 cross Monday but all other conditions satisfied
             </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Common.Cache.ExtendedFormatHelper.IsExtendedExpired(System.String,System.DateTime,System.DateTime)">
            <summary>
            Test the extended format with a given date.
            </summary>
            <param name="format">The extended format arguments.</param>
            <param name="getTime">The time when the item has been refreshed.</param>
            <param name="nowTime">Always DateTime.Now, or the date to test with.</param>
            <returns>true if the item was expired, otherwise false</returns>
        </member>
        <member name="T:HSF.TechSvc2010.Common.SubscriberEventsNotify">
            <summary>
            풀이 변경 되었을 경우 COM+ 이벤트를 구독하기 위한 대리자를 정의 합니다.
            </summary>
            <param name="MachineName">컴퓨티이름을 지정합니다.</param>
            <param name="ProcessName">프로세스 (Worker Process) 이름을 지정합니다.</param>
            <param name="ProcessID">프로세스 아이디를 지정합니다.</param>
            <param name="kind">풀이 변경 되는 종류를 지정합니다.</param>
            <param name="Count">풀의 갯수를 지정합니다.</param>
            <param name="sender">발생하는 이벤트 원본 메소드를 지정합니다.</param>
        </member>
        <member name="T:HSF.TechSvc2010.Common.PoolEventSubscriber">
            <summary>
            풀이 변경 되었을 경우 COM+ 이벤트를 구독하기 위한 클래스 입니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.IPoolEvents">
            <summary>
            풀이 변경 되었을 경우 COM+ 이벤트로 발생할 Interface를 정의 합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.IPoolEvents.Changed(System.String,System.String,System.Int32,HSF.TechSvc2010.Common.PoolChangeKind,System.Int32,System.Object)">
            <summary>
            풀이 변경 되었을 경우 발생합니다.
            </summary>
            <param name="MachineName">컴퓨티이름을 지정합니다.</param>
            <param name="ProcessName">프로세스 (Worker Process) 이름을 지정합니다.</param>
            <param name="ProcessID">프로세스 아이디를 지정합니다.</param>
            <param name="kind">풀이 변경 되는 종류를 지정합니다.</param>
            <param name="Count">풀의 갯수를 지정합니다.</param>
            <param name="sender">발생하는 이벤트 원본 메소드를 지정합니다.</param>
        </member>
        <member name="F:HSF.TechSvc2010.Common.PoolEventSubscriber.CONST_PROGRAM_ID">
            <summary>
            COM+ 이벤트를 발생하는 프로그램 식별자 상수 입니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.PoolEventSubscriber.Activate">
            <summary>
            COM+ 이벤트 구독을 시작을 의미합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.PoolEventSubscriber.Deactivate">
            <summary>
            COM+ 이벤트 구독을 종료을 의미합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.PoolEventSubscriber.Changed(System.String,System.String,System.Int32,HSF.TechSvc2010.Common.PoolChangeKind,System.Int32,System.Object)">
            <summary>
            풀이 변경 되었을 경우 발생합니다.
            </summary>
            <param name="MachineName">컴퓨티이름을 지정합니다.</param>
            <param name="ProcessName">프로세스 (Worker Process) 이름을 지정합니다.</param>
            <param name="ProcessID">프로세스 아이디를 지정합니다.</param>
            <param name="kind">풀이 변경 되는 종류를 지정합니다.</param>
            <param name="Count">풀의 갯수를 지정합니다.</param>
            <param name="sender">발생하는 이벤트 원본 메소드를 지정합니다.</param>
        </member>
        <member name="E:HSF.TechSvc2010.Common.PoolEventSubscriber.notify">
            <summary>
            풀이 변경 되었을 경우 COM+ 이벤트를 구독하기 위한 이벤트를 정의 합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Common.PoolEventSubscriber.SubscriptionID">
            <summary>
            구독자의 유일한 GUID 키 값을 가져옵니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.PoolChangeKind">
            <summary>
            풀이 변경 되는 종류를 정의 합니다.
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.PoolChangeKind.AblePoolChange">
            <summary>
            사용가능한 풀의 갯수가 변경
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.PoolChangeKind.WorkerPoolChange">
            <summary>
            사용중인 풀의 갯수가 변경
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Common.PoolChangeKind.TotalPoolChange">
            <summary>
            전체 풀의 갯수가 변경
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Common.PoolEvents">
            <summary>
            풀이 변경 되었을 때 이벤트를 처리할 COM+ 클래스 입니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Common.PoolEvents.Changed(System.String,System.String,System.Int32,HSF.TechSvc2010.Common.PoolChangeKind,System.Int32,System.Object)">
            <summary>
            풀이 변경 되었을 경우 발생합니다.
            </summary>
            <param name="MachineName">컴퓨티이름을 지정합니다.</param>
            <param name="ProcessName">프로세스 (Worker Process) 이름을 지정합니다.</param>
            <param name="ProcessID">프로세스 아이디를 지정합니다.</param>
            <param name="kind">풀이 변경 되는 종류를 지정합니다.</param>
            <param name="Count">풀의 갯수를 지정합니다.</param>
            <param name="sender">발생하는 이벤트 원본 메소드를 지정합니다.</param>
        </member>
        <member name="T:HSF.TechSvc2010.MVC.Design.ControllerDesigner">
            <summary>
            Provides a designer for the <see cref="T:HSF.TechSvc2010.MVC.Controller.BaseController"/> component.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Design.ControllerDesigner.OnEditMappings(System.Object,System.EventArgs)">
            <summary>
            Handles the verb action of editing the mappings.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Design.ControllerDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            Sets up the design features and hooks to events.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Design.ControllerDesigner.SetupServices">
            <summary>
            Attaches the adapter services at design and initialization time. 
            </summary>
            <remarks>
            Provides the <see cref="T:HSF.TechSvc2010.MVC.Services.IAdapterService"/> and <see cref="T:HSF.TechSvc2010.MVC.Services.IControllerService"/> to components 
            at design-time. Both are added only once to the host.
            </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Design.ControllerDesigner.OnVerifyOne(System.Object,System.EventArgs)">
            <summary>
            Passes the verification task to the <see cref="T:HSF.TechSvc2010.MVC.Services.IControllerService"/>.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Design.ControllerDesigner.OnComponentRemoving(System.Object,System.ComponentModel.Design.ComponentEventArgs)">
            <summary>
            Removes associated view mappings whenever a component is removed from the page.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.MVC.Design.ControllerDesigner.OnComponentRename(System.Object,System.ComponentModel.Design.ComponentRenameEventArgs)">
            <summary>
            Preserves view mappings in the event of a control rename.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.MVC.Design.ControllerDesigner.CurrentController">
            <summary>
            Helper converter property.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.MVC.Design.ControllerDesigner.Verbs">
            <summary>
            The collection of actions that the designer provides. 
            Displayed at the bottom of the property browser and on the popup menu.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.AOPLibrary.AOPAttribute">
            <summary>
            AOP Attribute Class
            </summary>
        </member>
    </members>
</doc>
