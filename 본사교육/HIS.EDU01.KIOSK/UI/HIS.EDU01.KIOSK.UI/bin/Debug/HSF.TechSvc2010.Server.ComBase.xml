<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HSF.TechSvc2010.Server.ComBase</name>
    </assembly>
    <members>
        <member name="P:HSF.TechSvc2010.Server.ComBase.MessageCompressionAttribute.IsCompression">
            <summary>
            트랜잭션 지원여부
            </summary>        
        </member>
        <member name="T:HSF.TechSvc2010.Server.ComBase.TxBase">
            <summary>
            트랜잭션을 사용하는 business logic 구현에 사용한다.
            </summary>
            
        </member>
        <member name="T:HSF.TechSvc2010.Server.ComBase.ComBase">
            <summary>
            Base Class of Business logic component 
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.ComBase.ComBase._sqlDbAgent">
            <summary>
            Database 작업을 위한 agent class
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.ComBase.ComBase._oracleDbAgent">
            <summary>
            Oralce Database 작업을 위한 agent class
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.ComBase.ComBase._oleDbAgent">
            <summary>
            Oralce Database 작업을 위한 agent class
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.ComBase.ComBase._odbcDbAgent">
            <summary>
            ODBC Database 작업을 위한 agent class
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.ComBase.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.ComBase.Activate">
            <summary>
            is called when activated
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.ComBase.Deactivate">
            <summary>
            is called when deactivated
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.ComBase.Dispose(System.Boolean)">
            <summary>
            dispoase resource
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ComBase.ComBase.DBAgent">
            <summary>
            기본 데이터베이스 접근 개체 - 기본값 SqlDacBase, 바꾸고자 할때는 재정의(Override하여 사용하십시오)
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ComBase.ComBase.SqlDbAgent">
            <summary>
            SQL DB Agent
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ComBase.ComBase.OracleDbAgent">
            <summary>
            Oracle DB Agent
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ComBase.ComBase.OleDbAgent">
            <summary>
            OLE DB Agent
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ComBase.ComBase.ODBCDbAgent">
            <summary>
            ODBC DB Agent
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.TxBase.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.ComBase.BizAgentException">
            <summary>
            비즈니스 서비스 수행시 발생하는 예외 클래스
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.BizAgentException.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.BizAgentException.#ctor(System.String)">
            <summary>
            생성자
            </summary>
            <param name="ErrorMessage">오류 코드</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.BizAgentException.#ctor(System.String,System.String)">
            <summary>
            생성자
            </summary>
            <param name="errorMessage">오류 메시지</param>
            <param name="errorCode">오류 코드</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.BizAgentException.#ctor(System.Exception)">
            <summary>
            생성자
            </summary>
            <param name="ex">예외</param>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ComBase.BizAgentException.AssemblyName">
            <summary>
            어셈블리
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ComBase.BizAgentException.MethodName">
            <summary>
            메소드
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ComBase.BizAgentException.ClassName">
            <summary>
            클래스
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ComBase.BizAgentException.ErrorCode">
            <summary>
            오류 코드
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.ComBase.BizAgentAssemblyNotFoundExceptoln">
            <summary>
            어셈블리가 GAC에 없을때 발생하는 예외
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.BizAgentAssemblyNotFoundExceptoln.#ctor(System.String,System.String,System.String)">
            <summary>
            생성자
            </summary>
            <param name="assemblyname">어셈블리</param>
            <param name="classname">클래스</param>
            <param name="methodname">메소드</param>
        </member>
        <member name="T:HSF.TechSvc2010.Server.ComBase.BizAgentClassNotFoundExceptoln">
            <summary>
            클래스가 어셈블리에 없을때 발생하는 예외
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.BizAgentClassNotFoundExceptoln.#ctor(System.String,System.String,System.String)">
            <summary>
            생성자
            </summary>
            <param name="assemblyname">어셈블리</param>
            <param name="classname">클래스</param>
            <param name="methodname">메소드</param>
        </member>
        <member name="T:HSF.TechSvc2010.Server.ComBase.BizAgentMethodNotFoundExceptoln">
            <summary>
            메소드가 클래스에 없을때 발생하는 예외
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.BizAgentMethodNotFoundExceptoln.#ctor(System.String,System.String,System.String)">
            <summary>
            생성자
            </summary>
            <param name="assemblyname">어셈블리</param>
            <param name="classname">클래스</param>
            <param name="methodname">메소드</param>
        </member>
        <member name="T:HSF.TechSvc2010.Server.ComBase.BizAgentInValidTokenExceptoln">
            <summary>
            인증되지 않은상태에서 비즈니스 서비스를 요청할 때 발생하는 예외
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.BizAgentInValidTokenExceptoln.#ctor(System.String,System.String,System.String)">
            <summary>
            생성자
            </summary>
            <param name="assemblyname">어셈블리</param>
            <param name="classname">클래스</param>
            <param name="methodname">메소드</param>
        </member>
        <member name="T:HSF.TechSvc2010.Server.ComBase.HSFBizServiceInvoker">
            <summary>
            HSFBizService를 분산트랜잭션하에 수행합니다.
            (필요할 경우에만)
            </summary>
            <reqid id="RQ-TS-BFT-008">통신환경의 단일화 서비스 지원</reqid>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.HSFBizServiceInvoker.setConfig(System.EnterpriseServices.ServiceConfig,HSF.TechSvc2010.Server.ComBase.HSFTransactionAttribute)">
            <summary>
            트랜잭션 옵션을 설정합니다.
            </summary>
            <param name="cfg"></param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.HSFBizServiceInvoker.GetBizComp(System.String)">
            <summary>
            클래스의 인스턴스를 생성하고 리턴합니다.
            </summary>
            <param name="classFullNameWithAssemblyName">Name of the class full name with assembly.</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.HSFBizServiceInvoker.BuildParameters(System.Reflection.MethodInfo,System.Object)">
            <summary>
            메소드의 입력 ARGUMENTS를 입력으로부터 적절하게 변환합니다.
            - input 이 DataItem인 경우 메소드의 ARGUMENTS로 차례로 매핑합니다.
            - input 이 DataItem이 아닌 경우 메소드의 ARGUMENTS로 1대1로 매핑합니다.
            - 메소드의 입력 ARGUMENTS가 없을 경우 null이 리턴됩니다.
            - 메소드의 입력 ARGUMENTS가 하나이고 입력된 input이 DataItem이면 input이 object[]로 리턴됩니다.
            </summary>
            <param name="m">The m. ( 메소드 )</param>
            <param name="input">The input. (입력 ARGUMENTS)</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.HSFBizServiceInvoker.GetMethdInfo(System.String,System.String,HSF.TechSvc2010.Common.DataItem)">
            <summary>
            MethodInfo 개체를 주어진  classname , methodname 으로부터 찾습니다.
            </summary>
            <param name="classFullNameWithAssemblyName">Name of the class full name with assembly.</param>
            <param name="methodName">Name of the method.</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.HSFBizServiceInvoker.GetTypeInfo(System.String)">
            <summary>
            Type을주어진 클래스이름에서 찾습니다.
            </summary>
            <param name="classFullNameWithAssemblyName">Name of the class full name with assembly.</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.HSFBizServiceInvoker.InvokeBizService(System.String,System.String,HSF.TechSvc2010.Common.DataItem)">
            <summary>
             비즈니스 서비스를 호출합니다.
            - 현재 시스템에 설치된 클래스의 메소드를 호출하고 리턴값을 반환합니다.
            - COM+, HSFBizService, 기타 클래스 모두를 지원합니다.
            </summary>
            <param name="classFullNameWithAssemblyName">네임스페이스를 포함한 클래스이름</param>
            <param name="methodName">메소드 이름</param>
            <param name="INPUT">입력 데이터
            메소드의 ARGUMENTS를 차례로 입력한 값입니다.
            </param>
            <returns>출력데이터</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.HSFBizServiceInvoker.InvokeBizService(HSF.TechSvc2010.Common.ServiceAssemblyInfo,System.String,System.String,System.Object[])">
            <summary>
             비즈니스 서비스를 호출합니다.
            - 현재 시스템에 설치된 클래스의 메소드를 호출하고 리턴값을 반환합니다.
            - COM+, HSFBizService, 기타 클래스 모두를 지원합니다.
            </summary>
            <param name="assemblyInfo">어셈블리 정보 클래스</param>
            /// <param name="className">네임스페이스를 포함한 클래스이름</param>
            <param name="methodName">메소드 이름</param>
            <param name="parameters">The parameters.</param>
            <returns>출력데이터</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.HSFBizServiceInvoker.InvokeBizServiceByteArray(HSF.TechSvc2010.Common.ServiceAssemblyInfo,System.String,System.String,System.Object[])">
            <summary>
             비즈니스 서비스를 호출합니다.
            - 현재 시스템에 설치된 클래스의 메소드를 호출하고 리턴값을 반환합니다.
            - COM+, HSFBizService, 기타 클래스 모두를 지원합니다.
            </summary>
            <param name="assemblyInfo">어셈블리 정보 클래스</param>
            /// <param name="className">네임스페이스를 포함한 클래스이름</param>
            <param name="methodName">메소드 이름</param>
            <param name="parameters">The parameters.</param>
            <returns>출력데이터</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.HSFBizServiceInvoker.InvokeBizService(System.String,System.String,System.Object[])">
            <summary>
             비즈니스 서비스를 호출합니다.
            - 현재 시스템에 설치된 클래스의 메소드를 호출하고 리턴값을 반환합니다.
            - COM+, HSFBizService, 기타 클래스 모두를 지원합니다.
            </summary>
            <param name="classFullNameWithAssemblyName">네임스페이스를 포함한 클래스이름</param>
            <param name="methodName">메소드 이름</param>
            <param name="parameters">The parameters.</param>
            <returns>출력데이터</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.HSFBizServiceInvoker.InvokeBizService(System.Object,System.Reflection.MethodInfo,HSF.TechSvc2010.Common.DataItem)">
            <summary>
             비즈니스 서비스를 호출합니다.
            - 현재 시스템에 설치된 클래스의 메소드를 호출하고 리턴값을 반환합니다.
            - COM+, HSFBizService, 기타 클래스 모두를 지원합니다.
            </summary>
            <param name="com"> 개체 </param>
            <param name="m">메소드정보</param>
            <param name="INPUT">입력(내부에 호출할 ARGUMENTS를 채워서 호출합니다.)</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.HSFBizServiceInvoker.InvokeBizService(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            비즈니스 서비스를 호출합니다.
            - 현재 시스템에 설치된 클래스의 메소드를 호출하고 리턴값을 반환합니다.
            - COM+, HSFBizService, 기타 클래스 모두를 지원합니다.
            </summary>
            <param name="com">개체</param>
            <param name="m">메소드정보</param>
            <param name="parametrs">The parametrs. PARAMETERS</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.HSFBizServiceInvoker.InvokeWorkFlowService(HSF.TechSvc2010.Common.ServiceAssemblyInfo,System.String,System.String,System.Object[])">
            <summary>
            2011-10-06 박길선 WorkFlow Assembly 호출
            </summary>
            <param name="assemblyInfo"></param>
            <param name="className"></param>
            <param name="methodName"></param>
            <param name="parameters"></param>
            <param name="?"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.HSFBizServiceInvoker.GetIsCompression(HSF.TechSvc2010.Common.ServiceAssemblyInfo,System.String,System.String,System.Object[])">
            <returns>출력데이터</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.HSFBizServiceInvoker.GetIsCompressionToByte(HSF.TechSvc2010.Common.ServiceAssemblyInfo,System.String,System.String,System.Object[])">
            <returns>출력데이터</returns>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ComBase.HSFBizServiceInvoker.UseMiddleware">
            <summary>
            미들웨어(BHS)사용 유무를 설정합니다. - 기본값은 true이며 false로 설정할 경우 미들웨어가 아닌 로컬에서 비즈니스를 실행합니다.
            configuration key "UseMiddleware"의 값을 "true", "false"로 설정 가능합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ComBase.HSFBizServiceInvoker.BusinessDebugDir">
            <summary>
            비즈니스 컴포넌트의 폴더 경로를 지정합니다. - 디버깅, 관리폴더의 위치 변경시 사용합니다.
            /// configuration key "BusinessDebugDir"의 값을 "c:\...."와 같이 설정하여 적용합니다.
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.ComBase.HSFTransactionOption">
            <summary>
            트랜잭션 사용여부
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.ComBase.HSFTransactionOption.NotSupported">
            <summary>
            트랜잭션을 사용하지 않음
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.ComBase.HSFTransactionOption.Supported">
            <summary>
            트랜잭션을 지원함
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.ComBase.HSFTransactionOption.Required">
            <summary>
            트랜잭션을 반드시 사용함
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.ComBase.HSFTransactionOption.RequiresNew">
            <summary>
            새로운 트랜잭션을 시작합
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.ComBase.HSFTransactionIsolationLevel">
            <summary>
            트랜잭션 격리 레벨
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.ComBase.HSFTransactionIsolationLevel.ReadUnCommitted">
            <summary>
            커밋되지 않은 읽기 허용
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.ComBase.HSFTransactionIsolationLevel.ReadCommitted">
            <summary>
            커밋된 읽기 허용
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.ComBase.HSFTransactionIsolationLevel.Serializable">
            <summary>
            직렬화
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.ComBase.HSFTransactionAttribute">
            <summary>
            HSF  BizService의 트랜잭션 옵션
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.HSFTransactionAttribute.#ctor(HSF.TechSvc2010.Server.ComBase.HSFTransactionOption,HSF.TechSvc2010.Server.ComBase.HSFTransactionIsolationLevel,System.Int32)">
            <summary>
            생성자
            </summary>
            <param name="toption">트랜잭션 옵션</param>
            <param name="level">격리 레벨</param>
            <param name="timeout">타임아웃</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.HSFTransactionAttribute.#ctor(HSF.TechSvc2010.Server.ComBase.HSFTransactionOption,HSF.TechSvc2010.Server.ComBase.HSFTransactionIsolationLevel)">
            <summary>
            생성자
            </summary>
            <param name="toption">트랜잭션 옵션</param>
            <param name="level">격리 레벨</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.HSFTransactionAttribute.#ctor(HSF.TechSvc2010.Server.ComBase.HSFTransactionOption)">
            <summary>
            생성자
            </summary>
            <param name="toption">트랜잭션 옵션</param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.HSFTransactionAttribute.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ComBase.HSFTransactionAttribute.Transation">
            <summary>
            트랜잭션 지원여부
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ComBase.HSFTransactionAttribute.Level">
            <summary>
            격리 레벨
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ComBase.HSFTransactionAttribute.Timeout">
            <summary>
            타임아웃 - 기본값 600
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.ComBase.NTxBase">
            <summary>
            트랜잭션을 지원하지 않는 Business Logic 작성시 사용합니다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.NTxBase.#ctor">
            <summary>
            default constructonr
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.ComBase.BizAgent">
            <summary>
            Business Service Agent
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.BizAgent.ExecuteBusiness(System.String,System.String,HSF.TechSvc2010.Common.DataItem)">
            <summary>
            Execute Extra COM+ Methods
            </summary>
            <param name="ClassName">클래스 이름(myAssembly.ClassName)</param>
            <param name="MethodName">메소드이름</param>
            <param name="input">입력매개변수</param>
            <returns></returns>
        </member>
        <member name="T:HSF.TechSvc2010.Server.ComBase.TXContext">
            <summary>
            Transaction Context 
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.ComBase.HSFBizService">
            <summary>
            일반 클래스로서 분산트랜잭션을 지원하는 비즈니스 서비스 클래스
            </summary>
            <reqid id="RQ-TS-BFT-007">Transaction 서비스 지원</reqid>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.HSFBizService.InvokeBizService(System.String,System.String,System.String,HSF.TechSvc2010.Common.DataItem)">
            <summary>
            다른 비즈니스 서비스를 호출할경우 사용합니다.
             내부적으로 HSFBizServiceInvoker.InvokeBizService(assemblyName,className, methodName, INPUT);를 호출함.
            </summary>
            <param name="assemblyName">어셈블리명</param>
            <param name="className">네임스페이스.클래스이름</param>
            <param name="methodName">메소드이름</param>
            <param name="INPUT">입력 매개변수</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.HSFBizService.InvokeBizService(System.String,System.String,HSF.TechSvc2010.Common.DataItem)">
            <summary>
            다른 비즈니스 서비스를 호출할경우 사용합니다.
             내부적으로 HSFBizServiceInvoker.InvokeBizService(classFullNameWithAssemblyName, methodName, INPUT);를 호출함.
            </summary>
            <param name="classFullNameWithAssemblyName">네임스페이스.클래스이름</param>
            <param name="methodName">메소드이름</param>
            <param name="INPUT">입력 매개변수</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.HSFBizService.InvokeBizService(System.String,System.String,System.String,System.Object[])">
            <summary>
            다른 비즈니스 서비스를 호출할경우 사용합니다.
             내부적으로 HSFBizServiceInvoker.InvokeBizService(classFullNameWithAssemblyName, methodName, INPUT);를 호출함.
            </summary>
            <param name="assemblyName">어셈블리명</param>
            <param name="className">네임스페이스.클래스이름</param>
            <param name="methodName">메소드이름</param>
            <param name="paramerts">입력 매개변수</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.HSFBizService.InvokeBizService(System.String,System.String,System.Object[])">
            <summary>
            다른 비즈니스 서비스를 호출할경우 사용합니다.
             내부적으로 HSFBizServiceInvoker.InvokeBizService(classFullNameWithAssemblyName, methodName, INPUT);를 호출함.
            </summary>
            <param name="classFullNameWithAssemblyName">네임스페이스.클래스이름</param>
            <param name="methodName">메소드이름</param>
            <param name="paramerts">입력 매개변수</param>
            <returns></returns>
        </member>
        <member name="F:HSF.TechSvc2010.Server.ComBase.HSFBizService._sqlDbAgent">
            <summary>
            Database 작업을 위한 agent class
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.ComBase.HSFBizService._oracleDbAgent">
            <summary>
            Oralce Database 작업을 위한 agent class
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.ComBase.HSFBizService._oleDbAgent">
            <summary>
            Oralce Database 작업을 위한 agent class
            </summary>
        </member>
        <member name="F:HSF.TechSvc2010.Server.ComBase.HSFBizService._odbcDbAgent">
            <summary>
            ODBC Database 작업을 위한 agent class
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.HSFBizService.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.HSFBizService.Dispose(System.Boolean)">
            <summary>
            dispoase resource
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.HSFBizService.Dispose">
            <summary>
            자원을 해제합니다.
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ComBase.HSFBizService.DBAgent">
            <summary>
            기본 데이터베이스 접근 개체 - 기본값 SqlDacBase, 바꾸고자 할때는 재정의(Override하여 사용하십시오)
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ComBase.HSFBizService.isActivated">
            <summary>
            Activate 여부
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ComBase.HSFBizService.isDeActivated">
            <summary>
            DeActivated 여부
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ComBase.HSFBizService.SqlDbAgent">
            <summary>
            SQL DB Agent
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ComBase.HSFBizService.OracleDbAgent">
            <summary>
            Oracle DB Agent
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ComBase.HSFBizService.OleDbAgent">
            <summary>
            OLE DB Agent
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ComBase.HSFBizService.ODBCDbAgent">
            <summary>
            ODBC DB Agent
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.TXScopeUtil.CreateTrasnsactionScope(System.Type,System.Reflection.MethodInfo)">
            <summary>
            Type 또는 Method에 정의된 설정을 바탕으로 TransactionScope를 작성하여 리턴합니다.
            </summary>
            <param name="t"></param>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="T:HSF.TechSvc2010.Server.ComBase.BizFactory">
            <summary>
            서비스 처리를 위한 COM+ 객체를 생성한다.
            </summary>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.BizFactory.GetBizComp(System.String,System.String)">
            <summary>
            Assembly Name, Class Name으로 부터 COM+ Object Instance를 생성한다.
            </summary>
            <param name="asmname">어셈블리명 ex) MyBiz.Bizlogic.Order </param>
            <param name="classname">클래스명 ex) OrderProcessClass </param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.BizFactory.GetBizComp(System.String)">
            <summary>
            Class의 Full Path로 부터 개체 생성 및 리턴
            </summary>
            <param name="classFullNameWithAssemblyName"> 클래스 Full Name ex) MyBiz.Bizlogic.Order.OrderProcessClass </param>
            <returns></returns>
            <remarks>
            	"." 으로 구분되며 최하위의 요소가 클래스 이름이며 그 위까지가 Assembly 이름이어야 한다.
            </remarks>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.BizFactory.GetBizComp(HSF.TechSvc2010.Common.RequestPacket)">
            <summary>
            RequestPacket으로 부터 Assembly의 COM+ Object 인스턴스 생성
            </summary>
            <param name="packet"></param>
            <returns></returns>
            <remarks>
             packet.Service.AssmFileName - 어셈블리 이름
             packet.Service.ClassName - 클래스 이름
            </remarks>
        </member>
        <member name="T:HSF.TechSvc2010.Server.ComBase.ITipTransaction">
            <summary>
            Interface for TIP(Transaction Internet Protocol)
            </summary>
        </member>
        <member name="T:HSF.TechSvc2010.Server.ComBase.TIPContext">
             <example>
             아래 예제는 화면에서 트랜잭션을 시작하고 Url을 비즈니스 로직에 전달하여 트랜잭션에 참여시키는 예제입니다.
             <code>
            
             // 하나. 트랜잭션을 시작하는 클래스의 메소드 예제
                    int rows = -1;
                    try
                    {
                        // 0. create TIPcontext
                        using (TIPContext context = new TIPContext())
                        {
                            // 1. start transaction
                            string url = context.BeginTrans();
            
                            // 2. do local job  
                            rows = ExecuteQuery(...,...);
                            
                            ITipTest RemoteService = ITipProxyUtil.GetProxy();
                            //3. pass context.url(transaciton rul) for remote call
                            string  rtn = RemoteService.RunComplteTest(context.Url, "remote", "remoteuser");
                            
                            //4. Call SetComplte meothd for Commit
                            context.SetComplete();
                            
                             //5. 예외가 발생하여 SetComplte()호출 전에 using 블록을 벗어나면 자동적으로 트랜잭션은 롤백됩니다.
                        }
                    }
                    catch (Exception ex)
                    {
                        throw;
                    }
                    return rows;
             
             // 둘. 트랜잭션에 참여하는 메소드의 예제
                public string TIPRolebackTest(string TipUrl, string UserID, string UserName)
                {
                    string msg = string.Empty;
                    try
                    {
                         // 0. 트랜잭션에 참혀하는 TIPContext를 생성합니다.
                        using (TIPContext context = new TIPContext(TipUrl))
                        {
                            // 1. 작업을 수행합니다.
                            int rows = ExecuteQuery(...);
                            
                            // 2. 트랜잭션을 완료합니다.
                            context.SetComplete();
                            
                            // 3. 강제로 롤백시키는 코드입니다. 
                            //  (예외가 발생하면 호출컨텍스트로 예외가 전되며 이를 통해 호출자가 전체 트랜잭션을 롤백합니다.)
                            throw new Exception("Usr Rollback Exception");
                        }
                    }
                    catch (Exception ex)
                    {
                        msg = ex.Message;
                        throw;
                    }
                    finally
                    {
                    }
            
                    return msg;
                }
             </code>
             </example>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.TIPContext.#ctor(System.String)">
            <summary>
            생성과 동시에 Join(uri)가 호출됩니다.
            </summary>
            <param name="uri"></param>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.TIPContext.BeginTrans">
            <summary>
            Begin Transaction ans Return Transation Url
            </summary>
            <returns>transaction url</returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.TIPContext.Join(System.String)">
            <summary>
            Join  to Internet Transaction
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.TIPContext.SetComplete">
            <summary>
            SetComplete 
            </summary>
            <param name="url">Transaction URL </param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.TIPContext.SetAbort">
            <summary>
            SetAbort
            </summary>
            <param name="url">Transaction URL</param>
            <returns></returns>
        </member>
        <member name="M:HSF.TechSvc2010.Server.ComBase.TIPContext.Dispose">
            <summary>
            Release Object Instance
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ComBase.TIPContext.IsVoted">
            <summary>
            Get or Set Transaction Voting
            </summary>
        </member>
        <member name="P:HSF.TechSvc2010.Server.ComBase.TIPContext.Url">
            <summary>
            get Transaction URI
            </summary>
        </member>
    </members>
</doc>
